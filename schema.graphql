schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false
  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]
  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean
  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String
  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]
  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String
  """does the column NOT match the given pattern"""
  _nlike: String
  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String
  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String
  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String
  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
Oauth requests, inserted before redirecting to the provider's site. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authProviderRequests {
  id: uuid!
  options(
    """JSON select path"""
    path: String
  ): jsonb
}

"""
aggregated selection of "auth.provider_requests"
"""
type authProviderRequests_aggregate {
  aggregate: authProviderRequests_aggregate_fields
  nodes: [authProviderRequests!]!
}

"""
aggregate fields of "auth.provider_requests"
"""
type authProviderRequests_aggregate_fields {
  count(columns: [authProviderRequests_select_column!], distinct: Boolean): Int!
  max: authProviderRequests_max_fields
  min: authProviderRequests_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input authProviderRequests_append_input {
  options: jsonb
}

"""
Boolean expression to filter rows from the table "auth.provider_requests". All fields are combined with a logical 'AND'.
"""
input authProviderRequests_bool_exp {
  _and: [authProviderRequests_bool_exp!]
  _not: authProviderRequests_bool_exp
  _or: [authProviderRequests_bool_exp!]
  id: uuid_comparison_exp
  options: jsonb_comparison_exp
}

"""
unique or primary key constraints on table "auth.provider_requests"
"""
enum authProviderRequests_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  provider_requests_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input authProviderRequests_delete_at_path_input {
  options: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input authProviderRequests_delete_elem_input {
  options: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input authProviderRequests_delete_key_input {
  options: String
}

"""
input type for inserting data into table "auth.provider_requests"
"""
input authProviderRequests_insert_input {
  id: uuid
  options: jsonb
}

"""aggregate max on columns"""
type authProviderRequests_max_fields {
  id: uuid
}

"""aggregate min on columns"""
type authProviderRequests_min_fields {
  id: uuid
}

"""
response of any mutation on the table "auth.provider_requests"
"""
type authProviderRequests_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [authProviderRequests!]!
}

"""
on_conflict condition type for table "auth.provider_requests"
"""
input authProviderRequests_on_conflict {
  constraint: authProviderRequests_constraint!
  update_columns: [authProviderRequests_update_column!]! = []
  where: authProviderRequests_bool_exp
}

"""Ordering options when selecting data from "auth.provider_requests"."""
input authProviderRequests_order_by {
  id: order_by
  options: order_by
}

"""primary key columns input for table: auth.provider_requests"""
input authProviderRequests_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input authProviderRequests_prepend_input {
  options: jsonb
}

"""
select columns of table "auth.provider_requests"
"""
enum authProviderRequests_select_column {
  """column name"""
  id
  """column name"""
  options
}

"""
input type for updating data in table "auth.provider_requests"
"""
input authProviderRequests_set_input {
  id: uuid
  options: jsonb
}

"""
Streaming cursor of the table "authProviderRequests"
"""
input authProviderRequests_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authProviderRequests_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authProviderRequests_stream_cursor_value_input {
  id: uuid
  options: jsonb
}

"""
update columns of table "auth.provider_requests"
"""
enum authProviderRequests_update_column {
  """column name"""
  id
  """column name"""
  options
}

input authProviderRequests_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: authProviderRequests_append_input
  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: authProviderRequests_delete_at_path_input
  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: authProviderRequests_delete_elem_input
  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: authProviderRequests_delete_key_input
  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: authProviderRequests_prepend_input
  """sets the columns of the filtered rows to the given values"""
  _set: authProviderRequests_set_input
  """filter the rows which have to be updated"""
  where: authProviderRequests_bool_exp!
}

"""
List of available Oauth providers. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authProviders {
  id: String!
  """An array relationship"""
  userProviders(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]
    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): [authUserProviders!]!
  """An aggregate relationship"""
  userProviders_aggregate(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]
    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): authUserProviders_aggregate!
}

"""
aggregated selection of "auth.providers"
"""
type authProviders_aggregate {
  aggregate: authProviders_aggregate_fields
  nodes: [authProviders!]!
}

"""
aggregate fields of "auth.providers"
"""
type authProviders_aggregate_fields {
  count(columns: [authProviders_select_column!], distinct: Boolean): Int!
  max: authProviders_max_fields
  min: authProviders_min_fields
}

"""
Boolean expression to filter rows from the table "auth.providers". All fields are combined with a logical 'AND'.
"""
input authProviders_bool_exp {
  _and: [authProviders_bool_exp!]
  _not: authProviders_bool_exp
  _or: [authProviders_bool_exp!]
  id: String_comparison_exp
  userProviders: authUserProviders_bool_exp
  userProviders_aggregate: authUserProviders_aggregate_bool_exp
}

"""
unique or primary key constraints on table "auth.providers"
"""
enum authProviders_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  providers_pkey
}

"""
input type for inserting data into table "auth.providers"
"""
input authProviders_insert_input {
  id: String
  userProviders: authUserProviders_arr_rel_insert_input
}

"""aggregate max on columns"""
type authProviders_max_fields {
  id: String
}

"""aggregate min on columns"""
type authProviders_min_fields {
  id: String
}

"""
response of any mutation on the table "auth.providers"
"""
type authProviders_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [authProviders!]!
}

"""
input type for inserting object relation for remote table "auth.providers"
"""
input authProviders_obj_rel_insert_input {
  data: authProviders_insert_input!
  """upsert condition"""
  on_conflict: authProviders_on_conflict
}

"""
on_conflict condition type for table "auth.providers"
"""
input authProviders_on_conflict {
  constraint: authProviders_constraint!
  update_columns: [authProviders_update_column!]! = []
  where: authProviders_bool_exp
}

"""Ordering options when selecting data from "auth.providers"."""
input authProviders_order_by {
  id: order_by
  userProviders_aggregate: authUserProviders_aggregate_order_by
}

"""primary key columns input for table: auth.providers"""
input authProviders_pk_columns_input {
  id: String!
}

"""
select columns of table "auth.providers"
"""
enum authProviders_select_column {
  """column name"""
  id
}

"""
input type for updating data in table "auth.providers"
"""
input authProviders_set_input {
  id: String
}

"""
Streaming cursor of the table "authProviders"
"""
input authProviders_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authProviders_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authProviders_stream_cursor_value_input {
  id: String
}

"""
update columns of table "auth.providers"
"""
enum authProviders_update_column {
  """column name"""
  id
}

input authProviders_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: authProviders_set_input
  """filter the rows which have to be updated"""
  where: authProviders_bool_exp!
}

"""
columns and relationships of "auth.refresh_token_types"
"""
type authRefreshTokenTypes {
  comment: String
  """An array relationship"""
  refreshTokens(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]
    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): [authRefreshTokens!]!
  """An aggregate relationship"""
  refreshTokens_aggregate(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]
    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): authRefreshTokens_aggregate!
  value: String!
}

"""
aggregated selection of "auth.refresh_token_types"
"""
type authRefreshTokenTypes_aggregate {
  aggregate: authRefreshTokenTypes_aggregate_fields
  nodes: [authRefreshTokenTypes!]!
}

"""
aggregate fields of "auth.refresh_token_types"
"""
type authRefreshTokenTypes_aggregate_fields {
  count(columns: [authRefreshTokenTypes_select_column!], distinct: Boolean): Int!
  max: authRefreshTokenTypes_max_fields
  min: authRefreshTokenTypes_min_fields
}

"""
Boolean expression to filter rows from the table "auth.refresh_token_types". All fields are combined with a logical 'AND'.
"""
input authRefreshTokenTypes_bool_exp {
  _and: [authRefreshTokenTypes_bool_exp!]
  _not: authRefreshTokenTypes_bool_exp
  _or: [authRefreshTokenTypes_bool_exp!]
  comment: String_comparison_exp
  refreshTokens: authRefreshTokens_bool_exp
  refreshTokens_aggregate: authRefreshTokens_aggregate_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "auth.refresh_token_types"
"""
enum authRefreshTokenTypes_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  refresh_token_types_pkey
}

enum authRefreshTokenTypes_enum {
  """Personal access token"""
  pat
  """Regular refresh token"""
  regular
}

"""
Boolean expression to compare columns of type "authRefreshTokenTypes_enum". All fields are combined with logical 'AND'.
"""
input authRefreshTokenTypes_enum_comparison_exp {
  _eq: authRefreshTokenTypes_enum
  _in: [authRefreshTokenTypes_enum!]
  _is_null: Boolean
  _neq: authRefreshTokenTypes_enum
  _nin: [authRefreshTokenTypes_enum!]
}

"""
input type for inserting data into table "auth.refresh_token_types"
"""
input authRefreshTokenTypes_insert_input {
  comment: String
  refreshTokens: authRefreshTokens_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type authRefreshTokenTypes_max_fields {
  comment: String
  value: String
}

"""aggregate min on columns"""
type authRefreshTokenTypes_min_fields {
  comment: String
  value: String
}

"""
response of any mutation on the table "auth.refresh_token_types"
"""
type authRefreshTokenTypes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [authRefreshTokenTypes!]!
}

"""
on_conflict condition type for table "auth.refresh_token_types"
"""
input authRefreshTokenTypes_on_conflict {
  constraint: authRefreshTokenTypes_constraint!
  update_columns: [authRefreshTokenTypes_update_column!]! = []
  where: authRefreshTokenTypes_bool_exp
}

"""Ordering options when selecting data from "auth.refresh_token_types"."""
input authRefreshTokenTypes_order_by {
  comment: order_by
  refreshTokens_aggregate: authRefreshTokens_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: auth.refresh_token_types"""
input authRefreshTokenTypes_pk_columns_input {
  value: String!
}

"""
select columns of table "auth.refresh_token_types"
"""
enum authRefreshTokenTypes_select_column {
  """column name"""
  comment
  """column name"""
  value
}

"""
input type for updating data in table "auth.refresh_token_types"
"""
input authRefreshTokenTypes_set_input {
  comment: String
  value: String
}

"""
Streaming cursor of the table "authRefreshTokenTypes"
"""
input authRefreshTokenTypes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authRefreshTokenTypes_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authRefreshTokenTypes_stream_cursor_value_input {
  comment: String
  value: String
}

"""
update columns of table "auth.refresh_token_types"
"""
enum authRefreshTokenTypes_update_column {
  """column name"""
  comment
  """column name"""
  value
}

input authRefreshTokenTypes_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: authRefreshTokenTypes_set_input
  """filter the rows which have to be updated"""
  where: authRefreshTokenTypes_bool_exp!
}

"""
User refresh tokens. Hasura auth uses them to rotate new access tokens as long as the refresh token is not expired. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authRefreshTokens {
  createdAt: timestamptz!
  expiresAt: timestamptz!
  id: uuid!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  refreshTokenHash: String
  type: authRefreshTokenTypes_enum!
  """An object relationship"""
  user: users!
  userId: uuid!
}

"""
aggregated selection of "auth.refresh_tokens"
"""
type authRefreshTokens_aggregate {
  aggregate: authRefreshTokens_aggregate_fields
  nodes: [authRefreshTokens!]!
}

input authRefreshTokens_aggregate_bool_exp {
  count: authRefreshTokens_aggregate_bool_exp_count
}

input authRefreshTokens_aggregate_bool_exp_count {
  arguments: [authRefreshTokens_select_column!]
  distinct: Boolean
  filter: authRefreshTokens_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "auth.refresh_tokens"
"""
type authRefreshTokens_aggregate_fields {
  count(columns: [authRefreshTokens_select_column!], distinct: Boolean): Int!
  max: authRefreshTokens_max_fields
  min: authRefreshTokens_min_fields
}

"""
order by aggregate values of table "auth.refresh_tokens"
"""
input authRefreshTokens_aggregate_order_by {
  count: order_by
  max: authRefreshTokens_max_order_by
  min: authRefreshTokens_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input authRefreshTokens_append_input {
  metadata: jsonb
}

"""
input type for inserting array relation for remote table "auth.refresh_tokens"
"""
input authRefreshTokens_arr_rel_insert_input {
  data: [authRefreshTokens_insert_input!]!
  """upsert condition"""
  on_conflict: authRefreshTokens_on_conflict
}

"""
Boolean expression to filter rows from the table "auth.refresh_tokens". All fields are combined with a logical 'AND'.
"""
input authRefreshTokens_bool_exp {
  _and: [authRefreshTokens_bool_exp!]
  _not: authRefreshTokens_bool_exp
  _or: [authRefreshTokens_bool_exp!]
  createdAt: timestamptz_comparison_exp
  expiresAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  metadata: jsonb_comparison_exp
  refreshTokenHash: String_comparison_exp
  type: authRefreshTokenTypes_enum_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "auth.refresh_tokens"
"""
enum authRefreshTokens_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  refresh_tokens_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input authRefreshTokens_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input authRefreshTokens_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input authRefreshTokens_delete_key_input {
  metadata: String
}

"""
input type for inserting data into table "auth.refresh_tokens"
"""
input authRefreshTokens_insert_input {
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  metadata: jsonb
  refreshTokenHash: String
  type: authRefreshTokenTypes_enum
  user: users_obj_rel_insert_input
  userId: uuid
}

"""aggregate max on columns"""
type authRefreshTokens_max_fields {
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  refreshTokenHash: String
  userId: uuid
}

"""
order by max() on columns of table "auth.refresh_tokens"
"""
input authRefreshTokens_max_order_by {
  createdAt: order_by
  expiresAt: order_by
  id: order_by
  refreshTokenHash: order_by
  userId: order_by
}

"""aggregate min on columns"""
type authRefreshTokens_min_fields {
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  refreshTokenHash: String
  userId: uuid
}

"""
order by min() on columns of table "auth.refresh_tokens"
"""
input authRefreshTokens_min_order_by {
  createdAt: order_by
  expiresAt: order_by
  id: order_by
  refreshTokenHash: order_by
  userId: order_by
}

"""
response of any mutation on the table "auth.refresh_tokens"
"""
type authRefreshTokens_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [authRefreshTokens!]!
}

"""
on_conflict condition type for table "auth.refresh_tokens"
"""
input authRefreshTokens_on_conflict {
  constraint: authRefreshTokens_constraint!
  update_columns: [authRefreshTokens_update_column!]! = []
  where: authRefreshTokens_bool_exp
}

"""Ordering options when selecting data from "auth.refresh_tokens"."""
input authRefreshTokens_order_by {
  createdAt: order_by
  expiresAt: order_by
  id: order_by
  metadata: order_by
  refreshTokenHash: order_by
  type: order_by
  user: users_order_by
  userId: order_by
}

"""primary key columns input for table: auth.refresh_tokens"""
input authRefreshTokens_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input authRefreshTokens_prepend_input {
  metadata: jsonb
}

"""
select columns of table "auth.refresh_tokens"
"""
enum authRefreshTokens_select_column {
  """column name"""
  createdAt
  """column name"""
  expiresAt
  """column name"""
  id
  """column name"""
  metadata
  """column name"""
  refreshTokenHash
  """column name"""
  type
  """column name"""
  userId
}

"""
input type for updating data in table "auth.refresh_tokens"
"""
input authRefreshTokens_set_input {
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  metadata: jsonb
  refreshTokenHash: String
  type: authRefreshTokenTypes_enum
  userId: uuid
}

"""
Streaming cursor of the table "authRefreshTokens"
"""
input authRefreshTokens_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authRefreshTokens_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authRefreshTokens_stream_cursor_value_input {
  createdAt: timestamptz
  expiresAt: timestamptz
  id: uuid
  metadata: jsonb
  refreshTokenHash: String
  type: authRefreshTokenTypes_enum
  userId: uuid
}

"""
update columns of table "auth.refresh_tokens"
"""
enum authRefreshTokens_update_column {
  """column name"""
  createdAt
  """column name"""
  expiresAt
  """column name"""
  id
  """column name"""
  metadata
  """column name"""
  refreshTokenHash
  """column name"""
  type
  """column name"""
  userId
}

input authRefreshTokens_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: authRefreshTokens_append_input
  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: authRefreshTokens_delete_at_path_input
  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: authRefreshTokens_delete_elem_input
  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: authRefreshTokens_delete_key_input
  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: authRefreshTokens_prepend_input
  """sets the columns of the filtered rows to the given values"""
  _set: authRefreshTokens_set_input
  """filter the rows which have to be updated"""
  where: authRefreshTokens_bool_exp!
}

"""
Persistent Hasura roles for users. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authRoles {
  role: String!
  """An array relationship"""
  userRoles(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]
    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): [authUserRoles!]!
  """An aggregate relationship"""
  userRoles_aggregate(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]
    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): authUserRoles_aggregate!
  """An array relationship"""
  usersByDefaultRole(
    """distinct select on columns"""
    distinct_on: [users_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [users_order_by!]
    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
  """An aggregate relationship"""
  usersByDefaultRole_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [users_order_by!]
    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!
}

"""
aggregated selection of "auth.roles"
"""
type authRoles_aggregate {
  aggregate: authRoles_aggregate_fields
  nodes: [authRoles!]!
}

"""
aggregate fields of "auth.roles"
"""
type authRoles_aggregate_fields {
  count(columns: [authRoles_select_column!], distinct: Boolean): Int!
  max: authRoles_max_fields
  min: authRoles_min_fields
}

"""
Boolean expression to filter rows from the table "auth.roles". All fields are combined with a logical 'AND'.
"""
input authRoles_bool_exp {
  _and: [authRoles_bool_exp!]
  _not: authRoles_bool_exp
  _or: [authRoles_bool_exp!]
  role: String_comparison_exp
  userRoles: authUserRoles_bool_exp
  userRoles_aggregate: authUserRoles_aggregate_bool_exp
  usersByDefaultRole: users_bool_exp
  usersByDefaultRole_aggregate: users_aggregate_bool_exp
}

"""
unique or primary key constraints on table "auth.roles"
"""
enum authRoles_constraint {
  """
  unique or primary key constraint on columns "role"
  """
  roles_pkey
}

"""
input type for inserting data into table "auth.roles"
"""
input authRoles_insert_input {
  role: String
  userRoles: authUserRoles_arr_rel_insert_input
  usersByDefaultRole: users_arr_rel_insert_input
}

"""aggregate max on columns"""
type authRoles_max_fields {
  role: String
}

"""aggregate min on columns"""
type authRoles_min_fields {
  role: String
}

"""
response of any mutation on the table "auth.roles"
"""
type authRoles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [authRoles!]!
}

"""
input type for inserting object relation for remote table "auth.roles"
"""
input authRoles_obj_rel_insert_input {
  data: authRoles_insert_input!
  """upsert condition"""
  on_conflict: authRoles_on_conflict
}

"""
on_conflict condition type for table "auth.roles"
"""
input authRoles_on_conflict {
  constraint: authRoles_constraint!
  update_columns: [authRoles_update_column!]! = []
  where: authRoles_bool_exp
}

"""Ordering options when selecting data from "auth.roles"."""
input authRoles_order_by {
  role: order_by
  userRoles_aggregate: authUserRoles_aggregate_order_by
  usersByDefaultRole_aggregate: users_aggregate_order_by
}

"""primary key columns input for table: auth.roles"""
input authRoles_pk_columns_input {
  role: String!
}

"""
select columns of table "auth.roles"
"""
enum authRoles_select_column {
  """column name"""
  role
}

"""
input type for updating data in table "auth.roles"
"""
input authRoles_set_input {
  role: String
}

"""
Streaming cursor of the table "authRoles"
"""
input authRoles_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authRoles_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authRoles_stream_cursor_value_input {
  role: String
}

"""
update columns of table "auth.roles"
"""
enum authRoles_update_column {
  """column name"""
  role
}

input authRoles_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: authRoles_set_input
  """filter the rows which have to be updated"""
  where: authRoles_bool_exp!
}

"""
Active providers for a given user. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authUserProviders {
  accessToken: String!
  createdAt: timestamptz!
  id: uuid!
  """An object relationship"""
  provider: authProviders!
  providerId: String!
  providerUserId: String!
  refreshToken: String
  updatedAt: timestamptz!
  """An object relationship"""
  user: users!
  userId: uuid!
}

"""
aggregated selection of "auth.user_providers"
"""
type authUserProviders_aggregate {
  aggregate: authUserProviders_aggregate_fields
  nodes: [authUserProviders!]!
}

input authUserProviders_aggregate_bool_exp {
  count: authUserProviders_aggregate_bool_exp_count
}

input authUserProviders_aggregate_bool_exp_count {
  arguments: [authUserProviders_select_column!]
  distinct: Boolean
  filter: authUserProviders_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "auth.user_providers"
"""
type authUserProviders_aggregate_fields {
  count(columns: [authUserProviders_select_column!], distinct: Boolean): Int!
  max: authUserProviders_max_fields
  min: authUserProviders_min_fields
}

"""
order by aggregate values of table "auth.user_providers"
"""
input authUserProviders_aggregate_order_by {
  count: order_by
  max: authUserProviders_max_order_by
  min: authUserProviders_min_order_by
}

"""
input type for inserting array relation for remote table "auth.user_providers"
"""
input authUserProviders_arr_rel_insert_input {
  data: [authUserProviders_insert_input!]!
  """upsert condition"""
  on_conflict: authUserProviders_on_conflict
}

"""
Boolean expression to filter rows from the table "auth.user_providers". All fields are combined with a logical 'AND'.
"""
input authUserProviders_bool_exp {
  _and: [authUserProviders_bool_exp!]
  _not: authUserProviders_bool_exp
  _or: [authUserProviders_bool_exp!]
  accessToken: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  provider: authProviders_bool_exp
  providerId: String_comparison_exp
  providerUserId: String_comparison_exp
  refreshToken: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "auth.user_providers"
"""
enum authUserProviders_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  user_providers_pkey
  """
  unique or primary key constraint on columns "provider_user_id", "provider_id"
  """
  user_providers_provider_id_provider_user_id_key
}

"""
input type for inserting data into table "auth.user_providers"
"""
input authUserProviders_insert_input {
  accessToken: String
  createdAt: timestamptz
  id: uuid
  provider: authProviders_obj_rel_insert_input
  providerId: String
  providerUserId: String
  refreshToken: String
  updatedAt: timestamptz
  user: users_obj_rel_insert_input
  userId: uuid
}

"""aggregate max on columns"""
type authUserProviders_max_fields {
  accessToken: String
  createdAt: timestamptz
  id: uuid
  providerId: String
  providerUserId: String
  refreshToken: String
  updatedAt: timestamptz
  userId: uuid
}

"""
order by max() on columns of table "auth.user_providers"
"""
input authUserProviders_max_order_by {
  accessToken: order_by
  createdAt: order_by
  id: order_by
  providerId: order_by
  providerUserId: order_by
  refreshToken: order_by
  updatedAt: order_by
  userId: order_by
}

"""aggregate min on columns"""
type authUserProviders_min_fields {
  accessToken: String
  createdAt: timestamptz
  id: uuid
  providerId: String
  providerUserId: String
  refreshToken: String
  updatedAt: timestamptz
  userId: uuid
}

"""
order by min() on columns of table "auth.user_providers"
"""
input authUserProviders_min_order_by {
  accessToken: order_by
  createdAt: order_by
  id: order_by
  providerId: order_by
  providerUserId: order_by
  refreshToken: order_by
  updatedAt: order_by
  userId: order_by
}

"""
response of any mutation on the table "auth.user_providers"
"""
type authUserProviders_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [authUserProviders!]!
}

"""
on_conflict condition type for table "auth.user_providers"
"""
input authUserProviders_on_conflict {
  constraint: authUserProviders_constraint!
  update_columns: [authUserProviders_update_column!]! = []
  where: authUserProviders_bool_exp
}

"""Ordering options when selecting data from "auth.user_providers"."""
input authUserProviders_order_by {
  accessToken: order_by
  createdAt: order_by
  id: order_by
  provider: authProviders_order_by
  providerId: order_by
  providerUserId: order_by
  refreshToken: order_by
  updatedAt: order_by
  user: users_order_by
  userId: order_by
}

"""primary key columns input for table: auth.user_providers"""
input authUserProviders_pk_columns_input {
  id: uuid!
}

"""
select columns of table "auth.user_providers"
"""
enum authUserProviders_select_column {
  """column name"""
  accessToken
  """column name"""
  createdAt
  """column name"""
  id
  """column name"""
  providerId
  """column name"""
  providerUserId
  """column name"""
  refreshToken
  """column name"""
  updatedAt
  """column name"""
  userId
}

"""
input type for updating data in table "auth.user_providers"
"""
input authUserProviders_set_input {
  accessToken: String
  createdAt: timestamptz
  id: uuid
  providerId: String
  providerUserId: String
  refreshToken: String
  updatedAt: timestamptz
  userId: uuid
}

"""
Streaming cursor of the table "authUserProviders"
"""
input authUserProviders_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authUserProviders_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authUserProviders_stream_cursor_value_input {
  accessToken: String
  createdAt: timestamptz
  id: uuid
  providerId: String
  providerUserId: String
  refreshToken: String
  updatedAt: timestamptz
  userId: uuid
}

"""
update columns of table "auth.user_providers"
"""
enum authUserProviders_update_column {
  """column name"""
  accessToken
  """column name"""
  createdAt
  """column name"""
  id
  """column name"""
  providerId
  """column name"""
  providerUserId
  """column name"""
  refreshToken
  """column name"""
  updatedAt
  """column name"""
  userId
}

input authUserProviders_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: authUserProviders_set_input
  """filter the rows which have to be updated"""
  where: authUserProviders_bool_exp!
}

"""
Roles of users. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authUserRoles {
  createdAt: timestamptz!
  id: uuid!
  role: String!
  """An object relationship"""
  roleByRole: authRoles!
  """An object relationship"""
  user: users!
  userId: uuid!
}

"""
aggregated selection of "auth.user_roles"
"""
type authUserRoles_aggregate {
  aggregate: authUserRoles_aggregate_fields
  nodes: [authUserRoles!]!
}

input authUserRoles_aggregate_bool_exp {
  count: authUserRoles_aggregate_bool_exp_count
}

input authUserRoles_aggregate_bool_exp_count {
  arguments: [authUserRoles_select_column!]
  distinct: Boolean
  filter: authUserRoles_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "auth.user_roles"
"""
type authUserRoles_aggregate_fields {
  count(columns: [authUserRoles_select_column!], distinct: Boolean): Int!
  max: authUserRoles_max_fields
  min: authUserRoles_min_fields
}

"""
order by aggregate values of table "auth.user_roles"
"""
input authUserRoles_aggregate_order_by {
  count: order_by
  max: authUserRoles_max_order_by
  min: authUserRoles_min_order_by
}

"""
input type for inserting array relation for remote table "auth.user_roles"
"""
input authUserRoles_arr_rel_insert_input {
  data: [authUserRoles_insert_input!]!
  """upsert condition"""
  on_conflict: authUserRoles_on_conflict
}

"""
Boolean expression to filter rows from the table "auth.user_roles". All fields are combined with a logical 'AND'.
"""
input authUserRoles_bool_exp {
  _and: [authUserRoles_bool_exp!]
  _not: authUserRoles_bool_exp
  _or: [authUserRoles_bool_exp!]
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  role: String_comparison_exp
  roleByRole: authRoles_bool_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "auth.user_roles"
"""
enum authUserRoles_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  user_roles_pkey
  """
  unique or primary key constraint on columns "user_id", "role"
  """
  user_roles_user_id_role_key
}

"""
input type for inserting data into table "auth.user_roles"
"""
input authUserRoles_insert_input {
  createdAt: timestamptz
  id: uuid
  role: String
  roleByRole: authRoles_obj_rel_insert_input
  user: users_obj_rel_insert_input
  userId: uuid
}

"""aggregate max on columns"""
type authUserRoles_max_fields {
  createdAt: timestamptz
  id: uuid
  role: String
  userId: uuid
}

"""
order by max() on columns of table "auth.user_roles"
"""
input authUserRoles_max_order_by {
  createdAt: order_by
  id: order_by
  role: order_by
  userId: order_by
}

"""aggregate min on columns"""
type authUserRoles_min_fields {
  createdAt: timestamptz
  id: uuid
  role: String
  userId: uuid
}

"""
order by min() on columns of table "auth.user_roles"
"""
input authUserRoles_min_order_by {
  createdAt: order_by
  id: order_by
  role: order_by
  userId: order_by
}

"""
response of any mutation on the table "auth.user_roles"
"""
type authUserRoles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [authUserRoles!]!
}

"""
on_conflict condition type for table "auth.user_roles"
"""
input authUserRoles_on_conflict {
  constraint: authUserRoles_constraint!
  update_columns: [authUserRoles_update_column!]! = []
  where: authUserRoles_bool_exp
}

"""Ordering options when selecting data from "auth.user_roles"."""
input authUserRoles_order_by {
  createdAt: order_by
  id: order_by
  role: order_by
  roleByRole: authRoles_order_by
  user: users_order_by
  userId: order_by
}

"""primary key columns input for table: auth.user_roles"""
input authUserRoles_pk_columns_input {
  id: uuid!
}

"""
select columns of table "auth.user_roles"
"""
enum authUserRoles_select_column {
  """column name"""
  createdAt
  """column name"""
  id
  """column name"""
  role
  """column name"""
  userId
}

"""
input type for updating data in table "auth.user_roles"
"""
input authUserRoles_set_input {
  createdAt: timestamptz
  id: uuid
  role: String
  userId: uuid
}

"""
Streaming cursor of the table "authUserRoles"
"""
input authUserRoles_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authUserRoles_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authUserRoles_stream_cursor_value_input {
  createdAt: timestamptz
  id: uuid
  role: String
  userId: uuid
}

"""
update columns of table "auth.user_roles"
"""
enum authUserRoles_update_column {
  """column name"""
  createdAt
  """column name"""
  id
  """column name"""
  role
  """column name"""
  userId
}

input authUserRoles_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: authUserRoles_set_input
  """filter the rows which have to be updated"""
  where: authUserRoles_bool_exp!
}

"""
User webauthn security keys. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type authUserSecurityKeys {
  counter: bigint!
  credentialId: String!
  credentialPublicKey: bytea
  id: uuid!
  nickname: String
  transports: String!
  """An object relationship"""
  user: users!
  userId: uuid!
}

"""
aggregated selection of "auth.user_security_keys"
"""
type authUserSecurityKeys_aggregate {
  aggregate: authUserSecurityKeys_aggregate_fields
  nodes: [authUserSecurityKeys!]!
}

input authUserSecurityKeys_aggregate_bool_exp {
  count: authUserSecurityKeys_aggregate_bool_exp_count
}

input authUserSecurityKeys_aggregate_bool_exp_count {
  arguments: [authUserSecurityKeys_select_column!]
  distinct: Boolean
  filter: authUserSecurityKeys_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "auth.user_security_keys"
"""
type authUserSecurityKeys_aggregate_fields {
  avg: authUserSecurityKeys_avg_fields
  count(columns: [authUserSecurityKeys_select_column!], distinct: Boolean): Int!
  max: authUserSecurityKeys_max_fields
  min: authUserSecurityKeys_min_fields
  stddev: authUserSecurityKeys_stddev_fields
  stddev_pop: authUserSecurityKeys_stddev_pop_fields
  stddev_samp: authUserSecurityKeys_stddev_samp_fields
  sum: authUserSecurityKeys_sum_fields
  var_pop: authUserSecurityKeys_var_pop_fields
  var_samp: authUserSecurityKeys_var_samp_fields
  variance: authUserSecurityKeys_variance_fields
}

"""
order by aggregate values of table "auth.user_security_keys"
"""
input authUserSecurityKeys_aggregate_order_by {
  avg: authUserSecurityKeys_avg_order_by
  count: order_by
  max: authUserSecurityKeys_max_order_by
  min: authUserSecurityKeys_min_order_by
  stddev: authUserSecurityKeys_stddev_order_by
  stddev_pop: authUserSecurityKeys_stddev_pop_order_by
  stddev_samp: authUserSecurityKeys_stddev_samp_order_by
  sum: authUserSecurityKeys_sum_order_by
  var_pop: authUserSecurityKeys_var_pop_order_by
  var_samp: authUserSecurityKeys_var_samp_order_by
  variance: authUserSecurityKeys_variance_order_by
}

"""
input type for inserting array relation for remote table "auth.user_security_keys"
"""
input authUserSecurityKeys_arr_rel_insert_input {
  data: [authUserSecurityKeys_insert_input!]!
  """upsert condition"""
  on_conflict: authUserSecurityKeys_on_conflict
}

"""aggregate avg on columns"""
type authUserSecurityKeys_avg_fields {
  counter: Float
}

"""
order by avg() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_avg_order_by {
  counter: order_by
}

"""
Boolean expression to filter rows from the table "auth.user_security_keys". All fields are combined with a logical 'AND'.
"""
input authUserSecurityKeys_bool_exp {
  _and: [authUserSecurityKeys_bool_exp!]
  _not: authUserSecurityKeys_bool_exp
  _or: [authUserSecurityKeys_bool_exp!]
  counter: bigint_comparison_exp
  credentialId: String_comparison_exp
  credentialPublicKey: bytea_comparison_exp
  id: uuid_comparison_exp
  nickname: String_comparison_exp
  transports: String_comparison_exp
  user: users_bool_exp
  userId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "auth.user_security_keys"
"""
enum authUserSecurityKeys_constraint {
  """
  unique or primary key constraint on columns "credential_id"
  """
  user_security_key_credential_id_key
  """
  unique or primary key constraint on columns "id"
  """
  user_security_keys_pkey
}

"""
input type for incrementing numeric columns in table "auth.user_security_keys"
"""
input authUserSecurityKeys_inc_input {
  counter: bigint
}

"""
input type for inserting data into table "auth.user_security_keys"
"""
input authUserSecurityKeys_insert_input {
  counter: bigint
  credentialId: String
  credentialPublicKey: bytea
  id: uuid
  nickname: String
  transports: String
  user: users_obj_rel_insert_input
  userId: uuid
}

"""aggregate max on columns"""
type authUserSecurityKeys_max_fields {
  counter: bigint
  credentialId: String
  id: uuid
  nickname: String
  transports: String
  userId: uuid
}

"""
order by max() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_max_order_by {
  counter: order_by
  credentialId: order_by
  id: order_by
  nickname: order_by
  transports: order_by
  userId: order_by
}

"""aggregate min on columns"""
type authUserSecurityKeys_min_fields {
  counter: bigint
  credentialId: String
  id: uuid
  nickname: String
  transports: String
  userId: uuid
}

"""
order by min() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_min_order_by {
  counter: order_by
  credentialId: order_by
  id: order_by
  nickname: order_by
  transports: order_by
  userId: order_by
}

"""
response of any mutation on the table "auth.user_security_keys"
"""
type authUserSecurityKeys_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [authUserSecurityKeys!]!
}

"""
on_conflict condition type for table "auth.user_security_keys"
"""
input authUserSecurityKeys_on_conflict {
  constraint: authUserSecurityKeys_constraint!
  update_columns: [authUserSecurityKeys_update_column!]! = []
  where: authUserSecurityKeys_bool_exp
}

"""Ordering options when selecting data from "auth.user_security_keys"."""
input authUserSecurityKeys_order_by {
  counter: order_by
  credentialId: order_by
  credentialPublicKey: order_by
  id: order_by
  nickname: order_by
  transports: order_by
  user: users_order_by
  userId: order_by
}

"""primary key columns input for table: auth.user_security_keys"""
input authUserSecurityKeys_pk_columns_input {
  id: uuid!
}

"""
select columns of table "auth.user_security_keys"
"""
enum authUserSecurityKeys_select_column {
  """column name"""
  counter
  """column name"""
  credentialId
  """column name"""
  credentialPublicKey
  """column name"""
  id
  """column name"""
  nickname
  """column name"""
  transports
  """column name"""
  userId
}

"""
input type for updating data in table "auth.user_security_keys"
"""
input authUserSecurityKeys_set_input {
  counter: bigint
  credentialId: String
  credentialPublicKey: bytea
  id: uuid
  nickname: String
  transports: String
  userId: uuid
}

"""aggregate stddev on columns"""
type authUserSecurityKeys_stddev_fields {
  counter: Float
}

"""
order by stddev() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_stddev_order_by {
  counter: order_by
}

"""aggregate stddev_pop on columns"""
type authUserSecurityKeys_stddev_pop_fields {
  counter: Float
}

"""
order by stddev_pop() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_stddev_pop_order_by {
  counter: order_by
}

"""aggregate stddev_samp on columns"""
type authUserSecurityKeys_stddev_samp_fields {
  counter: Float
}

"""
order by stddev_samp() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_stddev_samp_order_by {
  counter: order_by
}

"""
Streaming cursor of the table "authUserSecurityKeys"
"""
input authUserSecurityKeys_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: authUserSecurityKeys_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input authUserSecurityKeys_stream_cursor_value_input {
  counter: bigint
  credentialId: String
  credentialPublicKey: bytea
  id: uuid
  nickname: String
  transports: String
  userId: uuid
}

"""aggregate sum on columns"""
type authUserSecurityKeys_sum_fields {
  counter: bigint
}

"""
order by sum() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_sum_order_by {
  counter: order_by
}

"""
update columns of table "auth.user_security_keys"
"""
enum authUserSecurityKeys_update_column {
  """column name"""
  counter
  """column name"""
  credentialId
  """column name"""
  credentialPublicKey
  """column name"""
  id
  """column name"""
  nickname
  """column name"""
  transports
  """column name"""
  userId
}

input authUserSecurityKeys_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: authUserSecurityKeys_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: authUserSecurityKeys_set_input
  """filter the rows which have to be updated"""
  where: authUserSecurityKeys_bool_exp!
}

"""aggregate var_pop on columns"""
type authUserSecurityKeys_var_pop_fields {
  counter: Float
}

"""
order by var_pop() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_var_pop_order_by {
  counter: order_by
}

"""aggregate var_samp on columns"""
type authUserSecurityKeys_var_samp_fields {
  counter: Float
}

"""
order by var_samp() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_var_samp_order_by {
  counter: order_by
}

"""aggregate variance on columns"""
type authUserSecurityKeys_variance_fields {
  counter: Float
}

"""
order by variance() on columns of table "auth.user_security_keys"
"""
input authUserSecurityKeys_variance_order_by {
  counter: order_by
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "blog_comment_helpful"
"""
type blog_comment_helpful {
  """An object relationship"""
  blog_comment: blog_comments!
  comment_id: uuid!
  created_at: timestamptz!
  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "blog_comment_helpful"
"""
type blog_comment_helpful_aggregate {
  aggregate: blog_comment_helpful_aggregate_fields
  nodes: [blog_comment_helpful!]!
}

input blog_comment_helpful_aggregate_bool_exp {
  count: blog_comment_helpful_aggregate_bool_exp_count
}

input blog_comment_helpful_aggregate_bool_exp_count {
  arguments: [blog_comment_helpful_select_column!]
  distinct: Boolean
  filter: blog_comment_helpful_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "blog_comment_helpful"
"""
type blog_comment_helpful_aggregate_fields {
  count(columns: [blog_comment_helpful_select_column!], distinct: Boolean): Int!
  max: blog_comment_helpful_max_fields
  min: blog_comment_helpful_min_fields
}

"""
order by aggregate values of table "blog_comment_helpful"
"""
input blog_comment_helpful_aggregate_order_by {
  count: order_by
  max: blog_comment_helpful_max_order_by
  min: blog_comment_helpful_min_order_by
}

"""
input type for inserting array relation for remote table "blog_comment_helpful"
"""
input blog_comment_helpful_arr_rel_insert_input {
  data: [blog_comment_helpful_insert_input!]!
  """upsert condition"""
  on_conflict: blog_comment_helpful_on_conflict
}

"""
Boolean expression to filter rows from the table "blog_comment_helpful". All fields are combined with a logical 'AND'.
"""
input blog_comment_helpful_bool_exp {
  _and: [blog_comment_helpful_bool_exp!]
  _not: blog_comment_helpful_bool_exp
  _or: [blog_comment_helpful_bool_exp!]
  blog_comment: blog_comments_bool_exp
  comment_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "blog_comment_helpful"
"""
enum blog_comment_helpful_constraint {
  """
  unique or primary key constraint on columns "user_id", "comment_id"
  """
  blog_comment_helpful_pkey
}

"""
input type for inserting data into table "blog_comment_helpful"
"""
input blog_comment_helpful_insert_input {
  blog_comment: blog_comments_obj_rel_insert_input
  comment_id: uuid
  created_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type blog_comment_helpful_max_fields {
  comment_id: uuid
  created_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "blog_comment_helpful"
"""
input blog_comment_helpful_max_order_by {
  comment_id: order_by
  created_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type blog_comment_helpful_min_fields {
  comment_id: uuid
  created_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "blog_comment_helpful"
"""
input blog_comment_helpful_min_order_by {
  comment_id: order_by
  created_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "blog_comment_helpful"
"""
type blog_comment_helpful_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [blog_comment_helpful!]!
}

"""
on_conflict condition type for table "blog_comment_helpful"
"""
input blog_comment_helpful_on_conflict {
  constraint: blog_comment_helpful_constraint!
  update_columns: [blog_comment_helpful_update_column!]! = []
  where: blog_comment_helpful_bool_exp
}

"""Ordering options when selecting data from "blog_comment_helpful"."""
input blog_comment_helpful_order_by {
  blog_comment: blog_comments_order_by
  comment_id: order_by
  created_at: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: blog_comment_helpful"""
input blog_comment_helpful_pk_columns_input {
  comment_id: uuid!
  user_id: uuid!
}

"""
select columns of table "blog_comment_helpful"
"""
enum blog_comment_helpful_select_column {
  """column name"""
  comment_id
  """column name"""
  created_at
  """column name"""
  user_id
}

"""
input type for updating data in table "blog_comment_helpful"
"""
input blog_comment_helpful_set_input {
  comment_id: uuid
  created_at: timestamptz
  user_id: uuid
}

"""
Streaming cursor of the table "blog_comment_helpful"
"""
input blog_comment_helpful_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: blog_comment_helpful_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input blog_comment_helpful_stream_cursor_value_input {
  comment_id: uuid
  created_at: timestamptz
  user_id: uuid
}

"""
update columns of table "blog_comment_helpful"
"""
enum blog_comment_helpful_update_column {
  """column name"""
  comment_id
  """column name"""
  created_at
  """column name"""
  user_id
}

input blog_comment_helpful_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: blog_comment_helpful_set_input
  """filter the rows which have to be updated"""
  where: blog_comment_helpful_bool_exp!
}

"""
columns and relationships of "blog_comment_reports"
"""
type blog_comment_reports {
  """An object relationship"""
  blog_comment: blog_comments!
  comment_id: uuid!
  created_at: timestamptz!
  details: String
  id: uuid!
  reason: String!
  reporter_id: uuid!
  status: String!
  """An object relationship"""
  user: users!
}

"""
aggregated selection of "blog_comment_reports"
"""
type blog_comment_reports_aggregate {
  aggregate: blog_comment_reports_aggregate_fields
  nodes: [blog_comment_reports!]!
}

input blog_comment_reports_aggregate_bool_exp {
  count: blog_comment_reports_aggregate_bool_exp_count
}

input blog_comment_reports_aggregate_bool_exp_count {
  arguments: [blog_comment_reports_select_column!]
  distinct: Boolean
  filter: blog_comment_reports_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "blog_comment_reports"
"""
type blog_comment_reports_aggregate_fields {
  count(columns: [blog_comment_reports_select_column!], distinct: Boolean): Int!
  max: blog_comment_reports_max_fields
  min: blog_comment_reports_min_fields
}

"""
order by aggregate values of table "blog_comment_reports"
"""
input blog_comment_reports_aggregate_order_by {
  count: order_by
  max: blog_comment_reports_max_order_by
  min: blog_comment_reports_min_order_by
}

"""
input type for inserting array relation for remote table "blog_comment_reports"
"""
input blog_comment_reports_arr_rel_insert_input {
  data: [blog_comment_reports_insert_input!]!
  """upsert condition"""
  on_conflict: blog_comment_reports_on_conflict
}

"""
Boolean expression to filter rows from the table "blog_comment_reports". All fields are combined with a logical 'AND'.
"""
input blog_comment_reports_bool_exp {
  _and: [blog_comment_reports_bool_exp!]
  _not: blog_comment_reports_bool_exp
  _or: [blog_comment_reports_bool_exp!]
  blog_comment: blog_comments_bool_exp
  comment_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  details: String_comparison_exp
  id: uuid_comparison_exp
  reason: String_comparison_exp
  reporter_id: uuid_comparison_exp
  status: String_comparison_exp
  user: users_bool_exp
}

"""
unique or primary key constraints on table "blog_comment_reports"
"""
enum blog_comment_reports_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  blog_comment_reports_pkey
  """
  unique or primary key constraint on columns "comment_id", "reporter_id"
  """
  blog_comment_reports_unique_per_user
}

"""
input type for inserting data into table "blog_comment_reports"
"""
input blog_comment_reports_insert_input {
  blog_comment: blog_comments_obj_rel_insert_input
  comment_id: uuid
  created_at: timestamptz
  details: String
  id: uuid
  reason: String
  reporter_id: uuid
  status: String
  user: users_obj_rel_insert_input
}

"""aggregate max on columns"""
type blog_comment_reports_max_fields {
  comment_id: uuid
  created_at: timestamptz
  details: String
  id: uuid
  reason: String
  reporter_id: uuid
  status: String
}

"""
order by max() on columns of table "blog_comment_reports"
"""
input blog_comment_reports_max_order_by {
  comment_id: order_by
  created_at: order_by
  details: order_by
  id: order_by
  reason: order_by
  reporter_id: order_by
  status: order_by
}

"""aggregate min on columns"""
type blog_comment_reports_min_fields {
  comment_id: uuid
  created_at: timestamptz
  details: String
  id: uuid
  reason: String
  reporter_id: uuid
  status: String
}

"""
order by min() on columns of table "blog_comment_reports"
"""
input blog_comment_reports_min_order_by {
  comment_id: order_by
  created_at: order_by
  details: order_by
  id: order_by
  reason: order_by
  reporter_id: order_by
  status: order_by
}

"""
response of any mutation on the table "blog_comment_reports"
"""
type blog_comment_reports_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [blog_comment_reports!]!
}

"""
on_conflict condition type for table "blog_comment_reports"
"""
input blog_comment_reports_on_conflict {
  constraint: blog_comment_reports_constraint!
  update_columns: [blog_comment_reports_update_column!]! = []
  where: blog_comment_reports_bool_exp
}

"""Ordering options when selecting data from "blog_comment_reports"."""
input blog_comment_reports_order_by {
  blog_comment: blog_comments_order_by
  comment_id: order_by
  created_at: order_by
  details: order_by
  id: order_by
  reason: order_by
  reporter_id: order_by
  status: order_by
  user: users_order_by
}

"""primary key columns input for table: blog_comment_reports"""
input blog_comment_reports_pk_columns_input {
  id: uuid!
}

"""
select columns of table "blog_comment_reports"
"""
enum blog_comment_reports_select_column {
  """column name"""
  comment_id
  """column name"""
  created_at
  """column name"""
  details
  """column name"""
  id
  """column name"""
  reason
  """column name"""
  reporter_id
  """column name"""
  status
}

"""
input type for updating data in table "blog_comment_reports"
"""
input blog_comment_reports_set_input {
  comment_id: uuid
  created_at: timestamptz
  details: String
  id: uuid
  reason: String
  reporter_id: uuid
  status: String
}

"""
Streaming cursor of the table "blog_comment_reports"
"""
input blog_comment_reports_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: blog_comment_reports_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input blog_comment_reports_stream_cursor_value_input {
  comment_id: uuid
  created_at: timestamptz
  details: String
  id: uuid
  reason: String
  reporter_id: uuid
  status: String
}

"""
update columns of table "blog_comment_reports"
"""
enum blog_comment_reports_update_column {
  """column name"""
  comment_id
  """column name"""
  created_at
  """column name"""
  details
  """column name"""
  id
  """column name"""
  reason
  """column name"""
  reporter_id
  """column name"""
  status
}

input blog_comment_reports_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: blog_comment_reports_set_input
  """filter the rows which have to be updated"""
  where: blog_comment_reports_bool_exp!
}

"""
columns and relationships of "blog_comments"
"""
type blog_comments {
  """An array relationship"""
  blog_comment_helpfuls(
    """distinct select on columns"""
    distinct_on: [blog_comment_helpful_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comment_helpful_order_by!]
    """filter the rows returned"""
    where: blog_comment_helpful_bool_exp
  ): [blog_comment_helpful!]!
  """An aggregate relationship"""
  blog_comment_helpfuls_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_comment_helpful_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comment_helpful_order_by!]
    """filter the rows returned"""
    where: blog_comment_helpful_bool_exp
  ): blog_comment_helpful_aggregate!
  blog_slug: String!
  body: String!
  created_at: timestamptz!
  id: uuid!
  is_helpful: Int!
  """An object relationship"""
  parent: blog_comments
  parent_id: uuid
  """An array relationship"""
  replies(
    """distinct select on columns"""
    distinct_on: [blog_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comments_order_by!]
    """filter the rows returned"""
    where: blog_comments_bool_exp
  ): [blog_comments!]!
  """An aggregate relationship"""
  replies_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comments_order_by!]
    """filter the rows returned"""
    where: blog_comments_bool_exp
  ): blog_comments_aggregate!
  updated_at: timestamptz!
  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "blog_comments"
"""
type blog_comments_aggregate {
  aggregate: blog_comments_aggregate_fields
  nodes: [blog_comments!]!
}

input blog_comments_aggregate_bool_exp {
  count: blog_comments_aggregate_bool_exp_count
}

input blog_comments_aggregate_bool_exp_count {
  arguments: [blog_comments_select_column!]
  distinct: Boolean
  filter: blog_comments_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "blog_comments"
"""
type blog_comments_aggregate_fields {
  avg: blog_comments_avg_fields
  count(columns: [blog_comments_select_column!], distinct: Boolean): Int!
  max: blog_comments_max_fields
  min: blog_comments_min_fields
  stddev: blog_comments_stddev_fields
  stddev_pop: blog_comments_stddev_pop_fields
  stddev_samp: blog_comments_stddev_samp_fields
  sum: blog_comments_sum_fields
  var_pop: blog_comments_var_pop_fields
  var_samp: blog_comments_var_samp_fields
  variance: blog_comments_variance_fields
}

"""
order by aggregate values of table "blog_comments"
"""
input blog_comments_aggregate_order_by {
  avg: blog_comments_avg_order_by
  count: order_by
  max: blog_comments_max_order_by
  min: blog_comments_min_order_by
  stddev: blog_comments_stddev_order_by
  stddev_pop: blog_comments_stddev_pop_order_by
  stddev_samp: blog_comments_stddev_samp_order_by
  sum: blog_comments_sum_order_by
  var_pop: blog_comments_var_pop_order_by
  var_samp: blog_comments_var_samp_order_by
  variance: blog_comments_variance_order_by
}

"""
input type for inserting array relation for remote table "blog_comments"
"""
input blog_comments_arr_rel_insert_input {
  data: [blog_comments_insert_input!]!
  """upsert condition"""
  on_conflict: blog_comments_on_conflict
}

"""aggregate avg on columns"""
type blog_comments_avg_fields {
  is_helpful: Float
}

"""
order by avg() on columns of table "blog_comments"
"""
input blog_comments_avg_order_by {
  is_helpful: order_by
}

"""
Boolean expression to filter rows from the table "blog_comments". All fields are combined with a logical 'AND'.
"""
input blog_comments_bool_exp {
  _and: [blog_comments_bool_exp!]
  _not: blog_comments_bool_exp
  _or: [blog_comments_bool_exp!]
  blog_comment_helpfuls: blog_comment_helpful_bool_exp
  blog_comment_helpfuls_aggregate: blog_comment_helpful_aggregate_bool_exp
  blog_slug: String_comparison_exp
  body: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  is_helpful: Int_comparison_exp
  parent: blog_comments_bool_exp
  parent_id: uuid_comparison_exp
  replies: blog_comments_bool_exp
  replies_aggregate: blog_comments_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "blog_comments"
"""
enum blog_comments_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  blog_comments_pkey
}

"""
input type for incrementing numeric columns in table "blog_comments"
"""
input blog_comments_inc_input {
  is_helpful: Int
}

"""
input type for inserting data into table "blog_comments"
"""
input blog_comments_insert_input {
  blog_comment_helpfuls: blog_comment_helpful_arr_rel_insert_input
  blog_slug: String
  body: String
  created_at: timestamptz
  id: uuid
  is_helpful: Int
  parent: blog_comments_obj_rel_insert_input
  parent_id: uuid
  replies: blog_comments_arr_rel_insert_input
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type blog_comments_max_fields {
  blog_slug: String
  body: String
  created_at: timestamptz
  id: uuid
  is_helpful: Int
  parent_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "blog_comments"
"""
input blog_comments_max_order_by {
  blog_slug: order_by
  body: order_by
  created_at: order_by
  id: order_by
  is_helpful: order_by
  parent_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type blog_comments_min_fields {
  blog_slug: String
  body: String
  created_at: timestamptz
  id: uuid
  is_helpful: Int
  parent_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "blog_comments"
"""
input blog_comments_min_order_by {
  blog_slug: order_by
  body: order_by
  created_at: order_by
  id: order_by
  is_helpful: order_by
  parent_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "blog_comments"
"""
type blog_comments_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [blog_comments!]!
}

"""
input type for inserting object relation for remote table "blog_comments"
"""
input blog_comments_obj_rel_insert_input {
  data: blog_comments_insert_input!
  """upsert condition"""
  on_conflict: blog_comments_on_conflict
}

"""
on_conflict condition type for table "blog_comments"
"""
input blog_comments_on_conflict {
  constraint: blog_comments_constraint!
  update_columns: [blog_comments_update_column!]! = []
  where: blog_comments_bool_exp
}

"""Ordering options when selecting data from "blog_comments"."""
input blog_comments_order_by {
  blog_comment_helpfuls_aggregate: blog_comment_helpful_aggregate_order_by
  blog_slug: order_by
  body: order_by
  created_at: order_by
  id: order_by
  is_helpful: order_by
  parent: blog_comments_order_by
  parent_id: order_by
  replies_aggregate: blog_comments_aggregate_order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: blog_comments"""
input blog_comments_pk_columns_input {
  id: uuid!
}

"""
select columns of table "blog_comments"
"""
enum blog_comments_select_column {
  """column name"""
  blog_slug
  """column name"""
  body
  """column name"""
  created_at
  """column name"""
  id
  """column name"""
  is_helpful
  """column name"""
  parent_id
  """column name"""
  updated_at
  """column name"""
  user_id
}

"""
input type for updating data in table "blog_comments"
"""
input blog_comments_set_input {
  blog_slug: String
  body: String
  created_at: timestamptz
  id: uuid
  is_helpful: Int
  parent_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate stddev on columns"""
type blog_comments_stddev_fields {
  is_helpful: Float
}

"""
order by stddev() on columns of table "blog_comments"
"""
input blog_comments_stddev_order_by {
  is_helpful: order_by
}

"""aggregate stddev_pop on columns"""
type blog_comments_stddev_pop_fields {
  is_helpful: Float
}

"""
order by stddev_pop() on columns of table "blog_comments"
"""
input blog_comments_stddev_pop_order_by {
  is_helpful: order_by
}

"""aggregate stddev_samp on columns"""
type blog_comments_stddev_samp_fields {
  is_helpful: Float
}

"""
order by stddev_samp() on columns of table "blog_comments"
"""
input blog_comments_stddev_samp_order_by {
  is_helpful: order_by
}

"""
Streaming cursor of the table "blog_comments"
"""
input blog_comments_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: blog_comments_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input blog_comments_stream_cursor_value_input {
  blog_slug: String
  body: String
  created_at: timestamptz
  id: uuid
  is_helpful: Int
  parent_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate sum on columns"""
type blog_comments_sum_fields {
  is_helpful: Int
}

"""
order by sum() on columns of table "blog_comments"
"""
input blog_comments_sum_order_by {
  is_helpful: order_by
}

"""
update columns of table "blog_comments"
"""
enum blog_comments_update_column {
  """column name"""
  blog_slug
  """column name"""
  body
  """column name"""
  created_at
  """column name"""
  id
  """column name"""
  is_helpful
  """column name"""
  parent_id
  """column name"""
  updated_at
  """column name"""
  user_id
}

input blog_comments_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: blog_comments_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: blog_comments_set_input
  """filter the rows which have to be updated"""
  where: blog_comments_bool_exp!
}

"""aggregate var_pop on columns"""
type blog_comments_var_pop_fields {
  is_helpful: Float
}

"""
order by var_pop() on columns of table "blog_comments"
"""
input blog_comments_var_pop_order_by {
  is_helpful: order_by
}

"""aggregate var_samp on columns"""
type blog_comments_var_samp_fields {
  is_helpful: Float
}

"""
order by var_samp() on columns of table "blog_comments"
"""
input blog_comments_var_samp_order_by {
  is_helpful: order_by
}

"""aggregate variance on columns"""
type blog_comments_variance_fields {
  is_helpful: Float
}

"""
order by variance() on columns of table "blog_comments"
"""
input blog_comments_variance_order_by {
  is_helpful: order_by
}

"""
columns and relationships of "storage.buckets"
"""
type buckets {
  cacheControl: String
  createdAt: timestamptz!
  downloadExpiration: Int!
  """An array relationship"""
  files(
    """distinct select on columns"""
    distinct_on: [files_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [files_order_by!]
    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!
  """An aggregate relationship"""
  files_aggregate(
    """distinct select on columns"""
    distinct_on: [files_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [files_order_by!]
    """filter the rows returned"""
    where: files_bool_exp
  ): files_aggregate!
  id: String!
  maxUploadFileSize: Int!
  minUploadFileSize: Int!
  presignedUrlsEnabled: Boolean!
  updatedAt: timestamptz!
}

"""
aggregated selection of "storage.buckets"
"""
type buckets_aggregate {
  aggregate: buckets_aggregate_fields
  nodes: [buckets!]!
}

"""
aggregate fields of "storage.buckets"
"""
type buckets_aggregate_fields {
  avg: buckets_avg_fields
  count(columns: [buckets_select_column!], distinct: Boolean): Int!
  max: buckets_max_fields
  min: buckets_min_fields
  stddev: buckets_stddev_fields
  stddev_pop: buckets_stddev_pop_fields
  stddev_samp: buckets_stddev_samp_fields
  sum: buckets_sum_fields
  var_pop: buckets_var_pop_fields
  var_samp: buckets_var_samp_fields
  variance: buckets_variance_fields
}

"""aggregate avg on columns"""
type buckets_avg_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

"""
Boolean expression to filter rows from the table "storage.buckets". All fields are combined with a logical 'AND'.
"""
input buckets_bool_exp {
  _and: [buckets_bool_exp!]
  _not: buckets_bool_exp
  _or: [buckets_bool_exp!]
  cacheControl: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  downloadExpiration: Int_comparison_exp
  files: files_bool_exp
  files_aggregate: files_aggregate_bool_exp
  id: String_comparison_exp
  maxUploadFileSize: Int_comparison_exp
  minUploadFileSize: Int_comparison_exp
  presignedUrlsEnabled: Boolean_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "storage.buckets"
"""
enum buckets_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  buckets_pkey
}

"""
input type for incrementing numeric columns in table "storage.buckets"
"""
input buckets_inc_input {
  downloadExpiration: Int
  maxUploadFileSize: Int
  minUploadFileSize: Int
}

"""
input type for inserting data into table "storage.buckets"
"""
input buckets_insert_input {
  cacheControl: String
  createdAt: timestamptz
  downloadExpiration: Int
  files: files_arr_rel_insert_input
  id: String
  maxUploadFileSize: Int
  minUploadFileSize: Int
  presignedUrlsEnabled: Boolean
  updatedAt: timestamptz
}

"""aggregate max on columns"""
type buckets_max_fields {
  cacheControl: String
  createdAt: timestamptz
  downloadExpiration: Int
  id: String
  maxUploadFileSize: Int
  minUploadFileSize: Int
  updatedAt: timestamptz
}

"""aggregate min on columns"""
type buckets_min_fields {
  cacheControl: String
  createdAt: timestamptz
  downloadExpiration: Int
  id: String
  maxUploadFileSize: Int
  minUploadFileSize: Int
  updatedAt: timestamptz
}

"""
response of any mutation on the table "storage.buckets"
"""
type buckets_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [buckets!]!
}

"""
input type for inserting object relation for remote table "storage.buckets"
"""
input buckets_obj_rel_insert_input {
  data: buckets_insert_input!
  """upsert condition"""
  on_conflict: buckets_on_conflict
}

"""
on_conflict condition type for table "storage.buckets"
"""
input buckets_on_conflict {
  constraint: buckets_constraint!
  update_columns: [buckets_update_column!]! = []
  where: buckets_bool_exp
}

"""Ordering options when selecting data from "storage.buckets"."""
input buckets_order_by {
  cacheControl: order_by
  createdAt: order_by
  downloadExpiration: order_by
  files_aggregate: files_aggregate_order_by
  id: order_by
  maxUploadFileSize: order_by
  minUploadFileSize: order_by
  presignedUrlsEnabled: order_by
  updatedAt: order_by
}

"""primary key columns input for table: storage.buckets"""
input buckets_pk_columns_input {
  id: String!
}

"""
select columns of table "storage.buckets"
"""
enum buckets_select_column {
  """column name"""
  cacheControl
  """column name"""
  createdAt
  """column name"""
  downloadExpiration
  """column name"""
  id
  """column name"""
  maxUploadFileSize
  """column name"""
  minUploadFileSize
  """column name"""
  presignedUrlsEnabled
  """column name"""
  updatedAt
}

"""
input type for updating data in table "storage.buckets"
"""
input buckets_set_input {
  cacheControl: String
  createdAt: timestamptz
  downloadExpiration: Int
  id: String
  maxUploadFileSize: Int
  minUploadFileSize: Int
  presignedUrlsEnabled: Boolean
  updatedAt: timestamptz
}

"""aggregate stddev on columns"""
type buckets_stddev_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

"""aggregate stddev_pop on columns"""
type buckets_stddev_pop_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

"""aggregate stddev_samp on columns"""
type buckets_stddev_samp_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

"""
Streaming cursor of the table "buckets"
"""
input buckets_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: buckets_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input buckets_stream_cursor_value_input {
  cacheControl: String
  createdAt: timestamptz
  downloadExpiration: Int
  id: String
  maxUploadFileSize: Int
  minUploadFileSize: Int
  presignedUrlsEnabled: Boolean
  updatedAt: timestamptz
}

"""aggregate sum on columns"""
type buckets_sum_fields {
  downloadExpiration: Int
  maxUploadFileSize: Int
  minUploadFileSize: Int
}

"""
update columns of table "storage.buckets"
"""
enum buckets_update_column {
  """column name"""
  cacheControl
  """column name"""
  createdAt
  """column name"""
  downloadExpiration
  """column name"""
  id
  """column name"""
  maxUploadFileSize
  """column name"""
  minUploadFileSize
  """column name"""
  presignedUrlsEnabled
  """column name"""
  updatedAt
}

input buckets_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: buckets_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: buckets_set_input
  """filter the rows which have to be updated"""
  where: buckets_bool_exp!
}

"""aggregate var_pop on columns"""
type buckets_var_pop_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

"""aggregate var_samp on columns"""
type buckets_var_samp_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

"""aggregate variance on columns"""
type buckets_variance_fields {
  downloadExpiration: Float
  maxUploadFileSize: Float
  minUploadFileSize: Float
}

scalar bytea

"""
Boolean expression to compare columns of type "bytea". All fields are combined with logical 'AND'.
"""
input bytea_comparison_exp {
  _eq: bytea
  _gt: bytea
  _gte: bytea
  _in: [bytea!]
  _is_null: Boolean
  _lt: bytea
  _lte: bytea
  _neq: bytea
  _nin: [bytea!]
}

scalar citext

"""
Boolean expression to compare columns of type "citext". All fields are combined with logical 'AND'.
"""
input citext_comparison_exp {
  _eq: citext
  _gt: citext
  _gte: citext
  """does the column match the given case-insensitive pattern"""
  _ilike: citext
  _in: [citext!]
  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: citext
  _is_null: Boolean
  """does the column match the given pattern"""
  _like: citext
  _lt: citext
  _lte: citext
  _neq: citext
  """does the column NOT match the given case-insensitive pattern"""
  _nilike: citext
  _nin: [citext!]
  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: citext
  """does the column NOT match the given pattern"""
  _nlike: citext
  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: citext
  """does the column NOT match the given SQL regular expression"""
  _nsimilar: citext
  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: citext
  """does the column match the given SQL regular expression"""
  _similar: citext
}

"""
columns and relationships of "comment_likes"
"""
type comment_likes {
  comment_id: uuid!
  created_at: timestamptz!
  """An object relationship"""
  post_comment: post_comments!
  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "comment_likes"
"""
type comment_likes_aggregate {
  aggregate: comment_likes_aggregate_fields
  nodes: [comment_likes!]!
}

input comment_likes_aggregate_bool_exp {
  count: comment_likes_aggregate_bool_exp_count
}

input comment_likes_aggregate_bool_exp_count {
  arguments: [comment_likes_select_column!]
  distinct: Boolean
  filter: comment_likes_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "comment_likes"
"""
type comment_likes_aggregate_fields {
  count(columns: [comment_likes_select_column!], distinct: Boolean): Int!
  max: comment_likes_max_fields
  min: comment_likes_min_fields
}

"""
order by aggregate values of table "comment_likes"
"""
input comment_likes_aggregate_order_by {
  count: order_by
  max: comment_likes_max_order_by
  min: comment_likes_min_order_by
}

"""
input type for inserting array relation for remote table "comment_likes"
"""
input comment_likes_arr_rel_insert_input {
  data: [comment_likes_insert_input!]!
  """upsert condition"""
  on_conflict: comment_likes_on_conflict
}

"""
Boolean expression to filter rows from the table "comment_likes". All fields are combined with a logical 'AND'.
"""
input comment_likes_bool_exp {
  _and: [comment_likes_bool_exp!]
  _not: comment_likes_bool_exp
  _or: [comment_likes_bool_exp!]
  comment_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  post_comment: post_comments_bool_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "comment_likes"
"""
enum comment_likes_constraint {
  """
  unique or primary key constraint on columns "user_id", "comment_id"
  """
  comment_likes_pkey
}

"""
input type for inserting data into table "comment_likes"
"""
input comment_likes_insert_input {
  comment_id: uuid
  created_at: timestamptz
  post_comment: post_comments_obj_rel_insert_input
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type comment_likes_max_fields {
  comment_id: uuid
  created_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "comment_likes"
"""
input comment_likes_max_order_by {
  comment_id: order_by
  created_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type comment_likes_min_fields {
  comment_id: uuid
  created_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "comment_likes"
"""
input comment_likes_min_order_by {
  comment_id: order_by
  created_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "comment_likes"
"""
type comment_likes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [comment_likes!]!
}

"""
on_conflict condition type for table "comment_likes"
"""
input comment_likes_on_conflict {
  constraint: comment_likes_constraint!
  update_columns: [comment_likes_update_column!]! = []
  where: comment_likes_bool_exp
}

"""Ordering options when selecting data from "comment_likes"."""
input comment_likes_order_by {
  comment_id: order_by
  created_at: order_by
  post_comment: post_comments_order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: comment_likes"""
input comment_likes_pk_columns_input {
  comment_id: uuid!
  user_id: uuid!
}

"""
select columns of table "comment_likes"
"""
enum comment_likes_select_column {
  """column name"""
  comment_id
  """column name"""
  created_at
  """column name"""
  user_id
}

"""
input type for updating data in table "comment_likes"
"""
input comment_likes_set_input {
  comment_id: uuid
  created_at: timestamptz
  user_id: uuid
}

"""
Streaming cursor of the table "comment_likes"
"""
input comment_likes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: comment_likes_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input comment_likes_stream_cursor_value_input {
  comment_id: uuid
  created_at: timestamptz
  user_id: uuid
}

"""
update columns of table "comment_likes"
"""
enum comment_likes_update_column {
  """column name"""
  comment_id
  """column name"""
  created_at
  """column name"""
  user_id
}

input comment_likes_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: comment_likes_set_input
  """filter the rows which have to be updated"""
  where: comment_likes_bool_exp!
}

"""
columns and relationships of "contribution_bookmarks"
"""
type contribution_bookmarks {
  """An object relationship"""
  contribution: contributions!
  contribution_id: uuid!
  created_at: timestamptz!
  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "contribution_bookmarks"
"""
type contribution_bookmarks_aggregate {
  aggregate: contribution_bookmarks_aggregate_fields
  nodes: [contribution_bookmarks!]!
}

input contribution_bookmarks_aggregate_bool_exp {
  count: contribution_bookmarks_aggregate_bool_exp_count
}

input contribution_bookmarks_aggregate_bool_exp_count {
  arguments: [contribution_bookmarks_select_column!]
  distinct: Boolean
  filter: contribution_bookmarks_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "contribution_bookmarks"
"""
type contribution_bookmarks_aggregate_fields {
  count(columns: [contribution_bookmarks_select_column!], distinct: Boolean): Int!
  max: contribution_bookmarks_max_fields
  min: contribution_bookmarks_min_fields
}

"""
order by aggregate values of table "contribution_bookmarks"
"""
input contribution_bookmarks_aggregate_order_by {
  count: order_by
  max: contribution_bookmarks_max_order_by
  min: contribution_bookmarks_min_order_by
}

"""
input type for inserting array relation for remote table "contribution_bookmarks"
"""
input contribution_bookmarks_arr_rel_insert_input {
  data: [contribution_bookmarks_insert_input!]!
  """upsert condition"""
  on_conflict: contribution_bookmarks_on_conflict
}

"""
Boolean expression to filter rows from the table "contribution_bookmarks". All fields are combined with a logical 'AND'.
"""
input contribution_bookmarks_bool_exp {
  _and: [contribution_bookmarks_bool_exp!]
  _not: contribution_bookmarks_bool_exp
  _or: [contribution_bookmarks_bool_exp!]
  contribution: contributions_bool_exp
  contribution_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "contribution_bookmarks"
"""
enum contribution_bookmarks_constraint {
  """
  unique or primary key constraint on columns "user_id", "contribution_id"
  """
  contribution_bookmarks_pkey
}

"""
input type for inserting data into table "contribution_bookmarks"
"""
input contribution_bookmarks_insert_input {
  contribution: contributions_obj_rel_insert_input
  contribution_id: uuid
  created_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type contribution_bookmarks_max_fields {
  contribution_id: uuid
  created_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "contribution_bookmarks"
"""
input contribution_bookmarks_max_order_by {
  contribution_id: order_by
  created_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type contribution_bookmarks_min_fields {
  contribution_id: uuid
  created_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "contribution_bookmarks"
"""
input contribution_bookmarks_min_order_by {
  contribution_id: order_by
  created_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "contribution_bookmarks"
"""
type contribution_bookmarks_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [contribution_bookmarks!]!
}

"""
on_conflict condition type for table "contribution_bookmarks"
"""
input contribution_bookmarks_on_conflict {
  constraint: contribution_bookmarks_constraint!
  update_columns: [contribution_bookmarks_update_column!]! = []
  where: contribution_bookmarks_bool_exp
}

"""Ordering options when selecting data from "contribution_bookmarks"."""
input contribution_bookmarks_order_by {
  contribution: contributions_order_by
  contribution_id: order_by
  created_at: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: contribution_bookmarks"""
input contribution_bookmarks_pk_columns_input {
  contribution_id: uuid!
  user_id: uuid!
}

"""
select columns of table "contribution_bookmarks"
"""
enum contribution_bookmarks_select_column {
  """column name"""
  contribution_id
  """column name"""
  created_at
  """column name"""
  user_id
}

"""
input type for updating data in table "contribution_bookmarks"
"""
input contribution_bookmarks_set_input {
  contribution_id: uuid
  created_at: timestamptz
  user_id: uuid
}

"""
Streaming cursor of the table "contribution_bookmarks"
"""
input contribution_bookmarks_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: contribution_bookmarks_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input contribution_bookmarks_stream_cursor_value_input {
  contribution_id: uuid
  created_at: timestamptz
  user_id: uuid
}

"""
update columns of table "contribution_bookmarks"
"""
enum contribution_bookmarks_update_column {
  """column name"""
  contribution_id
  """column name"""
  created_at
  """column name"""
  user_id
}

input contribution_bookmarks_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: contribution_bookmarks_set_input
  """filter the rows which have to be updated"""
  where: contribution_bookmarks_bool_exp!
}

"""
columns and relationships of "contribution_comments"
"""
type contribution_comments {
  body: String!
  """An object relationship"""
  contribution: contributions!
  contribution_id: uuid!
  created_at: timestamptz!
  id: uuid!
  is_helpful: Int!
  updated_at: timestamptz!
  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "contribution_comments"
"""
type contribution_comments_aggregate {
  aggregate: contribution_comments_aggregate_fields
  nodes: [contribution_comments!]!
}

input contribution_comments_aggregate_bool_exp {
  count: contribution_comments_aggregate_bool_exp_count
}

input contribution_comments_aggregate_bool_exp_count {
  arguments: [contribution_comments_select_column!]
  distinct: Boolean
  filter: contribution_comments_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "contribution_comments"
"""
type contribution_comments_aggregate_fields {
  avg: contribution_comments_avg_fields
  count(columns: [contribution_comments_select_column!], distinct: Boolean): Int!
  max: contribution_comments_max_fields
  min: contribution_comments_min_fields
  stddev: contribution_comments_stddev_fields
  stddev_pop: contribution_comments_stddev_pop_fields
  stddev_samp: contribution_comments_stddev_samp_fields
  sum: contribution_comments_sum_fields
  var_pop: contribution_comments_var_pop_fields
  var_samp: contribution_comments_var_samp_fields
  variance: contribution_comments_variance_fields
}

"""
order by aggregate values of table "contribution_comments"
"""
input contribution_comments_aggregate_order_by {
  avg: contribution_comments_avg_order_by
  count: order_by
  max: contribution_comments_max_order_by
  min: contribution_comments_min_order_by
  stddev: contribution_comments_stddev_order_by
  stddev_pop: contribution_comments_stddev_pop_order_by
  stddev_samp: contribution_comments_stddev_samp_order_by
  sum: contribution_comments_sum_order_by
  var_pop: contribution_comments_var_pop_order_by
  var_samp: contribution_comments_var_samp_order_by
  variance: contribution_comments_variance_order_by
}

"""
input type for inserting array relation for remote table "contribution_comments"
"""
input contribution_comments_arr_rel_insert_input {
  data: [contribution_comments_insert_input!]!
  """upsert condition"""
  on_conflict: contribution_comments_on_conflict
}

"""aggregate avg on columns"""
type contribution_comments_avg_fields {
  is_helpful: Float
}

"""
order by avg() on columns of table "contribution_comments"
"""
input contribution_comments_avg_order_by {
  is_helpful: order_by
}

"""
Boolean expression to filter rows from the table "contribution_comments". All fields are combined with a logical 'AND'.
"""
input contribution_comments_bool_exp {
  _and: [contribution_comments_bool_exp!]
  _not: contribution_comments_bool_exp
  _or: [contribution_comments_bool_exp!]
  body: String_comparison_exp
  contribution: contributions_bool_exp
  contribution_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  is_helpful: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "contribution_comments"
"""
enum contribution_comments_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  contribution_comments_pkey
}

"""
input type for incrementing numeric columns in table "contribution_comments"
"""
input contribution_comments_inc_input {
  is_helpful: Int
}

"""
input type for inserting data into table "contribution_comments"
"""
input contribution_comments_insert_input {
  body: String
  contribution: contributions_obj_rel_insert_input
  contribution_id: uuid
  created_at: timestamptz
  id: uuid
  is_helpful: Int
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type contribution_comments_max_fields {
  body: String
  contribution_id: uuid
  created_at: timestamptz
  id: uuid
  is_helpful: Int
  updated_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "contribution_comments"
"""
input contribution_comments_max_order_by {
  body: order_by
  contribution_id: order_by
  created_at: order_by
  id: order_by
  is_helpful: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type contribution_comments_min_fields {
  body: String
  contribution_id: uuid
  created_at: timestamptz
  id: uuid
  is_helpful: Int
  updated_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "contribution_comments"
"""
input contribution_comments_min_order_by {
  body: order_by
  contribution_id: order_by
  created_at: order_by
  id: order_by
  is_helpful: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "contribution_comments"
"""
type contribution_comments_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [contribution_comments!]!
}

"""
on_conflict condition type for table "contribution_comments"
"""
input contribution_comments_on_conflict {
  constraint: contribution_comments_constraint!
  update_columns: [contribution_comments_update_column!]! = []
  where: contribution_comments_bool_exp
}

"""Ordering options when selecting data from "contribution_comments"."""
input contribution_comments_order_by {
  body: order_by
  contribution: contributions_order_by
  contribution_id: order_by
  created_at: order_by
  id: order_by
  is_helpful: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: contribution_comments"""
input contribution_comments_pk_columns_input {
  id: uuid!
}

"""
select columns of table "contribution_comments"
"""
enum contribution_comments_select_column {
  """column name"""
  body
  """column name"""
  contribution_id
  """column name"""
  created_at
  """column name"""
  id
  """column name"""
  is_helpful
  """column name"""
  updated_at
  """column name"""
  user_id
}

"""
input type for updating data in table "contribution_comments"
"""
input contribution_comments_set_input {
  body: String
  contribution_id: uuid
  created_at: timestamptz
  id: uuid
  is_helpful: Int
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate stddev on columns"""
type contribution_comments_stddev_fields {
  is_helpful: Float
}

"""
order by stddev() on columns of table "contribution_comments"
"""
input contribution_comments_stddev_order_by {
  is_helpful: order_by
}

"""aggregate stddev_pop on columns"""
type contribution_comments_stddev_pop_fields {
  is_helpful: Float
}

"""
order by stddev_pop() on columns of table "contribution_comments"
"""
input contribution_comments_stddev_pop_order_by {
  is_helpful: order_by
}

"""aggregate stddev_samp on columns"""
type contribution_comments_stddev_samp_fields {
  is_helpful: Float
}

"""
order by stddev_samp() on columns of table "contribution_comments"
"""
input contribution_comments_stddev_samp_order_by {
  is_helpful: order_by
}

"""
Streaming cursor of the table "contribution_comments"
"""
input contribution_comments_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: contribution_comments_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input contribution_comments_stream_cursor_value_input {
  body: String
  contribution_id: uuid
  created_at: timestamptz
  id: uuid
  is_helpful: Int
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate sum on columns"""
type contribution_comments_sum_fields {
  is_helpful: Int
}

"""
order by sum() on columns of table "contribution_comments"
"""
input contribution_comments_sum_order_by {
  is_helpful: order_by
}

"""
update columns of table "contribution_comments"
"""
enum contribution_comments_update_column {
  """column name"""
  body
  """column name"""
  contribution_id
  """column name"""
  created_at
  """column name"""
  id
  """column name"""
  is_helpful
  """column name"""
  updated_at
  """column name"""
  user_id
}

input contribution_comments_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: contribution_comments_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: contribution_comments_set_input
  """filter the rows which have to be updated"""
  where: contribution_comments_bool_exp!
}

"""aggregate var_pop on columns"""
type contribution_comments_var_pop_fields {
  is_helpful: Float
}

"""
order by var_pop() on columns of table "contribution_comments"
"""
input contribution_comments_var_pop_order_by {
  is_helpful: order_by
}

"""aggregate var_samp on columns"""
type contribution_comments_var_samp_fields {
  is_helpful: Float
}

"""
order by var_samp() on columns of table "contribution_comments"
"""
input contribution_comments_var_samp_order_by {
  is_helpful: order_by
}

"""aggregate variance on columns"""
type contribution_comments_variance_fields {
  is_helpful: Float
}

"""
order by variance() on columns of table "contribution_comments"
"""
input contribution_comments_variance_order_by {
  is_helpful: order_by
}

"""
columns and relationships of "contribution_likes"
"""
type contribution_likes {
  """An object relationship"""
  contribution: contributions!
  contribution_id: uuid!
  created_at: timestamptz!
  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "contribution_likes"
"""
type contribution_likes_aggregate {
  aggregate: contribution_likes_aggregate_fields
  nodes: [contribution_likes!]!
}

input contribution_likes_aggregate_bool_exp {
  count: contribution_likes_aggregate_bool_exp_count
}

input contribution_likes_aggregate_bool_exp_count {
  arguments: [contribution_likes_select_column!]
  distinct: Boolean
  filter: contribution_likes_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "contribution_likes"
"""
type contribution_likes_aggregate_fields {
  count(columns: [contribution_likes_select_column!], distinct: Boolean): Int!
  max: contribution_likes_max_fields
  min: contribution_likes_min_fields
}

"""
order by aggregate values of table "contribution_likes"
"""
input contribution_likes_aggregate_order_by {
  count: order_by
  max: contribution_likes_max_order_by
  min: contribution_likes_min_order_by
}

"""
input type for inserting array relation for remote table "contribution_likes"
"""
input contribution_likes_arr_rel_insert_input {
  data: [contribution_likes_insert_input!]!
  """upsert condition"""
  on_conflict: contribution_likes_on_conflict
}

"""
Boolean expression to filter rows from the table "contribution_likes". All fields are combined with a logical 'AND'.
"""
input contribution_likes_bool_exp {
  _and: [contribution_likes_bool_exp!]
  _not: contribution_likes_bool_exp
  _or: [contribution_likes_bool_exp!]
  contribution: contributions_bool_exp
  contribution_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "contribution_likes"
"""
enum contribution_likes_constraint {
  """
  unique or primary key constraint on columns "user_id", "contribution_id"
  """
  contribution_likes_pkey
}

"""
input type for inserting data into table "contribution_likes"
"""
input contribution_likes_insert_input {
  contribution: contributions_obj_rel_insert_input
  contribution_id: uuid
  created_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type contribution_likes_max_fields {
  contribution_id: uuid
  created_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "contribution_likes"
"""
input contribution_likes_max_order_by {
  contribution_id: order_by
  created_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type contribution_likes_min_fields {
  contribution_id: uuid
  created_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "contribution_likes"
"""
input contribution_likes_min_order_by {
  contribution_id: order_by
  created_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "contribution_likes"
"""
type contribution_likes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [contribution_likes!]!
}

"""
on_conflict condition type for table "contribution_likes"
"""
input contribution_likes_on_conflict {
  constraint: contribution_likes_constraint!
  update_columns: [contribution_likes_update_column!]! = []
  where: contribution_likes_bool_exp
}

"""Ordering options when selecting data from "contribution_likes"."""
input contribution_likes_order_by {
  contribution: contributions_order_by
  contribution_id: order_by
  created_at: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: contribution_likes"""
input contribution_likes_pk_columns_input {
  contribution_id: uuid!
  user_id: uuid!
}

"""
select columns of table "contribution_likes"
"""
enum contribution_likes_select_column {
  """column name"""
  contribution_id
  """column name"""
  created_at
  """column name"""
  user_id
}

"""
input type for updating data in table "contribution_likes"
"""
input contribution_likes_set_input {
  contribution_id: uuid
  created_at: timestamptz
  user_id: uuid
}

"""
Streaming cursor of the table "contribution_likes"
"""
input contribution_likes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: contribution_likes_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input contribution_likes_stream_cursor_value_input {
  contribution_id: uuid
  created_at: timestamptz
  user_id: uuid
}

"""
update columns of table "contribution_likes"
"""
enum contribution_likes_update_column {
  """column name"""
  contribution_id
  """column name"""
  created_at
  """column name"""
  user_id
}

input contribution_likes_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: contribution_likes_set_input
  """filter the rows which have to be updated"""
  where: contribution_likes_bool_exp!
}

"""
columns and relationships of "contribution_reactions"
"""
type contribution_reactions {
  """An object relationship"""
  contribution: contributions!
  contribution_id: uuid!
  created_at: timestamptz!
  id: uuid!
  type: reaction_types_enum!
  updated_at: timestamptz!
  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "contribution_reactions"
"""
type contribution_reactions_aggregate {
  aggregate: contribution_reactions_aggregate_fields
  nodes: [contribution_reactions!]!
}

input contribution_reactions_aggregate_bool_exp {
  count: contribution_reactions_aggregate_bool_exp_count
}

input contribution_reactions_aggregate_bool_exp_count {
  arguments: [contribution_reactions_select_column!]
  distinct: Boolean
  filter: contribution_reactions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "contribution_reactions"
"""
type contribution_reactions_aggregate_fields {
  count(columns: [contribution_reactions_select_column!], distinct: Boolean): Int!
  max: contribution_reactions_max_fields
  min: contribution_reactions_min_fields
}

"""
order by aggregate values of table "contribution_reactions"
"""
input contribution_reactions_aggregate_order_by {
  count: order_by
  max: contribution_reactions_max_order_by
  min: contribution_reactions_min_order_by
}

"""
input type for inserting array relation for remote table "contribution_reactions"
"""
input contribution_reactions_arr_rel_insert_input {
  data: [contribution_reactions_insert_input!]!
  """upsert condition"""
  on_conflict: contribution_reactions_on_conflict
}

"""
Boolean expression to filter rows from the table "contribution_reactions". All fields are combined with a logical 'AND'.
"""
input contribution_reactions_bool_exp {
  _and: [contribution_reactions_bool_exp!]
  _not: contribution_reactions_bool_exp
  _or: [contribution_reactions_bool_exp!]
  contribution: contributions_bool_exp
  contribution_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  type: reaction_types_enum_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "contribution_reactions"
"""
enum contribution_reactions_constraint {
  """
  unique or primary key constraint on columns "user_id", "type", "contribution_id"
  """
  contribution_reactions_pkey
}

"""
input type for inserting data into table "contribution_reactions"
"""
input contribution_reactions_insert_input {
  contribution: contributions_obj_rel_insert_input
  contribution_id: uuid
  created_at: timestamptz
  id: uuid
  type: reaction_types_enum
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type contribution_reactions_max_fields {
  contribution_id: uuid
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "contribution_reactions"
"""
input contribution_reactions_max_order_by {
  contribution_id: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type contribution_reactions_min_fields {
  contribution_id: uuid
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "contribution_reactions"
"""
input contribution_reactions_min_order_by {
  contribution_id: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "contribution_reactions"
"""
type contribution_reactions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [contribution_reactions!]!
}

"""
on_conflict condition type for table "contribution_reactions"
"""
input contribution_reactions_on_conflict {
  constraint: contribution_reactions_constraint!
  update_columns: [contribution_reactions_update_column!]! = []
  where: contribution_reactions_bool_exp
}

"""Ordering options when selecting data from "contribution_reactions"."""
input contribution_reactions_order_by {
  contribution: contributions_order_by
  contribution_id: order_by
  created_at: order_by
  id: order_by
  type: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: contribution_reactions"""
input contribution_reactions_pk_columns_input {
  contribution_id: uuid!
  type: reaction_types_enum!
  user_id: uuid!
}

"""
select columns of table "contribution_reactions"
"""
enum contribution_reactions_select_column {
  """column name"""
  contribution_id
  """column name"""
  created_at
  """column name"""
  id
  """column name"""
  type
  """column name"""
  updated_at
  """column name"""
  user_id
}

"""
input type for updating data in table "contribution_reactions"
"""
input contribution_reactions_set_input {
  contribution_id: uuid
  created_at: timestamptz
  id: uuid
  type: reaction_types_enum
  updated_at: timestamptz
  user_id: uuid
}

"""
Streaming cursor of the table "contribution_reactions"
"""
input contribution_reactions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: contribution_reactions_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input contribution_reactions_stream_cursor_value_input {
  contribution_id: uuid
  created_at: timestamptz
  id: uuid
  type: reaction_types_enum
  updated_at: timestamptz
  user_id: uuid
}

"""
update columns of table "contribution_reactions"
"""
enum contribution_reactions_update_column {
  """column name"""
  contribution_id
  """column name"""
  created_at
  """column name"""
  id
  """column name"""
  type
  """column name"""
  updated_at
  """column name"""
  user_id
}

input contribution_reactions_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: contribution_reactions_set_input
  """filter the rows which have to be updated"""
  where: contribution_reactions_bool_exp!
}

"""
columns and relationships of "contribution_reports"
"""
type contribution_reports {
  """An object relationship"""
  contribution: contributions!
  contribution_id: uuid!
  created_at: timestamptz!
  details: String
  id: uuid!
  reason: String!
  reporter_id: uuid!
  status: String!
  """An object relationship"""
  user: users!
}

"""
aggregated selection of "contribution_reports"
"""
type contribution_reports_aggregate {
  aggregate: contribution_reports_aggregate_fields
  nodes: [contribution_reports!]!
}

input contribution_reports_aggregate_bool_exp {
  count: contribution_reports_aggregate_bool_exp_count
}

input contribution_reports_aggregate_bool_exp_count {
  arguments: [contribution_reports_select_column!]
  distinct: Boolean
  filter: contribution_reports_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "contribution_reports"
"""
type contribution_reports_aggregate_fields {
  count(columns: [contribution_reports_select_column!], distinct: Boolean): Int!
  max: contribution_reports_max_fields
  min: contribution_reports_min_fields
}

"""
order by aggregate values of table "contribution_reports"
"""
input contribution_reports_aggregate_order_by {
  count: order_by
  max: contribution_reports_max_order_by
  min: contribution_reports_min_order_by
}

"""
input type for inserting array relation for remote table "contribution_reports"
"""
input contribution_reports_arr_rel_insert_input {
  data: [contribution_reports_insert_input!]!
  """upsert condition"""
  on_conflict: contribution_reports_on_conflict
}

"""
Boolean expression to filter rows from the table "contribution_reports". All fields are combined with a logical 'AND'.
"""
input contribution_reports_bool_exp {
  _and: [contribution_reports_bool_exp!]
  _not: contribution_reports_bool_exp
  _or: [contribution_reports_bool_exp!]
  contribution: contributions_bool_exp
  contribution_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  details: String_comparison_exp
  id: uuid_comparison_exp
  reason: String_comparison_exp
  reporter_id: uuid_comparison_exp
  status: String_comparison_exp
  user: users_bool_exp
}

"""
unique or primary key constraints on table "contribution_reports"
"""
enum contribution_reports_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  contribution_reports_pkey
  """
  unique or primary key constraint on columns "reporter_id", "contribution_id"
  """
  contribution_reports_unique_per_user
}

"""
input type for inserting data into table "contribution_reports"
"""
input contribution_reports_insert_input {
  contribution: contributions_obj_rel_insert_input
  contribution_id: uuid
  created_at: timestamptz
  details: String
  id: uuid
  reason: String
  reporter_id: uuid
  status: String
  user: users_obj_rel_insert_input
}

"""aggregate max on columns"""
type contribution_reports_max_fields {
  contribution_id: uuid
  created_at: timestamptz
  details: String
  id: uuid
  reason: String
  reporter_id: uuid
  status: String
}

"""
order by max() on columns of table "contribution_reports"
"""
input contribution_reports_max_order_by {
  contribution_id: order_by
  created_at: order_by
  details: order_by
  id: order_by
  reason: order_by
  reporter_id: order_by
  status: order_by
}

"""aggregate min on columns"""
type contribution_reports_min_fields {
  contribution_id: uuid
  created_at: timestamptz
  details: String
  id: uuid
  reason: String
  reporter_id: uuid
  status: String
}

"""
order by min() on columns of table "contribution_reports"
"""
input contribution_reports_min_order_by {
  contribution_id: order_by
  created_at: order_by
  details: order_by
  id: order_by
  reason: order_by
  reporter_id: order_by
  status: order_by
}

"""
response of any mutation on the table "contribution_reports"
"""
type contribution_reports_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [contribution_reports!]!
}

"""
on_conflict condition type for table "contribution_reports"
"""
input contribution_reports_on_conflict {
  constraint: contribution_reports_constraint!
  update_columns: [contribution_reports_update_column!]! = []
  where: contribution_reports_bool_exp
}

"""Ordering options when selecting data from "contribution_reports"."""
input contribution_reports_order_by {
  contribution: contributions_order_by
  contribution_id: order_by
  created_at: order_by
  details: order_by
  id: order_by
  reason: order_by
  reporter_id: order_by
  status: order_by
  user: users_order_by
}

"""primary key columns input for table: contribution_reports"""
input contribution_reports_pk_columns_input {
  id: uuid!
}

"""
select columns of table "contribution_reports"
"""
enum contribution_reports_select_column {
  """column name"""
  contribution_id
  """column name"""
  created_at
  """column name"""
  details
  """column name"""
  id
  """column name"""
  reason
  """column name"""
  reporter_id
  """column name"""
  status
}

"""
input type for updating data in table "contribution_reports"
"""
input contribution_reports_set_input {
  contribution_id: uuid
  created_at: timestamptz
  details: String
  id: uuid
  reason: String
  reporter_id: uuid
  status: String
}

"""
Streaming cursor of the table "contribution_reports"
"""
input contribution_reports_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: contribution_reports_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input contribution_reports_stream_cursor_value_input {
  contribution_id: uuid
  created_at: timestamptz
  details: String
  id: uuid
  reason: String
  reporter_id: uuid
  status: String
}

"""
update columns of table "contribution_reports"
"""
enum contribution_reports_update_column {
  """column name"""
  contribution_id
  """column name"""
  created_at
  """column name"""
  details
  """column name"""
  id
  """column name"""
  reason
  """column name"""
  reporter_id
  """column name"""
  status
}

input contribution_reports_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: contribution_reports_set_input
  """filter the rows which have to be updated"""
  where: contribution_reports_bool_exp!
}

"""
columns and relationships of "contribution_types"
"""
type contribution_types {
  type: String!
}

"""
aggregated selection of "contribution_types"
"""
type contribution_types_aggregate {
  aggregate: contribution_types_aggregate_fields
  nodes: [contribution_types!]!
}

"""
aggregate fields of "contribution_types"
"""
type contribution_types_aggregate_fields {
  count(columns: [contribution_types_select_column!], distinct: Boolean): Int!
  max: contribution_types_max_fields
  min: contribution_types_min_fields
}

"""
Boolean expression to filter rows from the table "contribution_types". All fields are combined with a logical 'AND'.
"""
input contribution_types_bool_exp {
  _and: [contribution_types_bool_exp!]
  _not: contribution_types_bool_exp
  _or: [contribution_types_bool_exp!]
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "contribution_types"
"""
enum contribution_types_constraint {
  """
  unique or primary key constraint on columns "type"
  """
  contribution_types_pkey
}

enum contribution_types_enum {
  book
  film
  music
  poem
  quote
}

"""
Boolean expression to compare columns of type "contribution_types_enum". All fields are combined with logical 'AND'.
"""
input contribution_types_enum_comparison_exp {
  _eq: contribution_types_enum
  _in: [contribution_types_enum!]
  _is_null: Boolean
  _neq: contribution_types_enum
  _nin: [contribution_types_enum!]
}

"""
input type for inserting data into table "contribution_types"
"""
input contribution_types_insert_input {
  type: String
}

"""aggregate max on columns"""
type contribution_types_max_fields {
  type: String
}

"""aggregate min on columns"""
type contribution_types_min_fields {
  type: String
}

"""
response of any mutation on the table "contribution_types"
"""
type contribution_types_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [contribution_types!]!
}

"""
on_conflict condition type for table "contribution_types"
"""
input contribution_types_on_conflict {
  constraint: contribution_types_constraint!
  update_columns: [contribution_types_update_column!]! = []
  where: contribution_types_bool_exp
}

"""Ordering options when selecting data from "contribution_types"."""
input contribution_types_order_by {
  type: order_by
}

"""primary key columns input for table: contribution_types"""
input contribution_types_pk_columns_input {
  type: String!
}

"""
select columns of table "contribution_types"
"""
enum contribution_types_select_column {
  """column name"""
  type
}

"""
input type for updating data in table "contribution_types"
"""
input contribution_types_set_input {
  type: String
}

"""
Streaming cursor of the table "contribution_types"
"""
input contribution_types_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: contribution_types_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input contribution_types_stream_cursor_value_input {
  type: String
}

"""
update columns of table "contribution_types"
"""
enum contribution_types_update_column {
  """column name"""
  type
}

input contribution_types_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: contribution_types_set_input
  """filter the rows which have to be updated"""
  where: contribution_types_bool_exp!
}

"""
columns and relationships of "contributions"
"""
type contributions {
  blog_slug: String!
  """An array relationship"""
  contribution_bookmarks(
    """distinct select on columns"""
    distinct_on: [contribution_bookmarks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_bookmarks_order_by!]
    """filter the rows returned"""
    where: contribution_bookmarks_bool_exp
  ): [contribution_bookmarks!]!
  """An aggregate relationship"""
  contribution_bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_bookmarks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_bookmarks_order_by!]
    """filter the rows returned"""
    where: contribution_bookmarks_bool_exp
  ): contribution_bookmarks_aggregate!
  """An array relationship"""
  contribution_comments(
    """distinct select on columns"""
    distinct_on: [contribution_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_comments_order_by!]
    """filter the rows returned"""
    where: contribution_comments_bool_exp
  ): [contribution_comments!]!
  """An aggregate relationship"""
  contribution_comments_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_comments_order_by!]
    """filter the rows returned"""
    where: contribution_comments_bool_exp
  ): contribution_comments_aggregate!
  """An array relationship"""
  contribution_likes(
    """distinct select on columns"""
    distinct_on: [contribution_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_likes_order_by!]
    """filter the rows returned"""
    where: contribution_likes_bool_exp
  ): [contribution_likes!]!
  """An aggregate relationship"""
  contribution_likes_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_likes_order_by!]
    """filter the rows returned"""
    where: contribution_likes_bool_exp
  ): contribution_likes_aggregate!
  """An array relationship"""
  contribution_reactions(
    """distinct select on columns"""
    distinct_on: [contribution_reactions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_reactions_order_by!]
    """filter the rows returned"""
    where: contribution_reactions_bool_exp
  ): [contribution_reactions!]!
  """An aggregate relationship"""
  contribution_reactions_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_reactions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_reactions_order_by!]
    """filter the rows returned"""
    where: contribution_reactions_bool_exp
  ): contribution_reactions_aggregate!
  created_at: timestamptz!
  external_id: String
  id: uuid!
  note: String
  poster_url: String
  source_url: String
  status: String!
  submitted_by: uuid!
  title: String!
  type: contribution_types_enum!
  updated_at: timestamptz!
  """An object relationship"""
  user: users!
  year: Int
}

"""
aggregated selection of "contributions"
"""
type contributions_aggregate {
  aggregate: contributions_aggregate_fields
  nodes: [contributions!]!
}

input contributions_aggregate_bool_exp {
  count: contributions_aggregate_bool_exp_count
}

input contributions_aggregate_bool_exp_count {
  arguments: [contributions_select_column!]
  distinct: Boolean
  filter: contributions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "contributions"
"""
type contributions_aggregate_fields {
  avg: contributions_avg_fields
  count(columns: [contributions_select_column!], distinct: Boolean): Int!
  max: contributions_max_fields
  min: contributions_min_fields
  stddev: contributions_stddev_fields
  stddev_pop: contributions_stddev_pop_fields
  stddev_samp: contributions_stddev_samp_fields
  sum: contributions_sum_fields
  var_pop: contributions_var_pop_fields
  var_samp: contributions_var_samp_fields
  variance: contributions_variance_fields
}

"""
order by aggregate values of table "contributions"
"""
input contributions_aggregate_order_by {
  avg: contributions_avg_order_by
  count: order_by
  max: contributions_max_order_by
  min: contributions_min_order_by
  stddev: contributions_stddev_order_by
  stddev_pop: contributions_stddev_pop_order_by
  stddev_samp: contributions_stddev_samp_order_by
  sum: contributions_sum_order_by
  var_pop: contributions_var_pop_order_by
  var_samp: contributions_var_samp_order_by
  variance: contributions_variance_order_by
}

"""
input type for inserting array relation for remote table "contributions"
"""
input contributions_arr_rel_insert_input {
  data: [contributions_insert_input!]!
  """upsert condition"""
  on_conflict: contributions_on_conflict
}

"""aggregate avg on columns"""
type contributions_avg_fields {
  year: Float
}

"""
order by avg() on columns of table "contributions"
"""
input contributions_avg_order_by {
  year: order_by
}

"""
Boolean expression to filter rows from the table "contributions". All fields are combined with a logical 'AND'.
"""
input contributions_bool_exp {
  _and: [contributions_bool_exp!]
  _not: contributions_bool_exp
  _or: [contributions_bool_exp!]
  blog_slug: String_comparison_exp
  contribution_bookmarks: contribution_bookmarks_bool_exp
  contribution_bookmarks_aggregate: contribution_bookmarks_aggregate_bool_exp
  contribution_comments: contribution_comments_bool_exp
  contribution_comments_aggregate: contribution_comments_aggregate_bool_exp
  contribution_likes: contribution_likes_bool_exp
  contribution_likes_aggregate: contribution_likes_aggregate_bool_exp
  contribution_reactions: contribution_reactions_bool_exp
  contribution_reactions_aggregate: contribution_reactions_aggregate_bool_exp
  created_at: timestamptz_comparison_exp
  external_id: String_comparison_exp
  id: uuid_comparison_exp
  note: String_comparison_exp
  poster_url: String_comparison_exp
  source_url: String_comparison_exp
  status: String_comparison_exp
  submitted_by: uuid_comparison_exp
  title: String_comparison_exp
  type: contribution_types_enum_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  year: Int_comparison_exp
}

"""
unique or primary key constraints on table "contributions"
"""
enum contributions_constraint {
  """
  unique or primary key constraint on columns "external_id"
  """
  contributions_external_id_key
  """
  unique or primary key constraint on columns "id"
  """
  contributions_pkey
}

"""
input type for incrementing numeric columns in table "contributions"
"""
input contributions_inc_input {
  year: Int
}

"""
input type for inserting data into table "contributions"
"""
input contributions_insert_input {
  blog_slug: String
  contribution_bookmarks: contribution_bookmarks_arr_rel_insert_input
  contribution_comments: contribution_comments_arr_rel_insert_input
  contribution_likes: contribution_likes_arr_rel_insert_input
  contribution_reactions: contribution_reactions_arr_rel_insert_input
  created_at: timestamptz
  external_id: String
  id: uuid
  note: String
  poster_url: String
  source_url: String
  status: String
  submitted_by: uuid
  title: String
  type: contribution_types_enum
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  year: Int
}

"""aggregate max on columns"""
type contributions_max_fields {
  blog_slug: String
  created_at: timestamptz
  external_id: String
  id: uuid
  note: String
  poster_url: String
  source_url: String
  status: String
  submitted_by: uuid
  title: String
  updated_at: timestamptz
  year: Int
}

"""
order by max() on columns of table "contributions"
"""
input contributions_max_order_by {
  blog_slug: order_by
  created_at: order_by
  external_id: order_by
  id: order_by
  note: order_by
  poster_url: order_by
  source_url: order_by
  status: order_by
  submitted_by: order_by
  title: order_by
  updated_at: order_by
  year: order_by
}

"""aggregate min on columns"""
type contributions_min_fields {
  blog_slug: String
  created_at: timestamptz
  external_id: String
  id: uuid
  note: String
  poster_url: String
  source_url: String
  status: String
  submitted_by: uuid
  title: String
  updated_at: timestamptz
  year: Int
}

"""
order by min() on columns of table "contributions"
"""
input contributions_min_order_by {
  blog_slug: order_by
  created_at: order_by
  external_id: order_by
  id: order_by
  note: order_by
  poster_url: order_by
  source_url: order_by
  status: order_by
  submitted_by: order_by
  title: order_by
  updated_at: order_by
  year: order_by
}

"""
response of any mutation on the table "contributions"
"""
type contributions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [contributions!]!
}

"""
input type for inserting object relation for remote table "contributions"
"""
input contributions_obj_rel_insert_input {
  data: contributions_insert_input!
  """upsert condition"""
  on_conflict: contributions_on_conflict
}

"""
on_conflict condition type for table "contributions"
"""
input contributions_on_conflict {
  constraint: contributions_constraint!
  update_columns: [contributions_update_column!]! = []
  where: contributions_bool_exp
}

"""Ordering options when selecting data from "contributions"."""
input contributions_order_by {
  blog_slug: order_by
  contribution_bookmarks_aggregate: contribution_bookmarks_aggregate_order_by
  contribution_comments_aggregate: contribution_comments_aggregate_order_by
  contribution_likes_aggregate: contribution_likes_aggregate_order_by
  contribution_reactions_aggregate: contribution_reactions_aggregate_order_by
  created_at: order_by
  external_id: order_by
  id: order_by
  note: order_by
  poster_url: order_by
  source_url: order_by
  status: order_by
  submitted_by: order_by
  title: order_by
  type: order_by
  updated_at: order_by
  user: users_order_by
  year: order_by
}

"""primary key columns input for table: contributions"""
input contributions_pk_columns_input {
  id: uuid!
}

"""
select columns of table "contributions"
"""
enum contributions_select_column {
  """column name"""
  blog_slug
  """column name"""
  created_at
  """column name"""
  external_id
  """column name"""
  id
  """column name"""
  note
  """column name"""
  poster_url
  """column name"""
  source_url
  """column name"""
  status
  """column name"""
  submitted_by
  """column name"""
  title
  """column name"""
  type
  """column name"""
  updated_at
  """column name"""
  year
}

"""
input type for updating data in table "contributions"
"""
input contributions_set_input {
  blog_slug: String
  created_at: timestamptz
  external_id: String
  id: uuid
  note: String
  poster_url: String
  source_url: String
  status: String
  submitted_by: uuid
  title: String
  type: contribution_types_enum
  updated_at: timestamptz
  year: Int
}

"""aggregate stddev on columns"""
type contributions_stddev_fields {
  year: Float
}

"""
order by stddev() on columns of table "contributions"
"""
input contributions_stddev_order_by {
  year: order_by
}

"""aggregate stddev_pop on columns"""
type contributions_stddev_pop_fields {
  year: Float
}

"""
order by stddev_pop() on columns of table "contributions"
"""
input contributions_stddev_pop_order_by {
  year: order_by
}

"""aggregate stddev_samp on columns"""
type contributions_stddev_samp_fields {
  year: Float
}

"""
order by stddev_samp() on columns of table "contributions"
"""
input contributions_stddev_samp_order_by {
  year: order_by
}

"""
Streaming cursor of the table "contributions"
"""
input contributions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: contributions_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input contributions_stream_cursor_value_input {
  blog_slug: String
  created_at: timestamptz
  external_id: String
  id: uuid
  note: String
  poster_url: String
  source_url: String
  status: String
  submitted_by: uuid
  title: String
  type: contribution_types_enum
  updated_at: timestamptz
  year: Int
}

"""aggregate sum on columns"""
type contributions_sum_fields {
  year: Int
}

"""
order by sum() on columns of table "contributions"
"""
input contributions_sum_order_by {
  year: order_by
}

"""
update columns of table "contributions"
"""
enum contributions_update_column {
  """column name"""
  blog_slug
  """column name"""
  created_at
  """column name"""
  external_id
  """column name"""
  id
  """column name"""
  note
  """column name"""
  poster_url
  """column name"""
  source_url
  """column name"""
  status
  """column name"""
  submitted_by
  """column name"""
  title
  """column name"""
  type
  """column name"""
  updated_at
  """column name"""
  year
}

input contributions_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: contributions_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: contributions_set_input
  """filter the rows which have to be updated"""
  where: contributions_bool_exp!
}

"""aggregate var_pop on columns"""
type contributions_var_pop_fields {
  year: Float
}

"""
order by var_pop() on columns of table "contributions"
"""
input contributions_var_pop_order_by {
  year: order_by
}

"""aggregate var_samp on columns"""
type contributions_var_samp_fields {
  year: Float
}

"""
order by var_samp() on columns of table "contributions"
"""
input contributions_var_samp_order_by {
  year: order_by
}

"""aggregate variance on columns"""
type contributions_variance_fields {
  year: Float
}

"""
order by variance() on columns of table "contributions"
"""
input contributions_variance_order_by {
  year: order_by
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC
  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "storage.files"
"""
type files {
  """An object relationship"""
  bucket: buckets!
  bucketId: String!
  createdAt: timestamptz!
  etag: String
  id: uuid!
  isUploaded: Boolean
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz!
  uploadedByUserId: uuid
}

"""
aggregated selection of "storage.files"
"""
type files_aggregate {
  aggregate: files_aggregate_fields
  nodes: [files!]!
}

input files_aggregate_bool_exp {
  bool_and: files_aggregate_bool_exp_bool_and
  bool_or: files_aggregate_bool_exp_bool_or
  count: files_aggregate_bool_exp_count
}

input files_aggregate_bool_exp_bool_and {
  arguments: files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: files_bool_exp
  predicate: Boolean_comparison_exp!
}

input files_aggregate_bool_exp_bool_or {
  arguments: files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: files_bool_exp
  predicate: Boolean_comparison_exp!
}

input files_aggregate_bool_exp_count {
  arguments: [files_select_column!]
  distinct: Boolean
  filter: files_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "storage.files"
"""
type files_aggregate_fields {
  avg: files_avg_fields
  count(columns: [files_select_column!], distinct: Boolean): Int!
  max: files_max_fields
  min: files_min_fields
  stddev: files_stddev_fields
  stddev_pop: files_stddev_pop_fields
  stddev_samp: files_stddev_samp_fields
  sum: files_sum_fields
  var_pop: files_var_pop_fields
  var_samp: files_var_samp_fields
  variance: files_variance_fields
}

"""
order by aggregate values of table "storage.files"
"""
input files_aggregate_order_by {
  avg: files_avg_order_by
  count: order_by
  max: files_max_order_by
  min: files_min_order_by
  stddev: files_stddev_order_by
  stddev_pop: files_stddev_pop_order_by
  stddev_samp: files_stddev_samp_order_by
  sum: files_sum_order_by
  var_pop: files_var_pop_order_by
  var_samp: files_var_samp_order_by
  variance: files_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input files_append_input {
  metadata: jsonb
}

"""
input type for inserting array relation for remote table "storage.files"
"""
input files_arr_rel_insert_input {
  data: [files_insert_input!]!
  """upsert condition"""
  on_conflict: files_on_conflict
}

"""aggregate avg on columns"""
type files_avg_fields {
  size: Float
}

"""
order by avg() on columns of table "storage.files"
"""
input files_avg_order_by {
  size: order_by
}

"""
Boolean expression to filter rows from the table "storage.files". All fields are combined with a logical 'AND'.
"""
input files_bool_exp {
  _and: [files_bool_exp!]
  _not: files_bool_exp
  _or: [files_bool_exp!]
  bucket: buckets_bool_exp
  bucketId: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  etag: String_comparison_exp
  id: uuid_comparison_exp
  isUploaded: Boolean_comparison_exp
  metadata: jsonb_comparison_exp
  mimeType: String_comparison_exp
  name: String_comparison_exp
  size: Int_comparison_exp
  updatedAt: timestamptz_comparison_exp
  uploadedByUserId: uuid_comparison_exp
}

"""
unique or primary key constraints on table "storage.files"
"""
enum files_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  files_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input files_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input files_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input files_delete_key_input {
  metadata: String
}

"""
input type for incrementing numeric columns in table "storage.files"
"""
input files_inc_input {
  size: Int
}

"""
input type for inserting data into table "storage.files"
"""
input files_insert_input {
  bucket: buckets_obj_rel_insert_input
  bucketId: String
  createdAt: timestamptz
  etag: String
  id: uuid
  isUploaded: Boolean
  metadata: jsonb
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz
  uploadedByUserId: uuid
}

"""aggregate max on columns"""
type files_max_fields {
  bucketId: String
  createdAt: timestamptz
  etag: String
  id: uuid
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz
  uploadedByUserId: uuid
}

"""
order by max() on columns of table "storage.files"
"""
input files_max_order_by {
  bucketId: order_by
  createdAt: order_by
  etag: order_by
  id: order_by
  mimeType: order_by
  name: order_by
  size: order_by
  updatedAt: order_by
  uploadedByUserId: order_by
}

"""aggregate min on columns"""
type files_min_fields {
  bucketId: String
  createdAt: timestamptz
  etag: String
  id: uuid
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz
  uploadedByUserId: uuid
}

"""
order by min() on columns of table "storage.files"
"""
input files_min_order_by {
  bucketId: order_by
  createdAt: order_by
  etag: order_by
  id: order_by
  mimeType: order_by
  name: order_by
  size: order_by
  updatedAt: order_by
  uploadedByUserId: order_by
}

"""
response of any mutation on the table "storage.files"
"""
type files_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [files!]!
}

"""
input type for inserting object relation for remote table "storage.files"
"""
input files_obj_rel_insert_input {
  data: files_insert_input!
  """upsert condition"""
  on_conflict: files_on_conflict
}

"""
on_conflict condition type for table "storage.files"
"""
input files_on_conflict {
  constraint: files_constraint!
  update_columns: [files_update_column!]! = []
  where: files_bool_exp
}

"""Ordering options when selecting data from "storage.files"."""
input files_order_by {
  bucket: buckets_order_by
  bucketId: order_by
  createdAt: order_by
  etag: order_by
  id: order_by
  isUploaded: order_by
  metadata: order_by
  mimeType: order_by
  name: order_by
  size: order_by
  updatedAt: order_by
  uploadedByUserId: order_by
}

"""primary key columns input for table: storage.files"""
input files_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input files_prepend_input {
  metadata: jsonb
}

"""
select columns of table "storage.files"
"""
enum files_select_column {
  """column name"""
  bucketId
  """column name"""
  createdAt
  """column name"""
  etag
  """column name"""
  id
  """column name"""
  isUploaded
  """column name"""
  metadata
  """column name"""
  mimeType
  """column name"""
  name
  """column name"""
  size
  """column name"""
  updatedAt
  """column name"""
  uploadedByUserId
}

"""
select "files_aggregate_bool_exp_bool_and_arguments_columns" columns of table "storage.files"
"""
enum files_select_column_files_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  isUploaded
}

"""
select "files_aggregate_bool_exp_bool_or_arguments_columns" columns of table "storage.files"
"""
enum files_select_column_files_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  isUploaded
}

"""
input type for updating data in table "storage.files"
"""
input files_set_input {
  bucketId: String
  createdAt: timestamptz
  etag: String
  id: uuid
  isUploaded: Boolean
  metadata: jsonb
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz
  uploadedByUserId: uuid
}

"""aggregate stddev on columns"""
type files_stddev_fields {
  size: Float
}

"""
order by stddev() on columns of table "storage.files"
"""
input files_stddev_order_by {
  size: order_by
}

"""aggregate stddev_pop on columns"""
type files_stddev_pop_fields {
  size: Float
}

"""
order by stddev_pop() on columns of table "storage.files"
"""
input files_stddev_pop_order_by {
  size: order_by
}

"""aggregate stddev_samp on columns"""
type files_stddev_samp_fields {
  size: Float
}

"""
order by stddev_samp() on columns of table "storage.files"
"""
input files_stddev_samp_order_by {
  size: order_by
}

"""
Streaming cursor of the table "files"
"""
input files_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: files_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input files_stream_cursor_value_input {
  bucketId: String
  createdAt: timestamptz
  etag: String
  id: uuid
  isUploaded: Boolean
  metadata: jsonb
  mimeType: String
  name: String
  size: Int
  updatedAt: timestamptz
  uploadedByUserId: uuid
}

"""aggregate sum on columns"""
type files_sum_fields {
  size: Int
}

"""
order by sum() on columns of table "storage.files"
"""
input files_sum_order_by {
  size: order_by
}

"""
update columns of table "storage.files"
"""
enum files_update_column {
  """column name"""
  bucketId
  """column name"""
  createdAt
  """column name"""
  etag
  """column name"""
  id
  """column name"""
  isUploaded
  """column name"""
  metadata
  """column name"""
  mimeType
  """column name"""
  name
  """column name"""
  size
  """column name"""
  updatedAt
  """column name"""
  uploadedByUserId
}

input files_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: files_append_input
  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: files_delete_at_path_input
  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: files_delete_elem_input
  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: files_delete_key_input
  """increments the numeric columns with given value of the filtered values"""
  _inc: files_inc_input
  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: files_prepend_input
  """sets the columns of the filtered rows to the given values"""
  _set: files_set_input
  """filter the rows which have to be updated"""
  where: files_bool_exp!
}

"""aggregate var_pop on columns"""
type files_var_pop_fields {
  size: Float
}

"""
order by var_pop() on columns of table "storage.files"
"""
input files_var_pop_order_by {
  size: order_by
}

"""aggregate var_samp on columns"""
type files_var_samp_fields {
  size: Float
}

"""
order by var_samp() on columns of table "storage.files"
"""
input files_var_samp_order_by {
  size: order_by
}

"""aggregate variance on columns"""
type files_variance_fields {
  size: Float
}

"""
order by variance() on columns of table "storage.files"
"""
input files_variance_order_by {
  size: order_by
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp
  """is the column contained in the given json value"""
  _contained_in: jsonb
  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb
  """does the string exist as a top-level key in the column"""
  _has_key: String
  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]
  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "message_typing"
"""
type message_typing {
  created_at: timestamptz!
  id: uuid!
  is_typing: Boolean!
  recipient_id: uuid!
  sender_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "message_typing"
"""
type message_typing_aggregate {
  aggregate: message_typing_aggregate_fields
  nodes: [message_typing!]!
}

"""
aggregate fields of "message_typing"
"""
type message_typing_aggregate_fields {
  count(columns: [message_typing_select_column!], distinct: Boolean): Int!
  max: message_typing_max_fields
  min: message_typing_min_fields
}

"""
Boolean expression to filter rows from the table "message_typing". All fields are combined with a logical 'AND'.
"""
input message_typing_bool_exp {
  _and: [message_typing_bool_exp!]
  _not: message_typing_bool_exp
  _or: [message_typing_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  is_typing: Boolean_comparison_exp
  recipient_id: uuid_comparison_exp
  sender_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "message_typing"
"""
enum message_typing_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  message_typing_pkey
  """
  unique or primary key constraint on columns "sender_id", "recipient_id"
  """
  message_typing_sender_id_recipient_id_key
}

"""
input type for inserting data into table "message_typing"
"""
input message_typing_insert_input {
  created_at: timestamptz
  id: uuid
  is_typing: Boolean
  recipient_id: uuid
  sender_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type message_typing_max_fields {
  created_at: timestamptz
  id: uuid
  recipient_id: uuid
  sender_id: uuid
  updated_at: timestamptz
}

"""aggregate min on columns"""
type message_typing_min_fields {
  created_at: timestamptz
  id: uuid
  recipient_id: uuid
  sender_id: uuid
  updated_at: timestamptz
}

"""
response of any mutation on the table "message_typing"
"""
type message_typing_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [message_typing!]!
}

"""
on_conflict condition type for table "message_typing"
"""
input message_typing_on_conflict {
  constraint: message_typing_constraint!
  update_columns: [message_typing_update_column!]! = []
  where: message_typing_bool_exp
}

"""Ordering options when selecting data from "message_typing"."""
input message_typing_order_by {
  created_at: order_by
  id: order_by
  is_typing: order_by
  recipient_id: order_by
  sender_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: message_typing"""
input message_typing_pk_columns_input {
  id: uuid!
}

"""
select columns of table "message_typing"
"""
enum message_typing_select_column {
  """column name"""
  created_at
  """column name"""
  id
  """column name"""
  is_typing
  """column name"""
  recipient_id
  """column name"""
  sender_id
  """column name"""
  updated_at
}

"""
input type for updating data in table "message_typing"
"""
input message_typing_set_input {
  created_at: timestamptz
  id: uuid
  is_typing: Boolean
  recipient_id: uuid
  sender_id: uuid
  updated_at: timestamptz
}

"""
Streaming cursor of the table "message_typing"
"""
input message_typing_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: message_typing_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input message_typing_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  is_typing: Boolean
  recipient_id: uuid
  sender_id: uuid
  updated_at: timestamptz
}

"""
update columns of table "message_typing"
"""
enum message_typing_update_column {
  """column name"""
  created_at
  """column name"""
  id
  """column name"""
  is_typing
  """column name"""
  recipient_id
  """column name"""
  sender_id
  """column name"""
  updated_at
}

input message_typing_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: message_typing_set_input
  """filter the rows which have to be updated"""
  where: message_typing_bool_exp!
}

"""
columns and relationships of "messages"
"""
type messages {
  body: String!
  created_at: timestamptz!
  id: Int!
  """An object relationship"""
  receiver: users!
  recipient_id: uuid!
  """An object relationship"""
  sender: users!
  sender_id: uuid!
  updated_at: timestamptz!
}

"""
aggregated selection of "messages"
"""
type messages_aggregate {
  aggregate: messages_aggregate_fields
  nodes: [messages!]!
}

input messages_aggregate_bool_exp {
  count: messages_aggregate_bool_exp_count
}

input messages_aggregate_bool_exp_count {
  arguments: [messages_select_column!]
  distinct: Boolean
  filter: messages_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "messages"
"""
type messages_aggregate_fields {
  avg: messages_avg_fields
  count(columns: [messages_select_column!], distinct: Boolean): Int!
  max: messages_max_fields
  min: messages_min_fields
  stddev: messages_stddev_fields
  stddev_pop: messages_stddev_pop_fields
  stddev_samp: messages_stddev_samp_fields
  sum: messages_sum_fields
  var_pop: messages_var_pop_fields
  var_samp: messages_var_samp_fields
  variance: messages_variance_fields
}

"""
order by aggregate values of table "messages"
"""
input messages_aggregate_order_by {
  avg: messages_avg_order_by
  count: order_by
  max: messages_max_order_by
  min: messages_min_order_by
  stddev: messages_stddev_order_by
  stddev_pop: messages_stddev_pop_order_by
  stddev_samp: messages_stddev_samp_order_by
  sum: messages_sum_order_by
  var_pop: messages_var_pop_order_by
  var_samp: messages_var_samp_order_by
  variance: messages_variance_order_by
}

"""
input type for inserting array relation for remote table "messages"
"""
input messages_arr_rel_insert_input {
  data: [messages_insert_input!]!
  """upsert condition"""
  on_conflict: messages_on_conflict
}

"""aggregate avg on columns"""
type messages_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "messages"
"""
input messages_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "messages". All fields are combined with a logical 'AND'.
"""
input messages_bool_exp {
  _and: [messages_bool_exp!]
  _not: messages_bool_exp
  _or: [messages_bool_exp!]
  body: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  receiver: users_bool_exp
  recipient_id: uuid_comparison_exp
  sender: users_bool_exp
  sender_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "messages"
"""
enum messages_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  messages_pkey
}

"""
input type for incrementing numeric columns in table "messages"
"""
input messages_inc_input {
  id: Int
}

"""
input type for inserting data into table "messages"
"""
input messages_insert_input {
  body: String
  created_at: timestamptz
  id: Int
  receiver: users_obj_rel_insert_input
  recipient_id: uuid
  sender: users_obj_rel_insert_input
  sender_id: uuid
  updated_at: timestamptz
}

"""aggregate max on columns"""
type messages_max_fields {
  body: String
  created_at: timestamptz
  id: Int
  recipient_id: uuid
  sender_id: uuid
  updated_at: timestamptz
}

"""
order by max() on columns of table "messages"
"""
input messages_max_order_by {
  body: order_by
  created_at: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type messages_min_fields {
  body: String
  created_at: timestamptz
  id: Int
  recipient_id: uuid
  sender_id: uuid
  updated_at: timestamptz
}

"""
order by min() on columns of table "messages"
"""
input messages_min_order_by {
  body: order_by
  created_at: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "messages"
"""
type messages_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [messages!]!
}

"""
on_conflict condition type for table "messages"
"""
input messages_on_conflict {
  constraint: messages_constraint!
  update_columns: [messages_update_column!]! = []
  where: messages_bool_exp
}

"""Ordering options when selecting data from "messages"."""
input messages_order_by {
  body: order_by
  created_at: order_by
  id: order_by
  receiver: users_order_by
  recipient_id: order_by
  sender: users_order_by
  sender_id: order_by
  updated_at: order_by
}

"""primary key columns input for table: messages"""
input messages_pk_columns_input {
  id: Int!
}

"""
select columns of table "messages"
"""
enum messages_select_column {
  """column name"""
  body
  """column name"""
  created_at
  """column name"""
  id
  """column name"""
  recipient_id
  """column name"""
  sender_id
  """column name"""
  updated_at
}

"""
input type for updating data in table "messages"
"""
input messages_set_input {
  body: String
  created_at: timestamptz
  id: Int
  recipient_id: uuid
  sender_id: uuid
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type messages_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "messages"
"""
input messages_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type messages_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "messages"
"""
input messages_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type messages_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "messages"
"""
input messages_stddev_samp_order_by {
  id: order_by
}

"""
Streaming cursor of the table "messages"
"""
input messages_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: messages_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input messages_stream_cursor_value_input {
  body: String
  created_at: timestamptz
  id: Int
  recipient_id: uuid
  sender_id: uuid
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type messages_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "messages"
"""
input messages_sum_order_by {
  id: order_by
}

"""
update columns of table "messages"
"""
enum messages_update_column {
  """column name"""
  body
  """column name"""
  created_at
  """column name"""
  id
  """column name"""
  recipient_id
  """column name"""
  sender_id
  """column name"""
  updated_at
}

input messages_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: messages_inc_input
  """sets the columns of the filtered rows to the given values"""
  _set: messages_set_input
  """filter the rows which have to be updated"""
  where: messages_bool_exp!
}

"""aggregate var_pop on columns"""
type messages_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "messages"
"""
input messages_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type messages_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "messages"
"""
input messages_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type messages_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "messages"
"""
input messages_variance_order_by {
  id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete single row from the table: "auth.providers"
  """
  deleteAuthProvider(id: String!): authProviders
  """
  delete single row from the table: "auth.provider_requests"
  """
  deleteAuthProviderRequest(id: uuid!): authProviderRequests
  """
  delete data from the table: "auth.provider_requests"
  """
  deleteAuthProviderRequests(
    """filter the rows which have to be deleted"""
    where: authProviderRequests_bool_exp!
  ): authProviderRequests_mutation_response
  """
  delete data from the table: "auth.providers"
  """
  deleteAuthProviders(
    """filter the rows which have to be deleted"""
    where: authProviders_bool_exp!
  ): authProviders_mutation_response
  """
  delete single row from the table: "auth.refresh_tokens"
  """
  deleteAuthRefreshToken(id: uuid!): authRefreshTokens
  """
  delete single row from the table: "auth.refresh_token_types"
  """
  deleteAuthRefreshTokenType(value: String!): authRefreshTokenTypes
  """
  delete data from the table: "auth.refresh_token_types"
  """
  deleteAuthRefreshTokenTypes(
    """filter the rows which have to be deleted"""
    where: authRefreshTokenTypes_bool_exp!
  ): authRefreshTokenTypes_mutation_response
  """
  delete data from the table: "auth.refresh_tokens"
  """
  deleteAuthRefreshTokens(
    """filter the rows which have to be deleted"""
    where: authRefreshTokens_bool_exp!
  ): authRefreshTokens_mutation_response
  """
  delete single row from the table: "auth.roles"
  """
  deleteAuthRole(role: String!): authRoles
  """
  delete data from the table: "auth.roles"
  """
  deleteAuthRoles(
    """filter the rows which have to be deleted"""
    where: authRoles_bool_exp!
  ): authRoles_mutation_response
  """
  delete single row from the table: "auth.user_providers"
  """
  deleteAuthUserProvider(id: uuid!): authUserProviders
  """
  delete data from the table: "auth.user_providers"
  """
  deleteAuthUserProviders(
    """filter the rows which have to be deleted"""
    where: authUserProviders_bool_exp!
  ): authUserProviders_mutation_response
  """
  delete single row from the table: "auth.user_roles"
  """
  deleteAuthUserRole(id: uuid!): authUserRoles
  """
  delete data from the table: "auth.user_roles"
  """
  deleteAuthUserRoles(
    """filter the rows which have to be deleted"""
    where: authUserRoles_bool_exp!
  ): authUserRoles_mutation_response
  """
  delete single row from the table: "auth.user_security_keys"
  """
  deleteAuthUserSecurityKey(id: uuid!): authUserSecurityKeys
  """
  delete data from the table: "auth.user_security_keys"
  """
  deleteAuthUserSecurityKeys(
    """filter the rows which have to be deleted"""
    where: authUserSecurityKeys_bool_exp!
  ): authUserSecurityKeys_mutation_response
  """
  delete single row from the table: "storage.buckets"
  """
  deleteBucket(id: String!): buckets
  """
  delete data from the table: "storage.buckets"
  """
  deleteBuckets(
    """filter the rows which have to be deleted"""
    where: buckets_bool_exp!
  ): buckets_mutation_response
  """
  delete single row from the table: "storage.files"
  """
  deleteFile(id: uuid!): files
  """
  delete data from the table: "storage.files"
  """
  deleteFiles(
    """filter the rows which have to be deleted"""
    where: files_bool_exp!
  ): files_mutation_response
  """
  delete single row from the table: "auth.users"
  """
  deleteUser(id: uuid!): users
  """
  delete data from the table: "auth.users"
  """
  deleteUsers(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response
  """
  delete single row from the table: "storage.virus"
  """
  deleteVirus(id: uuid!): virus
  """
  delete data from the table: "storage.virus"
  """
  deleteViruses(
    """filter the rows which have to be deleted"""
    where: virus_bool_exp!
  ): virus_mutation_response
  """
  delete data from the table: "blog_comment_helpful"
  """
  delete_blog_comment_helpful(
    """filter the rows which have to be deleted"""
    where: blog_comment_helpful_bool_exp!
  ): blog_comment_helpful_mutation_response
  """
  delete single row from the table: "blog_comment_helpful"
  """
  delete_blog_comment_helpful_by_pk(comment_id: uuid!, user_id: uuid!): blog_comment_helpful
  """
  delete data from the table: "blog_comment_reports"
  """
  delete_blog_comment_reports(
    """filter the rows which have to be deleted"""
    where: blog_comment_reports_bool_exp!
  ): blog_comment_reports_mutation_response
  """
  delete single row from the table: "blog_comment_reports"
  """
  delete_blog_comment_reports_by_pk(id: uuid!): blog_comment_reports
  """
  delete data from the table: "blog_comments"
  """
  delete_blog_comments(
    """filter the rows which have to be deleted"""
    where: blog_comments_bool_exp!
  ): blog_comments_mutation_response
  """
  delete single row from the table: "blog_comments"
  """
  delete_blog_comments_by_pk(id: uuid!): blog_comments
  """
  delete data from the table: "comment_likes"
  """
  delete_comment_likes(
    """filter the rows which have to be deleted"""
    where: comment_likes_bool_exp!
  ): comment_likes_mutation_response
  """
  delete single row from the table: "comment_likes"
  """
  delete_comment_likes_by_pk(comment_id: uuid!, user_id: uuid!): comment_likes
  """
  delete data from the table: "contribution_bookmarks"
  """
  delete_contribution_bookmarks(
    """filter the rows which have to be deleted"""
    where: contribution_bookmarks_bool_exp!
  ): contribution_bookmarks_mutation_response
  """
  delete single row from the table: "contribution_bookmarks"
  """
  delete_contribution_bookmarks_by_pk(contribution_id: uuid!, user_id: uuid!): contribution_bookmarks
  """
  delete data from the table: "contribution_comments"
  """
  delete_contribution_comments(
    """filter the rows which have to be deleted"""
    where: contribution_comments_bool_exp!
  ): contribution_comments_mutation_response
  """
  delete single row from the table: "contribution_comments"
  """
  delete_contribution_comments_by_pk(id: uuid!): contribution_comments
  """
  delete data from the table: "contribution_likes"
  """
  delete_contribution_likes(
    """filter the rows which have to be deleted"""
    where: contribution_likes_bool_exp!
  ): contribution_likes_mutation_response
  """
  delete single row from the table: "contribution_likes"
  """
  delete_contribution_likes_by_pk(contribution_id: uuid!, user_id: uuid!): contribution_likes
  """
  delete data from the table: "contribution_reactions"
  """
  delete_contribution_reactions(
    """filter the rows which have to be deleted"""
    where: contribution_reactions_bool_exp!
  ): contribution_reactions_mutation_response
  """
  delete single row from the table: "contribution_reactions"
  """
  delete_contribution_reactions_by_pk(contribution_id: uuid!, type: reaction_types_enum!, user_id: uuid!): contribution_reactions
  """
  delete data from the table: "contribution_reports"
  """
  delete_contribution_reports(
    """filter the rows which have to be deleted"""
    where: contribution_reports_bool_exp!
  ): contribution_reports_mutation_response
  """
  delete single row from the table: "contribution_reports"
  """
  delete_contribution_reports_by_pk(id: uuid!): contribution_reports
  """
  delete data from the table: "contribution_types"
  """
  delete_contribution_types(
    """filter the rows which have to be deleted"""
    where: contribution_types_bool_exp!
  ): contribution_types_mutation_response
  """
  delete single row from the table: "contribution_types"
  """
  delete_contribution_types_by_pk(type: String!): contribution_types
  """
  delete data from the table: "contributions"
  """
  delete_contributions(
    """filter the rows which have to be deleted"""
    where: contributions_bool_exp!
  ): contributions_mutation_response
  """
  delete single row from the table: "contributions"
  """
  delete_contributions_by_pk(id: uuid!): contributions
  """
  delete data from the table: "message_typing"
  """
  delete_message_typing(
    """filter the rows which have to be deleted"""
    where: message_typing_bool_exp!
  ): message_typing_mutation_response
  """
  delete single row from the table: "message_typing"
  """
  delete_message_typing_by_pk(id: uuid!): message_typing
  """
  delete data from the table: "messages"
  """
  delete_messages(
    """filter the rows which have to be deleted"""
    where: messages_bool_exp!
  ): messages_mutation_response
  """
  delete single row from the table: "messages"
  """
  delete_messages_by_pk(id: Int!): messages
  """
  delete data from the table: "post_bookmarks"
  """
  delete_post_bookmarks(
    """filter the rows which have to be deleted"""
    where: post_bookmarks_bool_exp!
  ): post_bookmarks_mutation_response
  """
  delete single row from the table: "post_bookmarks"
  """
  delete_post_bookmarks_by_pk(post_id: uuid!, user_id: uuid!): post_bookmarks
  """
  delete data from the table: "post_comments"
  """
  delete_post_comments(
    """filter the rows which have to be deleted"""
    where: post_comments_bool_exp!
  ): post_comments_mutation_response
  """
  delete single row from the table: "post_comments"
  """
  delete_post_comments_by_pk(id: uuid!): post_comments
  """
  delete data from the table: "post_likes"
  """
  delete_post_likes(
    """filter the rows which have to be deleted"""
    where: post_likes_bool_exp!
  ): post_likes_mutation_response
  """
  delete single row from the table: "post_likes"
  """
  delete_post_likes_by_pk(post_id: uuid!, user_id: uuid!): post_likes
  """
  delete data from the table: "post_reports"
  """
  delete_post_reports(
    """filter the rows which have to be deleted"""
    where: post_reports_bool_exp!
  ): post_reports_mutation_response
  """
  delete single row from the table: "post_reports"
  """
  delete_post_reports_by_pk(id: uuid!): post_reports
  """
  delete data from the table: "posts"
  """
  delete_posts(
    """filter the rows which have to be deleted"""
    where: posts_bool_exp!
  ): posts_mutation_response
  """
  delete single row from the table: "posts"
  """
  delete_posts_by_pk(id: uuid!): posts
  """
  delete data from the table: "reaction_types"
  """
  delete_reaction_types(
    """filter the rows which have to be deleted"""
    where: reaction_types_bool_exp!
  ): reaction_types_mutation_response
  """
  delete single row from the table: "reaction_types"
  """
  delete_reaction_types_by_pk(type: String!): reaction_types
  """
  delete data from the table: "user_blocks"
  """
  delete_user_blocks(
    """filter the rows which have to be deleted"""
    where: user_blocks_bool_exp!
  ): user_blocks_mutation_response
  """
  delete single row from the table: "user_blocks"
  """
  delete_user_blocks_by_pk(blocked_id: uuid!, blocker_id: uuid!): user_blocks
  """
  delete data from the table: "user_preferences"
  """
  delete_user_preferences(
    """filter the rows which have to be deleted"""
    where: user_preferences_bool_exp!
  ): user_preferences_mutation_response
  """
  delete single row from the table: "user_preferences"
  """
  delete_user_preferences_by_pk(user_id: uuid!): user_preferences
  """
  delete data from the table: "user_profiles"
  """
  delete_user_profiles(
    """filter the rows which have to be deleted"""
    where: user_profiles_bool_exp!
  ): user_profiles_mutation_response
  """
  delete single row from the table: "user_profiles"
  """
  delete_user_profiles_by_pk(user_id: uuid!): user_profiles
  """
  insert a single row into the table: "auth.providers"
  """
  insertAuthProvider(
    """the row to be inserted"""
    object: authProviders_insert_input!
    """upsert condition"""
    on_conflict: authProviders_on_conflict
  ): authProviders
  """
  insert a single row into the table: "auth.provider_requests"
  """
  insertAuthProviderRequest(
    """the row to be inserted"""
    object: authProviderRequests_insert_input!
    """upsert condition"""
    on_conflict: authProviderRequests_on_conflict
  ): authProviderRequests
  """
  insert data into the table: "auth.provider_requests"
  """
  insertAuthProviderRequests(
    """the rows to be inserted"""
    objects: [authProviderRequests_insert_input!]!
    """upsert condition"""
    on_conflict: authProviderRequests_on_conflict
  ): authProviderRequests_mutation_response
  """
  insert data into the table: "auth.providers"
  """
  insertAuthProviders(
    """the rows to be inserted"""
    objects: [authProviders_insert_input!]!
    """upsert condition"""
    on_conflict: authProviders_on_conflict
  ): authProviders_mutation_response
  """
  insert a single row into the table: "auth.refresh_tokens"
  """
  insertAuthRefreshToken(
    """the row to be inserted"""
    object: authRefreshTokens_insert_input!
    """upsert condition"""
    on_conflict: authRefreshTokens_on_conflict
  ): authRefreshTokens
  """
  insert a single row into the table: "auth.refresh_token_types"
  """
  insertAuthRefreshTokenType(
    """the row to be inserted"""
    object: authRefreshTokenTypes_insert_input!
    """upsert condition"""
    on_conflict: authRefreshTokenTypes_on_conflict
  ): authRefreshTokenTypes
  """
  insert data into the table: "auth.refresh_token_types"
  """
  insertAuthRefreshTokenTypes(
    """the rows to be inserted"""
    objects: [authRefreshTokenTypes_insert_input!]!
    """upsert condition"""
    on_conflict: authRefreshTokenTypes_on_conflict
  ): authRefreshTokenTypes_mutation_response
  """
  insert data into the table: "auth.refresh_tokens"
  """
  insertAuthRefreshTokens(
    """the rows to be inserted"""
    objects: [authRefreshTokens_insert_input!]!
    """upsert condition"""
    on_conflict: authRefreshTokens_on_conflict
  ): authRefreshTokens_mutation_response
  """
  insert a single row into the table: "auth.roles"
  """
  insertAuthRole(
    """the row to be inserted"""
    object: authRoles_insert_input!
    """upsert condition"""
    on_conflict: authRoles_on_conflict
  ): authRoles
  """
  insert data into the table: "auth.roles"
  """
  insertAuthRoles(
    """the rows to be inserted"""
    objects: [authRoles_insert_input!]!
    """upsert condition"""
    on_conflict: authRoles_on_conflict
  ): authRoles_mutation_response
  """
  insert a single row into the table: "auth.user_providers"
  """
  insertAuthUserProvider(
    """the row to be inserted"""
    object: authUserProviders_insert_input!
    """upsert condition"""
    on_conflict: authUserProviders_on_conflict
  ): authUserProviders
  """
  insert data into the table: "auth.user_providers"
  """
  insertAuthUserProviders(
    """the rows to be inserted"""
    objects: [authUserProviders_insert_input!]!
    """upsert condition"""
    on_conflict: authUserProviders_on_conflict
  ): authUserProviders_mutation_response
  """
  insert a single row into the table: "auth.user_roles"
  """
  insertAuthUserRole(
    """the row to be inserted"""
    object: authUserRoles_insert_input!
    """upsert condition"""
    on_conflict: authUserRoles_on_conflict
  ): authUserRoles
  """
  insert data into the table: "auth.user_roles"
  """
  insertAuthUserRoles(
    """the rows to be inserted"""
    objects: [authUserRoles_insert_input!]!
    """upsert condition"""
    on_conflict: authUserRoles_on_conflict
  ): authUserRoles_mutation_response
  """
  insert a single row into the table: "auth.user_security_keys"
  """
  insertAuthUserSecurityKey(
    """the row to be inserted"""
    object: authUserSecurityKeys_insert_input!
    """upsert condition"""
    on_conflict: authUserSecurityKeys_on_conflict
  ): authUserSecurityKeys
  """
  insert data into the table: "auth.user_security_keys"
  """
  insertAuthUserSecurityKeys(
    """the rows to be inserted"""
    objects: [authUserSecurityKeys_insert_input!]!
    """upsert condition"""
    on_conflict: authUserSecurityKeys_on_conflict
  ): authUserSecurityKeys_mutation_response
  """
  insert a single row into the table: "storage.buckets"
  """
  insertBucket(
    """the row to be inserted"""
    object: buckets_insert_input!
    """upsert condition"""
    on_conflict: buckets_on_conflict
  ): buckets
  """
  insert data into the table: "storage.buckets"
  """
  insertBuckets(
    """the rows to be inserted"""
    objects: [buckets_insert_input!]!
    """upsert condition"""
    on_conflict: buckets_on_conflict
  ): buckets_mutation_response
  """
  insert a single row into the table: "storage.files"
  """
  insertFile(
    """the row to be inserted"""
    object: files_insert_input!
    """upsert condition"""
    on_conflict: files_on_conflict
  ): files
  """
  insert data into the table: "storage.files"
  """
  insertFiles(
    """the rows to be inserted"""
    objects: [files_insert_input!]!
    """upsert condition"""
    on_conflict: files_on_conflict
  ): files_mutation_response
  """
  insert a single row into the table: "auth.users"
  """
  insertUser(
    """the row to be inserted"""
    object: users_insert_input!
    """upsert condition"""
    on_conflict: users_on_conflict
  ): users
  """
  insert data into the table: "auth.users"
  """
  insertUsers(
    """the rows to be inserted"""
    objects: [users_insert_input!]!
    """upsert condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response
  """
  insert a single row into the table: "storage.virus"
  """
  insertVirus(
    """the row to be inserted"""
    object: virus_insert_input!
    """upsert condition"""
    on_conflict: virus_on_conflict
  ): virus
  """
  insert data into the table: "storage.virus"
  """
  insertViruses(
    """the rows to be inserted"""
    objects: [virus_insert_input!]!
    """upsert condition"""
    on_conflict: virus_on_conflict
  ): virus_mutation_response
  """
  insert data into the table: "blog_comment_helpful"
  """
  insert_blog_comment_helpful(
    """the rows to be inserted"""
    objects: [blog_comment_helpful_insert_input!]!
    """upsert condition"""
    on_conflict: blog_comment_helpful_on_conflict
  ): blog_comment_helpful_mutation_response
  """
  insert a single row into the table: "blog_comment_helpful"
  """
  insert_blog_comment_helpful_one(
    """the row to be inserted"""
    object: blog_comment_helpful_insert_input!
    """upsert condition"""
    on_conflict: blog_comment_helpful_on_conflict
  ): blog_comment_helpful
  """
  insert data into the table: "blog_comment_reports"
  """
  insert_blog_comment_reports(
    """the rows to be inserted"""
    objects: [blog_comment_reports_insert_input!]!
    """upsert condition"""
    on_conflict: blog_comment_reports_on_conflict
  ): blog_comment_reports_mutation_response
  """
  insert a single row into the table: "blog_comment_reports"
  """
  insert_blog_comment_reports_one(
    """the row to be inserted"""
    object: blog_comment_reports_insert_input!
    """upsert condition"""
    on_conflict: blog_comment_reports_on_conflict
  ): blog_comment_reports
  """
  insert data into the table: "blog_comments"
  """
  insert_blog_comments(
    """the rows to be inserted"""
    objects: [blog_comments_insert_input!]!
    """upsert condition"""
    on_conflict: blog_comments_on_conflict
  ): blog_comments_mutation_response
  """
  insert a single row into the table: "blog_comments"
  """
  insert_blog_comments_one(
    """the row to be inserted"""
    object: blog_comments_insert_input!
    """upsert condition"""
    on_conflict: blog_comments_on_conflict
  ): blog_comments
  """
  insert data into the table: "comment_likes"
  """
  insert_comment_likes(
    """the rows to be inserted"""
    objects: [comment_likes_insert_input!]!
    """upsert condition"""
    on_conflict: comment_likes_on_conflict
  ): comment_likes_mutation_response
  """
  insert a single row into the table: "comment_likes"
  """
  insert_comment_likes_one(
    """the row to be inserted"""
    object: comment_likes_insert_input!
    """upsert condition"""
    on_conflict: comment_likes_on_conflict
  ): comment_likes
  """
  insert data into the table: "contribution_bookmarks"
  """
  insert_contribution_bookmarks(
    """the rows to be inserted"""
    objects: [contribution_bookmarks_insert_input!]!
    """upsert condition"""
    on_conflict: contribution_bookmarks_on_conflict
  ): contribution_bookmarks_mutation_response
  """
  insert a single row into the table: "contribution_bookmarks"
  """
  insert_contribution_bookmarks_one(
    """the row to be inserted"""
    object: contribution_bookmarks_insert_input!
    """upsert condition"""
    on_conflict: contribution_bookmarks_on_conflict
  ): contribution_bookmarks
  """
  insert data into the table: "contribution_comments"
  """
  insert_contribution_comments(
    """the rows to be inserted"""
    objects: [contribution_comments_insert_input!]!
    """upsert condition"""
    on_conflict: contribution_comments_on_conflict
  ): contribution_comments_mutation_response
  """
  insert a single row into the table: "contribution_comments"
  """
  insert_contribution_comments_one(
    """the row to be inserted"""
    object: contribution_comments_insert_input!
    """upsert condition"""
    on_conflict: contribution_comments_on_conflict
  ): contribution_comments
  """
  insert data into the table: "contribution_likes"
  """
  insert_contribution_likes(
    """the rows to be inserted"""
    objects: [contribution_likes_insert_input!]!
    """upsert condition"""
    on_conflict: contribution_likes_on_conflict
  ): contribution_likes_mutation_response
  """
  insert a single row into the table: "contribution_likes"
  """
  insert_contribution_likes_one(
    """the row to be inserted"""
    object: contribution_likes_insert_input!
    """upsert condition"""
    on_conflict: contribution_likes_on_conflict
  ): contribution_likes
  """
  insert data into the table: "contribution_reactions"
  """
  insert_contribution_reactions(
    """the rows to be inserted"""
    objects: [contribution_reactions_insert_input!]!
    """upsert condition"""
    on_conflict: contribution_reactions_on_conflict
  ): contribution_reactions_mutation_response
  """
  insert a single row into the table: "contribution_reactions"
  """
  insert_contribution_reactions_one(
    """the row to be inserted"""
    object: contribution_reactions_insert_input!
    """upsert condition"""
    on_conflict: contribution_reactions_on_conflict
  ): contribution_reactions
  """
  insert data into the table: "contribution_reports"
  """
  insert_contribution_reports(
    """the rows to be inserted"""
    objects: [contribution_reports_insert_input!]!
    """upsert condition"""
    on_conflict: contribution_reports_on_conflict
  ): contribution_reports_mutation_response
  """
  insert a single row into the table: "contribution_reports"
  """
  insert_contribution_reports_one(
    """the row to be inserted"""
    object: contribution_reports_insert_input!
    """upsert condition"""
    on_conflict: contribution_reports_on_conflict
  ): contribution_reports
  """
  insert data into the table: "contribution_types"
  """
  insert_contribution_types(
    """the rows to be inserted"""
    objects: [contribution_types_insert_input!]!
    """upsert condition"""
    on_conflict: contribution_types_on_conflict
  ): contribution_types_mutation_response
  """
  insert a single row into the table: "contribution_types"
  """
  insert_contribution_types_one(
    """the row to be inserted"""
    object: contribution_types_insert_input!
    """upsert condition"""
    on_conflict: contribution_types_on_conflict
  ): contribution_types
  """
  insert data into the table: "contributions"
  """
  insert_contributions(
    """the rows to be inserted"""
    objects: [contributions_insert_input!]!
    """upsert condition"""
    on_conflict: contributions_on_conflict
  ): contributions_mutation_response
  """
  insert a single row into the table: "contributions"
  """
  insert_contributions_one(
    """the row to be inserted"""
    object: contributions_insert_input!
    """upsert condition"""
    on_conflict: contributions_on_conflict
  ): contributions
  """
  insert data into the table: "message_typing"
  """
  insert_message_typing(
    """the rows to be inserted"""
    objects: [message_typing_insert_input!]!
    """upsert condition"""
    on_conflict: message_typing_on_conflict
  ): message_typing_mutation_response
  """
  insert a single row into the table: "message_typing"
  """
  insert_message_typing_one(
    """the row to be inserted"""
    object: message_typing_insert_input!
    """upsert condition"""
    on_conflict: message_typing_on_conflict
  ): message_typing
  """
  insert data into the table: "messages"
  """
  insert_messages(
    """the rows to be inserted"""
    objects: [messages_insert_input!]!
    """upsert condition"""
    on_conflict: messages_on_conflict
  ): messages_mutation_response
  """
  insert a single row into the table: "messages"
  """
  insert_messages_one(
    """the row to be inserted"""
    object: messages_insert_input!
    """upsert condition"""
    on_conflict: messages_on_conflict
  ): messages
  """
  insert data into the table: "post_bookmarks"
  """
  insert_post_bookmarks(
    """the rows to be inserted"""
    objects: [post_bookmarks_insert_input!]!
    """upsert condition"""
    on_conflict: post_bookmarks_on_conflict
  ): post_bookmarks_mutation_response
  """
  insert a single row into the table: "post_bookmarks"
  """
  insert_post_bookmarks_one(
    """the row to be inserted"""
    object: post_bookmarks_insert_input!
    """upsert condition"""
    on_conflict: post_bookmarks_on_conflict
  ): post_bookmarks
  """
  insert data into the table: "post_comments"
  """
  insert_post_comments(
    """the rows to be inserted"""
    objects: [post_comments_insert_input!]!
    """upsert condition"""
    on_conflict: post_comments_on_conflict
  ): post_comments_mutation_response
  """
  insert a single row into the table: "post_comments"
  """
  insert_post_comments_one(
    """the row to be inserted"""
    object: post_comments_insert_input!
    """upsert condition"""
    on_conflict: post_comments_on_conflict
  ): post_comments
  """
  insert data into the table: "post_likes"
  """
  insert_post_likes(
    """the rows to be inserted"""
    objects: [post_likes_insert_input!]!
    """upsert condition"""
    on_conflict: post_likes_on_conflict
  ): post_likes_mutation_response
  """
  insert a single row into the table: "post_likes"
  """
  insert_post_likes_one(
    """the row to be inserted"""
    object: post_likes_insert_input!
    """upsert condition"""
    on_conflict: post_likes_on_conflict
  ): post_likes
  """
  insert data into the table: "post_reports"
  """
  insert_post_reports(
    """the rows to be inserted"""
    objects: [post_reports_insert_input!]!
    """upsert condition"""
    on_conflict: post_reports_on_conflict
  ): post_reports_mutation_response
  """
  insert a single row into the table: "post_reports"
  """
  insert_post_reports_one(
    """the row to be inserted"""
    object: post_reports_insert_input!
    """upsert condition"""
    on_conflict: post_reports_on_conflict
  ): post_reports
  """
  insert data into the table: "posts"
  """
  insert_posts(
    """the rows to be inserted"""
    objects: [posts_insert_input!]!
    """upsert condition"""
    on_conflict: posts_on_conflict
  ): posts_mutation_response
  """
  insert a single row into the table: "posts"
  """
  insert_posts_one(
    """the row to be inserted"""
    object: posts_insert_input!
    """upsert condition"""
    on_conflict: posts_on_conflict
  ): posts
  """
  insert data into the table: "reaction_types"
  """
  insert_reaction_types(
    """the rows to be inserted"""
    objects: [reaction_types_insert_input!]!
    """upsert condition"""
    on_conflict: reaction_types_on_conflict
  ): reaction_types_mutation_response
  """
  insert a single row into the table: "reaction_types"
  """
  insert_reaction_types_one(
    """the row to be inserted"""
    object: reaction_types_insert_input!
    """upsert condition"""
    on_conflict: reaction_types_on_conflict
  ): reaction_types
  """
  insert data into the table: "user_blocks"
  """
  insert_user_blocks(
    """the rows to be inserted"""
    objects: [user_blocks_insert_input!]!
    """upsert condition"""
    on_conflict: user_blocks_on_conflict
  ): user_blocks_mutation_response
  """
  insert a single row into the table: "user_blocks"
  """
  insert_user_blocks_one(
    """the row to be inserted"""
    object: user_blocks_insert_input!
    """upsert condition"""
    on_conflict: user_blocks_on_conflict
  ): user_blocks
  """
  insert data into the table: "user_preferences"
  """
  insert_user_preferences(
    """the rows to be inserted"""
    objects: [user_preferences_insert_input!]!
    """upsert condition"""
    on_conflict: user_preferences_on_conflict
  ): user_preferences_mutation_response
  """
  insert a single row into the table: "user_preferences"
  """
  insert_user_preferences_one(
    """the row to be inserted"""
    object: user_preferences_insert_input!
    """upsert condition"""
    on_conflict: user_preferences_on_conflict
  ): user_preferences
  """
  insert data into the table: "user_profiles"
  """
  insert_user_profiles(
    """the rows to be inserted"""
    objects: [user_profiles_insert_input!]!
    """upsert condition"""
    on_conflict: user_profiles_on_conflict
  ): user_profiles_mutation_response
  """
  insert a single row into the table: "user_profiles"
  """
  insert_user_profiles_one(
    """the row to be inserted"""
    object: user_profiles_insert_input!
    """upsert condition"""
    on_conflict: user_profiles_on_conflict
  ): user_profiles
  """
  update single row of the table: "auth.providers"
  """
  updateAuthProvider(
    """sets the columns of the filtered rows to the given values"""
    _set: authProviders_set_input
    pk_columns: authProviders_pk_columns_input!
  ): authProviders
  """
  update single row of the table: "auth.provider_requests"
  """
  updateAuthProviderRequest(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: authProviderRequests_append_input
    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: authProviderRequests_delete_at_path_input
    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: authProviderRequests_delete_elem_input
    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: authProviderRequests_delete_key_input
    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: authProviderRequests_prepend_input
    """sets the columns of the filtered rows to the given values"""
    _set: authProviderRequests_set_input
    pk_columns: authProviderRequests_pk_columns_input!
  ): authProviderRequests
  """
  update data of the table: "auth.provider_requests"
  """
  updateAuthProviderRequests(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: authProviderRequests_append_input
    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: authProviderRequests_delete_at_path_input
    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: authProviderRequests_delete_elem_input
    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: authProviderRequests_delete_key_input
    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: authProviderRequests_prepend_input
    """sets the columns of the filtered rows to the given values"""
    _set: authProviderRequests_set_input
    """filter the rows which have to be updated"""
    where: authProviderRequests_bool_exp!
  ): authProviderRequests_mutation_response
  """
  update data of the table: "auth.providers"
  """
  updateAuthProviders(
    """sets the columns of the filtered rows to the given values"""
    _set: authProviders_set_input
    """filter the rows which have to be updated"""
    where: authProviders_bool_exp!
  ): authProviders_mutation_response
  """
  update single row of the table: "auth.refresh_tokens"
  """
  updateAuthRefreshToken(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: authRefreshTokens_append_input
    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: authRefreshTokens_delete_at_path_input
    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: authRefreshTokens_delete_elem_input
    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: authRefreshTokens_delete_key_input
    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: authRefreshTokens_prepend_input
    """sets the columns of the filtered rows to the given values"""
    _set: authRefreshTokens_set_input
    pk_columns: authRefreshTokens_pk_columns_input!
  ): authRefreshTokens
  """
  update single row of the table: "auth.refresh_token_types"
  """
  updateAuthRefreshTokenType(
    """sets the columns of the filtered rows to the given values"""
    _set: authRefreshTokenTypes_set_input
    pk_columns: authRefreshTokenTypes_pk_columns_input!
  ): authRefreshTokenTypes
  """
  update data of the table: "auth.refresh_token_types"
  """
  updateAuthRefreshTokenTypes(
    """sets the columns of the filtered rows to the given values"""
    _set: authRefreshTokenTypes_set_input
    """filter the rows which have to be updated"""
    where: authRefreshTokenTypes_bool_exp!
  ): authRefreshTokenTypes_mutation_response
  """
  update data of the table: "auth.refresh_tokens"
  """
  updateAuthRefreshTokens(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: authRefreshTokens_append_input
    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: authRefreshTokens_delete_at_path_input
    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: authRefreshTokens_delete_elem_input
    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: authRefreshTokens_delete_key_input
    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: authRefreshTokens_prepend_input
    """sets the columns of the filtered rows to the given values"""
    _set: authRefreshTokens_set_input
    """filter the rows which have to be updated"""
    where: authRefreshTokens_bool_exp!
  ): authRefreshTokens_mutation_response
  """
  update single row of the table: "auth.roles"
  """
  updateAuthRole(
    """sets the columns of the filtered rows to the given values"""
    _set: authRoles_set_input
    pk_columns: authRoles_pk_columns_input!
  ): authRoles
  """
  update data of the table: "auth.roles"
  """
  updateAuthRoles(
    """sets the columns of the filtered rows to the given values"""
    _set: authRoles_set_input
    """filter the rows which have to be updated"""
    where: authRoles_bool_exp!
  ): authRoles_mutation_response
  """
  update single row of the table: "auth.user_providers"
  """
  updateAuthUserProvider(
    """sets the columns of the filtered rows to the given values"""
    _set: authUserProviders_set_input
    pk_columns: authUserProviders_pk_columns_input!
  ): authUserProviders
  """
  update data of the table: "auth.user_providers"
  """
  updateAuthUserProviders(
    """sets the columns of the filtered rows to the given values"""
    _set: authUserProviders_set_input
    """filter the rows which have to be updated"""
    where: authUserProviders_bool_exp!
  ): authUserProviders_mutation_response
  """
  update single row of the table: "auth.user_roles"
  """
  updateAuthUserRole(
    """sets the columns of the filtered rows to the given values"""
    _set: authUserRoles_set_input
    pk_columns: authUserRoles_pk_columns_input!
  ): authUserRoles
  """
  update data of the table: "auth.user_roles"
  """
  updateAuthUserRoles(
    """sets the columns of the filtered rows to the given values"""
    _set: authUserRoles_set_input
    """filter the rows which have to be updated"""
    where: authUserRoles_bool_exp!
  ): authUserRoles_mutation_response
  """
  update single row of the table: "auth.user_security_keys"
  """
  updateAuthUserSecurityKey(
    """increments the numeric columns with given value of the filtered values"""
    _inc: authUserSecurityKeys_inc_input
    """sets the columns of the filtered rows to the given values"""
    _set: authUserSecurityKeys_set_input
    pk_columns: authUserSecurityKeys_pk_columns_input!
  ): authUserSecurityKeys
  """
  update data of the table: "auth.user_security_keys"
  """
  updateAuthUserSecurityKeys(
    """increments the numeric columns with given value of the filtered values"""
    _inc: authUserSecurityKeys_inc_input
    """sets the columns of the filtered rows to the given values"""
    _set: authUserSecurityKeys_set_input
    """filter the rows which have to be updated"""
    where: authUserSecurityKeys_bool_exp!
  ): authUserSecurityKeys_mutation_response
  """
  update single row of the table: "storage.buckets"
  """
  updateBucket(
    """increments the numeric columns with given value of the filtered values"""
    _inc: buckets_inc_input
    """sets the columns of the filtered rows to the given values"""
    _set: buckets_set_input
    pk_columns: buckets_pk_columns_input!
  ): buckets
  """
  update data of the table: "storage.buckets"
  """
  updateBuckets(
    """increments the numeric columns with given value of the filtered values"""
    _inc: buckets_inc_input
    """sets the columns of the filtered rows to the given values"""
    _set: buckets_set_input
    """filter the rows which have to be updated"""
    where: buckets_bool_exp!
  ): buckets_mutation_response
  """
  update single row of the table: "storage.files"
  """
  updateFile(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: files_append_input
    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: files_delete_at_path_input
    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: files_delete_elem_input
    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: files_delete_key_input
    """increments the numeric columns with given value of the filtered values"""
    _inc: files_inc_input
    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: files_prepend_input
    """sets the columns of the filtered rows to the given values"""
    _set: files_set_input
    pk_columns: files_pk_columns_input!
  ): files
  """
  update data of the table: "storage.files"
  """
  updateFiles(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: files_append_input
    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: files_delete_at_path_input
    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: files_delete_elem_input
    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: files_delete_key_input
    """increments the numeric columns with given value of the filtered values"""
    _inc: files_inc_input
    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: files_prepend_input
    """sets the columns of the filtered rows to the given values"""
    _set: files_set_input
    """filter the rows which have to be updated"""
    where: files_bool_exp!
  ): files_mutation_response
  """
  update single row of the table: "auth.users"
  """
  updateUser(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: users_append_input
    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: users_delete_at_path_input
    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: users_delete_elem_input
    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: users_delete_key_input
    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: users_prepend_input
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
  """
  update data of the table: "auth.users"
  """
  updateUsers(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: users_append_input
    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: users_delete_at_path_input
    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: users_delete_elem_input
    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: users_delete_key_input
    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: users_prepend_input
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response
  """
  update single row of the table: "storage.virus"
  """
  updateVirus(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: virus_append_input
    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: virus_delete_at_path_input
    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: virus_delete_elem_input
    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: virus_delete_key_input
    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: virus_prepend_input
    """sets the columns of the filtered rows to the given values"""
    _set: virus_set_input
    pk_columns: virus_pk_columns_input!
  ): virus
  """
  update data of the table: "storage.virus"
  """
  updateViruses(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: virus_append_input
    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: virus_delete_at_path_input
    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: virus_delete_elem_input
    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: virus_delete_key_input
    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: virus_prepend_input
    """sets the columns of the filtered rows to the given values"""
    _set: virus_set_input
    """filter the rows which have to be updated"""
    where: virus_bool_exp!
  ): virus_mutation_response
  """
  update multiples rows of table: "auth.provider_requests"
  """
  update_authProviderRequests_many(
    """updates to execute, in order"""
    updates: [authProviderRequests_updates!]!
  ): [authProviderRequests_mutation_response]
  """
  update multiples rows of table: "auth.providers"
  """
  update_authProviders_many(
    """updates to execute, in order"""
    updates: [authProviders_updates!]!
  ): [authProviders_mutation_response]
  """
  update multiples rows of table: "auth.refresh_token_types"
  """
  update_authRefreshTokenTypes_many(
    """updates to execute, in order"""
    updates: [authRefreshTokenTypes_updates!]!
  ): [authRefreshTokenTypes_mutation_response]
  """
  update multiples rows of table: "auth.refresh_tokens"
  """
  update_authRefreshTokens_many(
    """updates to execute, in order"""
    updates: [authRefreshTokens_updates!]!
  ): [authRefreshTokens_mutation_response]
  """
  update multiples rows of table: "auth.roles"
  """
  update_authRoles_many(
    """updates to execute, in order"""
    updates: [authRoles_updates!]!
  ): [authRoles_mutation_response]
  """
  update multiples rows of table: "auth.user_providers"
  """
  update_authUserProviders_many(
    """updates to execute, in order"""
    updates: [authUserProviders_updates!]!
  ): [authUserProviders_mutation_response]
  """
  update multiples rows of table: "auth.user_roles"
  """
  update_authUserRoles_many(
    """updates to execute, in order"""
    updates: [authUserRoles_updates!]!
  ): [authUserRoles_mutation_response]
  """
  update multiples rows of table: "auth.user_security_keys"
  """
  update_authUserSecurityKeys_many(
    """updates to execute, in order"""
    updates: [authUserSecurityKeys_updates!]!
  ): [authUserSecurityKeys_mutation_response]
  """
  update data of the table: "blog_comment_helpful"
  """
  update_blog_comment_helpful(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_comment_helpful_set_input
    """filter the rows which have to be updated"""
    where: blog_comment_helpful_bool_exp!
  ): blog_comment_helpful_mutation_response
  """
  update single row of the table: "blog_comment_helpful"
  """
  update_blog_comment_helpful_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_comment_helpful_set_input
    pk_columns: blog_comment_helpful_pk_columns_input!
  ): blog_comment_helpful
  """
  update multiples rows of table: "blog_comment_helpful"
  """
  update_blog_comment_helpful_many(
    """updates to execute, in order"""
    updates: [blog_comment_helpful_updates!]!
  ): [blog_comment_helpful_mutation_response]
  """
  update data of the table: "blog_comment_reports"
  """
  update_blog_comment_reports(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_comment_reports_set_input
    """filter the rows which have to be updated"""
    where: blog_comment_reports_bool_exp!
  ): blog_comment_reports_mutation_response
  """
  update single row of the table: "blog_comment_reports"
  """
  update_blog_comment_reports_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: blog_comment_reports_set_input
    pk_columns: blog_comment_reports_pk_columns_input!
  ): blog_comment_reports
  """
  update multiples rows of table: "blog_comment_reports"
  """
  update_blog_comment_reports_many(
    """updates to execute, in order"""
    updates: [blog_comment_reports_updates!]!
  ): [blog_comment_reports_mutation_response]
  """
  update data of the table: "blog_comments"
  """
  update_blog_comments(
    """increments the numeric columns with given value of the filtered values"""
    _inc: blog_comments_inc_input
    """sets the columns of the filtered rows to the given values"""
    _set: blog_comments_set_input
    """filter the rows which have to be updated"""
    where: blog_comments_bool_exp!
  ): blog_comments_mutation_response
  """
  update single row of the table: "blog_comments"
  """
  update_blog_comments_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: blog_comments_inc_input
    """sets the columns of the filtered rows to the given values"""
    _set: blog_comments_set_input
    pk_columns: blog_comments_pk_columns_input!
  ): blog_comments
  """
  update multiples rows of table: "blog_comments"
  """
  update_blog_comments_many(
    """updates to execute, in order"""
    updates: [blog_comments_updates!]!
  ): [blog_comments_mutation_response]
  """
  update multiples rows of table: "storage.buckets"
  """
  update_buckets_many(
    """updates to execute, in order"""
    updates: [buckets_updates!]!
  ): [buckets_mutation_response]
  """
  update data of the table: "comment_likes"
  """
  update_comment_likes(
    """sets the columns of the filtered rows to the given values"""
    _set: comment_likes_set_input
    """filter the rows which have to be updated"""
    where: comment_likes_bool_exp!
  ): comment_likes_mutation_response
  """
  update single row of the table: "comment_likes"
  """
  update_comment_likes_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: comment_likes_set_input
    pk_columns: comment_likes_pk_columns_input!
  ): comment_likes
  """
  update multiples rows of table: "comment_likes"
  """
  update_comment_likes_many(
    """updates to execute, in order"""
    updates: [comment_likes_updates!]!
  ): [comment_likes_mutation_response]
  """
  update data of the table: "contribution_bookmarks"
  """
  update_contribution_bookmarks(
    """sets the columns of the filtered rows to the given values"""
    _set: contribution_bookmarks_set_input
    """filter the rows which have to be updated"""
    where: contribution_bookmarks_bool_exp!
  ): contribution_bookmarks_mutation_response
  """
  update single row of the table: "contribution_bookmarks"
  """
  update_contribution_bookmarks_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: contribution_bookmarks_set_input
    pk_columns: contribution_bookmarks_pk_columns_input!
  ): contribution_bookmarks
  """
  update multiples rows of table: "contribution_bookmarks"
  """
  update_contribution_bookmarks_many(
    """updates to execute, in order"""
    updates: [contribution_bookmarks_updates!]!
  ): [contribution_bookmarks_mutation_response]
  """
  update data of the table: "contribution_comments"
  """
  update_contribution_comments(
    """increments the numeric columns with given value of the filtered values"""
    _inc: contribution_comments_inc_input
    """sets the columns of the filtered rows to the given values"""
    _set: contribution_comments_set_input
    """filter the rows which have to be updated"""
    where: contribution_comments_bool_exp!
  ): contribution_comments_mutation_response
  """
  update single row of the table: "contribution_comments"
  """
  update_contribution_comments_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: contribution_comments_inc_input
    """sets the columns of the filtered rows to the given values"""
    _set: contribution_comments_set_input
    pk_columns: contribution_comments_pk_columns_input!
  ): contribution_comments
  """
  update multiples rows of table: "contribution_comments"
  """
  update_contribution_comments_many(
    """updates to execute, in order"""
    updates: [contribution_comments_updates!]!
  ): [contribution_comments_mutation_response]
  """
  update data of the table: "contribution_likes"
  """
  update_contribution_likes(
    """sets the columns of the filtered rows to the given values"""
    _set: contribution_likes_set_input
    """filter the rows which have to be updated"""
    where: contribution_likes_bool_exp!
  ): contribution_likes_mutation_response
  """
  update single row of the table: "contribution_likes"
  """
  update_contribution_likes_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: contribution_likes_set_input
    pk_columns: contribution_likes_pk_columns_input!
  ): contribution_likes
  """
  update multiples rows of table: "contribution_likes"
  """
  update_contribution_likes_many(
    """updates to execute, in order"""
    updates: [contribution_likes_updates!]!
  ): [contribution_likes_mutation_response]
  """
  update data of the table: "contribution_reactions"
  """
  update_contribution_reactions(
    """sets the columns of the filtered rows to the given values"""
    _set: contribution_reactions_set_input
    """filter the rows which have to be updated"""
    where: contribution_reactions_bool_exp!
  ): contribution_reactions_mutation_response
  """
  update single row of the table: "contribution_reactions"
  """
  update_contribution_reactions_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: contribution_reactions_set_input
    pk_columns: contribution_reactions_pk_columns_input!
  ): contribution_reactions
  """
  update multiples rows of table: "contribution_reactions"
  """
  update_contribution_reactions_many(
    """updates to execute, in order"""
    updates: [contribution_reactions_updates!]!
  ): [contribution_reactions_mutation_response]
  """
  update data of the table: "contribution_reports"
  """
  update_contribution_reports(
    """sets the columns of the filtered rows to the given values"""
    _set: contribution_reports_set_input
    """filter the rows which have to be updated"""
    where: contribution_reports_bool_exp!
  ): contribution_reports_mutation_response
  """
  update single row of the table: "contribution_reports"
  """
  update_contribution_reports_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: contribution_reports_set_input
    pk_columns: contribution_reports_pk_columns_input!
  ): contribution_reports
  """
  update multiples rows of table: "contribution_reports"
  """
  update_contribution_reports_many(
    """updates to execute, in order"""
    updates: [contribution_reports_updates!]!
  ): [contribution_reports_mutation_response]
  """
  update data of the table: "contribution_types"
  """
  update_contribution_types(
    """sets the columns of the filtered rows to the given values"""
    _set: contribution_types_set_input
    """filter the rows which have to be updated"""
    where: contribution_types_bool_exp!
  ): contribution_types_mutation_response
  """
  update single row of the table: "contribution_types"
  """
  update_contribution_types_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: contribution_types_set_input
    pk_columns: contribution_types_pk_columns_input!
  ): contribution_types
  """
  update multiples rows of table: "contribution_types"
  """
  update_contribution_types_many(
    """updates to execute, in order"""
    updates: [contribution_types_updates!]!
  ): [contribution_types_mutation_response]
  """
  update data of the table: "contributions"
  """
  update_contributions(
    """increments the numeric columns with given value of the filtered values"""
    _inc: contributions_inc_input
    """sets the columns of the filtered rows to the given values"""
    _set: contributions_set_input
    """filter the rows which have to be updated"""
    where: contributions_bool_exp!
  ): contributions_mutation_response
  """
  update single row of the table: "contributions"
  """
  update_contributions_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: contributions_inc_input
    """sets the columns of the filtered rows to the given values"""
    _set: contributions_set_input
    pk_columns: contributions_pk_columns_input!
  ): contributions
  """
  update multiples rows of table: "contributions"
  """
  update_contributions_many(
    """updates to execute, in order"""
    updates: [contributions_updates!]!
  ): [contributions_mutation_response]
  """
  update multiples rows of table: "storage.files"
  """
  update_files_many(
    """updates to execute, in order"""
    updates: [files_updates!]!
  ): [files_mutation_response]
  """
  update data of the table: "message_typing"
  """
  update_message_typing(
    """sets the columns of the filtered rows to the given values"""
    _set: message_typing_set_input
    """filter the rows which have to be updated"""
    where: message_typing_bool_exp!
  ): message_typing_mutation_response
  """
  update single row of the table: "message_typing"
  """
  update_message_typing_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: message_typing_set_input
    pk_columns: message_typing_pk_columns_input!
  ): message_typing
  """
  update multiples rows of table: "message_typing"
  """
  update_message_typing_many(
    """updates to execute, in order"""
    updates: [message_typing_updates!]!
  ): [message_typing_mutation_response]
  """
  update data of the table: "messages"
  """
  update_messages(
    """increments the numeric columns with given value of the filtered values"""
    _inc: messages_inc_input
    """sets the columns of the filtered rows to the given values"""
    _set: messages_set_input
    """filter the rows which have to be updated"""
    where: messages_bool_exp!
  ): messages_mutation_response
  """
  update single row of the table: "messages"
  """
  update_messages_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: messages_inc_input
    """sets the columns of the filtered rows to the given values"""
    _set: messages_set_input
    pk_columns: messages_pk_columns_input!
  ): messages
  """
  update multiples rows of table: "messages"
  """
  update_messages_many(
    """updates to execute, in order"""
    updates: [messages_updates!]!
  ): [messages_mutation_response]
  """
  update data of the table: "post_bookmarks"
  """
  update_post_bookmarks(
    """sets the columns of the filtered rows to the given values"""
    _set: post_bookmarks_set_input
    """filter the rows which have to be updated"""
    where: post_bookmarks_bool_exp!
  ): post_bookmarks_mutation_response
  """
  update single row of the table: "post_bookmarks"
  """
  update_post_bookmarks_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: post_bookmarks_set_input
    pk_columns: post_bookmarks_pk_columns_input!
  ): post_bookmarks
  """
  update multiples rows of table: "post_bookmarks"
  """
  update_post_bookmarks_many(
    """updates to execute, in order"""
    updates: [post_bookmarks_updates!]!
  ): [post_bookmarks_mutation_response]
  """
  update data of the table: "post_comments"
  """
  update_post_comments(
    """sets the columns of the filtered rows to the given values"""
    _set: post_comments_set_input
    """filter the rows which have to be updated"""
    where: post_comments_bool_exp!
  ): post_comments_mutation_response
  """
  update single row of the table: "post_comments"
  """
  update_post_comments_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: post_comments_set_input
    pk_columns: post_comments_pk_columns_input!
  ): post_comments
  """
  update multiples rows of table: "post_comments"
  """
  update_post_comments_many(
    """updates to execute, in order"""
    updates: [post_comments_updates!]!
  ): [post_comments_mutation_response]
  """
  update data of the table: "post_likes"
  """
  update_post_likes(
    """sets the columns of the filtered rows to the given values"""
    _set: post_likes_set_input
    """filter the rows which have to be updated"""
    where: post_likes_bool_exp!
  ): post_likes_mutation_response
  """
  update single row of the table: "post_likes"
  """
  update_post_likes_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: post_likes_set_input
    pk_columns: post_likes_pk_columns_input!
  ): post_likes
  """
  update multiples rows of table: "post_likes"
  """
  update_post_likes_many(
    """updates to execute, in order"""
    updates: [post_likes_updates!]!
  ): [post_likes_mutation_response]
  """
  update data of the table: "post_reports"
  """
  update_post_reports(
    """sets the columns of the filtered rows to the given values"""
    _set: post_reports_set_input
    """filter the rows which have to be updated"""
    where: post_reports_bool_exp!
  ): post_reports_mutation_response
  """
  update single row of the table: "post_reports"
  """
  update_post_reports_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: post_reports_set_input
    pk_columns: post_reports_pk_columns_input!
  ): post_reports
  """
  update multiples rows of table: "post_reports"
  """
  update_post_reports_many(
    """updates to execute, in order"""
    updates: [post_reports_updates!]!
  ): [post_reports_mutation_response]
  """
  update data of the table: "posts"
  """
  update_posts(
    """sets the columns of the filtered rows to the given values"""
    _set: posts_set_input
    """filter the rows which have to be updated"""
    where: posts_bool_exp!
  ): posts_mutation_response
  """
  update single row of the table: "posts"
  """
  update_posts_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: posts_set_input
    pk_columns: posts_pk_columns_input!
  ): posts
  """
  update multiples rows of table: "posts"
  """
  update_posts_many(
    """updates to execute, in order"""
    updates: [posts_updates!]!
  ): [posts_mutation_response]
  """
  update data of the table: "reaction_types"
  """
  update_reaction_types(
    """sets the columns of the filtered rows to the given values"""
    _set: reaction_types_set_input
    """filter the rows which have to be updated"""
    where: reaction_types_bool_exp!
  ): reaction_types_mutation_response
  """
  update single row of the table: "reaction_types"
  """
  update_reaction_types_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: reaction_types_set_input
    pk_columns: reaction_types_pk_columns_input!
  ): reaction_types
  """
  update multiples rows of table: "reaction_types"
  """
  update_reaction_types_many(
    """updates to execute, in order"""
    updates: [reaction_types_updates!]!
  ): [reaction_types_mutation_response]
  """
  update data of the table: "user_blocks"
  """
  update_user_blocks(
    """sets the columns of the filtered rows to the given values"""
    _set: user_blocks_set_input
    """filter the rows which have to be updated"""
    where: user_blocks_bool_exp!
  ): user_blocks_mutation_response
  """
  update single row of the table: "user_blocks"
  """
  update_user_blocks_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_blocks_set_input
    pk_columns: user_blocks_pk_columns_input!
  ): user_blocks
  """
  update multiples rows of table: "user_blocks"
  """
  update_user_blocks_many(
    """updates to execute, in order"""
    updates: [user_blocks_updates!]!
  ): [user_blocks_mutation_response]
  """
  update data of the table: "user_preferences"
  """
  update_user_preferences(
    """sets the columns of the filtered rows to the given values"""
    _set: user_preferences_set_input
    """filter the rows which have to be updated"""
    where: user_preferences_bool_exp!
  ): user_preferences_mutation_response
  """
  update single row of the table: "user_preferences"
  """
  update_user_preferences_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_preferences_set_input
    pk_columns: user_preferences_pk_columns_input!
  ): user_preferences
  """
  update multiples rows of table: "user_preferences"
  """
  update_user_preferences_many(
    """updates to execute, in order"""
    updates: [user_preferences_updates!]!
  ): [user_preferences_mutation_response]
  """
  update data of the table: "user_profiles"
  """
  update_user_profiles(
    """sets the columns of the filtered rows to the given values"""
    _set: user_profiles_set_input
    """filter the rows which have to be updated"""
    where: user_profiles_bool_exp!
  ): user_profiles_mutation_response
  """
  update single row of the table: "user_profiles"
  """
  update_user_profiles_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_profiles_set_input
    pk_columns: user_profiles_pk_columns_input!
  ): user_profiles
  """
  update multiples rows of table: "user_profiles"
  """
  update_user_profiles_many(
    """updates to execute, in order"""
    updates: [user_profiles_updates!]!
  ): [user_profiles_mutation_response]
  """
  update multiples rows of table: "auth.users"
  """
  update_users_many(
    """updates to execute, in order"""
    updates: [users_updates!]!
  ): [users_mutation_response]
  """
  update multiples rows of table: "storage.virus"
  """
  update_virus_many(
    """updates to execute, in order"""
    updates: [virus_updates!]!
  ): [virus_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc
  """in ascending order, nulls first"""
  asc_nulls_first
  """in ascending order, nulls last"""
  asc_nulls_last
  """in descending order, nulls first"""
  desc
  """in descending order, nulls first"""
  desc_nulls_first
  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "post_bookmarks"
"""
type post_bookmarks {
  created_at: timestamptz!
  """An object relationship"""
  post: posts!
  post_id: uuid!
  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "post_bookmarks"
"""
type post_bookmarks_aggregate {
  aggregate: post_bookmarks_aggregate_fields
  nodes: [post_bookmarks!]!
}

input post_bookmarks_aggregate_bool_exp {
  count: post_bookmarks_aggregate_bool_exp_count
}

input post_bookmarks_aggregate_bool_exp_count {
  arguments: [post_bookmarks_select_column!]
  distinct: Boolean
  filter: post_bookmarks_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "post_bookmarks"
"""
type post_bookmarks_aggregate_fields {
  count(columns: [post_bookmarks_select_column!], distinct: Boolean): Int!
  max: post_bookmarks_max_fields
  min: post_bookmarks_min_fields
}

"""
order by aggregate values of table "post_bookmarks"
"""
input post_bookmarks_aggregate_order_by {
  count: order_by
  max: post_bookmarks_max_order_by
  min: post_bookmarks_min_order_by
}

"""
input type for inserting array relation for remote table "post_bookmarks"
"""
input post_bookmarks_arr_rel_insert_input {
  data: [post_bookmarks_insert_input!]!
  """upsert condition"""
  on_conflict: post_bookmarks_on_conflict
}

"""
Boolean expression to filter rows from the table "post_bookmarks". All fields are combined with a logical 'AND'.
"""
input post_bookmarks_bool_exp {
  _and: [post_bookmarks_bool_exp!]
  _not: post_bookmarks_bool_exp
  _or: [post_bookmarks_bool_exp!]
  created_at: timestamptz_comparison_exp
  post: posts_bool_exp
  post_id: uuid_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "post_bookmarks"
"""
enum post_bookmarks_constraint {
  """
  unique or primary key constraint on columns "user_id", "post_id"
  """
  post_bookmarks_pkey
}

"""
input type for inserting data into table "post_bookmarks"
"""
input post_bookmarks_insert_input {
  created_at: timestamptz
  post: posts_obj_rel_insert_input
  post_id: uuid
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type post_bookmarks_max_fields {
  created_at: timestamptz
  post_id: uuid
  user_id: uuid
}

"""
order by max() on columns of table "post_bookmarks"
"""
input post_bookmarks_max_order_by {
  created_at: order_by
  post_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type post_bookmarks_min_fields {
  created_at: timestamptz
  post_id: uuid
  user_id: uuid
}

"""
order by min() on columns of table "post_bookmarks"
"""
input post_bookmarks_min_order_by {
  created_at: order_by
  post_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "post_bookmarks"
"""
type post_bookmarks_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [post_bookmarks!]!
}

"""
on_conflict condition type for table "post_bookmarks"
"""
input post_bookmarks_on_conflict {
  constraint: post_bookmarks_constraint!
  update_columns: [post_bookmarks_update_column!]! = []
  where: post_bookmarks_bool_exp
}

"""Ordering options when selecting data from "post_bookmarks"."""
input post_bookmarks_order_by {
  created_at: order_by
  post: posts_order_by
  post_id: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: post_bookmarks"""
input post_bookmarks_pk_columns_input {
  post_id: uuid!
  user_id: uuid!
}

"""
select columns of table "post_bookmarks"
"""
enum post_bookmarks_select_column {
  """column name"""
  created_at
  """column name"""
  post_id
  """column name"""
  user_id
}

"""
input type for updating data in table "post_bookmarks"
"""
input post_bookmarks_set_input {
  created_at: timestamptz
  post_id: uuid
  user_id: uuid
}

"""
Streaming cursor of the table "post_bookmarks"
"""
input post_bookmarks_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: post_bookmarks_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input post_bookmarks_stream_cursor_value_input {
  created_at: timestamptz
  post_id: uuid
  user_id: uuid
}

"""
update columns of table "post_bookmarks"
"""
enum post_bookmarks_update_column {
  """column name"""
  created_at
  """column name"""
  post_id
  """column name"""
  user_id
}

input post_bookmarks_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: post_bookmarks_set_input
  """filter the rows which have to be updated"""
  where: post_bookmarks_bool_exp!
}

"""
columns and relationships of "post_comments"
"""
type post_comments {
  """An array relationship"""
  comment_likes(
    """distinct select on columns"""
    distinct_on: [comment_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [comment_likes_order_by!]
    """filter the rows returned"""
    where: comment_likes_bool_exp
  ): [comment_likes!]!
  """An aggregate relationship"""
  comment_likes_aggregate(
    """distinct select on columns"""
    distinct_on: [comment_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [comment_likes_order_by!]
    """filter the rows returned"""
    where: comment_likes_bool_exp
  ): comment_likes_aggregate!
  content: String!
  created_at: timestamptz!
  id: uuid!
  parent_comment_id: uuid!
  """An object relationship"""
  post: posts!
  post_id: uuid!
  updated_at: timestamptz!
  user_id: uuid!
}

"""
aggregated selection of "post_comments"
"""
type post_comments_aggregate {
  aggregate: post_comments_aggregate_fields
  nodes: [post_comments!]!
}

input post_comments_aggregate_bool_exp {
  count: post_comments_aggregate_bool_exp_count
}

input post_comments_aggregate_bool_exp_count {
  arguments: [post_comments_select_column!]
  distinct: Boolean
  filter: post_comments_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "post_comments"
"""
type post_comments_aggregate_fields {
  count(columns: [post_comments_select_column!], distinct: Boolean): Int!
  max: post_comments_max_fields
  min: post_comments_min_fields
}

"""
order by aggregate values of table "post_comments"
"""
input post_comments_aggregate_order_by {
  count: order_by
  max: post_comments_max_order_by
  min: post_comments_min_order_by
}

"""
input type for inserting array relation for remote table "post_comments"
"""
input post_comments_arr_rel_insert_input {
  data: [post_comments_insert_input!]!
  """upsert condition"""
  on_conflict: post_comments_on_conflict
}

"""
Boolean expression to filter rows from the table "post_comments". All fields are combined with a logical 'AND'.
"""
input post_comments_bool_exp {
  _and: [post_comments_bool_exp!]
  _not: post_comments_bool_exp
  _or: [post_comments_bool_exp!]
  comment_likes: comment_likes_bool_exp
  comment_likes_aggregate: comment_likes_aggregate_bool_exp
  content: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  parent_comment_id: uuid_comparison_exp
  post: posts_bool_exp
  post_id: uuid_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "post_comments"
"""
enum post_comments_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  post_comments_pkey
}

"""
input type for inserting data into table "post_comments"
"""
input post_comments_insert_input {
  comment_likes: comment_likes_arr_rel_insert_input
  content: String
  created_at: timestamptz
  id: uuid
  parent_comment_id: uuid
  post: posts_obj_rel_insert_input
  post_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate max on columns"""
type post_comments_max_fields {
  content: String
  created_at: timestamptz
  id: uuid
  parent_comment_id: uuid
  post_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "post_comments"
"""
input post_comments_max_order_by {
  content: order_by
  created_at: order_by
  id: order_by
  parent_comment_id: order_by
  post_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type post_comments_min_fields {
  content: String
  created_at: timestamptz
  id: uuid
  parent_comment_id: uuid
  post_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "post_comments"
"""
input post_comments_min_order_by {
  content: order_by
  created_at: order_by
  id: order_by
  parent_comment_id: order_by
  post_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "post_comments"
"""
type post_comments_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [post_comments!]!
}

"""
input type for inserting object relation for remote table "post_comments"
"""
input post_comments_obj_rel_insert_input {
  data: post_comments_insert_input!
  """upsert condition"""
  on_conflict: post_comments_on_conflict
}

"""
on_conflict condition type for table "post_comments"
"""
input post_comments_on_conflict {
  constraint: post_comments_constraint!
  update_columns: [post_comments_update_column!]! = []
  where: post_comments_bool_exp
}

"""Ordering options when selecting data from "post_comments"."""
input post_comments_order_by {
  comment_likes_aggregate: comment_likes_aggregate_order_by
  content: order_by
  created_at: order_by
  id: order_by
  parent_comment_id: order_by
  post: posts_order_by
  post_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""primary key columns input for table: post_comments"""
input post_comments_pk_columns_input {
  id: uuid!
}

"""
select columns of table "post_comments"
"""
enum post_comments_select_column {
  """column name"""
  content
  """column name"""
  created_at
  """column name"""
  id
  """column name"""
  parent_comment_id
  """column name"""
  post_id
  """column name"""
  updated_at
  """column name"""
  user_id
}

"""
input type for updating data in table "post_comments"
"""
input post_comments_set_input {
  content: String
  created_at: timestamptz
  id: uuid
  parent_comment_id: uuid
  post_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
Streaming cursor of the table "post_comments"
"""
input post_comments_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: post_comments_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input post_comments_stream_cursor_value_input {
  content: String
  created_at: timestamptz
  id: uuid
  parent_comment_id: uuid
  post_id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
update columns of table "post_comments"
"""
enum post_comments_update_column {
  """column name"""
  content
  """column name"""
  created_at
  """column name"""
  id
  """column name"""
  parent_comment_id
  """column name"""
  post_id
  """column name"""
  updated_at
  """column name"""
  user_id
}

input post_comments_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: post_comments_set_input
  """filter the rows which have to be updated"""
  where: post_comments_bool_exp!
}

"""
columns and relationships of "post_likes"
"""
type post_likes {
  created_at: timestamptz!
  """An object relationship"""
  post: posts!
  post_id: uuid!
  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "post_likes"
"""
type post_likes_aggregate {
  aggregate: post_likes_aggregate_fields
  nodes: [post_likes!]!
}

input post_likes_aggregate_bool_exp {
  count: post_likes_aggregate_bool_exp_count
}

input post_likes_aggregate_bool_exp_count {
  arguments: [post_likes_select_column!]
  distinct: Boolean
  filter: post_likes_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "post_likes"
"""
type post_likes_aggregate_fields {
  count(columns: [post_likes_select_column!], distinct: Boolean): Int!
  max: post_likes_max_fields
  min: post_likes_min_fields
}

"""
order by aggregate values of table "post_likes"
"""
input post_likes_aggregate_order_by {
  count: order_by
  max: post_likes_max_order_by
  min: post_likes_min_order_by
}

"""
input type for inserting array relation for remote table "post_likes"
"""
input post_likes_arr_rel_insert_input {
  data: [post_likes_insert_input!]!
  """upsert condition"""
  on_conflict: post_likes_on_conflict
}

"""
Boolean expression to filter rows from the table "post_likes". All fields are combined with a logical 'AND'.
"""
input post_likes_bool_exp {
  _and: [post_likes_bool_exp!]
  _not: post_likes_bool_exp
  _or: [post_likes_bool_exp!]
  created_at: timestamptz_comparison_exp
  post: posts_bool_exp
  post_id: uuid_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "post_likes"
"""
enum post_likes_constraint {
  """
  unique or primary key constraint on columns "user_id", "post_id"
  """
  post_likes_pkey
}

"""
input type for inserting data into table "post_likes"
"""
input post_likes_insert_input {
  created_at: timestamptz
  post: posts_obj_rel_insert_input
  post_id: uuid
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type post_likes_max_fields {
  created_at: timestamptz
  post_id: uuid
  user_id: uuid
}

"""
order by max() on columns of table "post_likes"
"""
input post_likes_max_order_by {
  created_at: order_by
  post_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type post_likes_min_fields {
  created_at: timestamptz
  post_id: uuid
  user_id: uuid
}

"""
order by min() on columns of table "post_likes"
"""
input post_likes_min_order_by {
  created_at: order_by
  post_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "post_likes"
"""
type post_likes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [post_likes!]!
}

"""
on_conflict condition type for table "post_likes"
"""
input post_likes_on_conflict {
  constraint: post_likes_constraint!
  update_columns: [post_likes_update_column!]! = []
  where: post_likes_bool_exp
}

"""Ordering options when selecting data from "post_likes"."""
input post_likes_order_by {
  created_at: order_by
  post: posts_order_by
  post_id: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: post_likes"""
input post_likes_pk_columns_input {
  post_id: uuid!
  user_id: uuid!
}

"""
select columns of table "post_likes"
"""
enum post_likes_select_column {
  """column name"""
  created_at
  """column name"""
  post_id
  """column name"""
  user_id
}

"""
input type for updating data in table "post_likes"
"""
input post_likes_set_input {
  created_at: timestamptz
  post_id: uuid
  user_id: uuid
}

"""
Streaming cursor of the table "post_likes"
"""
input post_likes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: post_likes_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input post_likes_stream_cursor_value_input {
  created_at: timestamptz
  post_id: uuid
  user_id: uuid
}

"""
update columns of table "post_likes"
"""
enum post_likes_update_column {
  """column name"""
  created_at
  """column name"""
  post_id
  """column name"""
  user_id
}

input post_likes_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: post_likes_set_input
  """filter the rows which have to be updated"""
  where: post_likes_bool_exp!
}

"""
columns and relationships of "post_reports"
"""
type post_reports {
  created_at: timestamptz!
  details: String
  id: uuid!
  """An object relationship"""
  post: posts!
  post_id: uuid!
  reason: String!
  reporter_id: uuid!
  status: String!
  """An object relationship"""
  user: users!
}

"""
aggregated selection of "post_reports"
"""
type post_reports_aggregate {
  aggregate: post_reports_aggregate_fields
  nodes: [post_reports!]!
}

input post_reports_aggregate_bool_exp {
  count: post_reports_aggregate_bool_exp_count
}

input post_reports_aggregate_bool_exp_count {
  arguments: [post_reports_select_column!]
  distinct: Boolean
  filter: post_reports_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "post_reports"
"""
type post_reports_aggregate_fields {
  count(columns: [post_reports_select_column!], distinct: Boolean): Int!
  max: post_reports_max_fields
  min: post_reports_min_fields
}

"""
order by aggregate values of table "post_reports"
"""
input post_reports_aggregate_order_by {
  count: order_by
  max: post_reports_max_order_by
  min: post_reports_min_order_by
}

"""
input type for inserting array relation for remote table "post_reports"
"""
input post_reports_arr_rel_insert_input {
  data: [post_reports_insert_input!]!
  """upsert condition"""
  on_conflict: post_reports_on_conflict
}

"""
Boolean expression to filter rows from the table "post_reports". All fields are combined with a logical 'AND'.
"""
input post_reports_bool_exp {
  _and: [post_reports_bool_exp!]
  _not: post_reports_bool_exp
  _or: [post_reports_bool_exp!]
  created_at: timestamptz_comparison_exp
  details: String_comparison_exp
  id: uuid_comparison_exp
  post: posts_bool_exp
  post_id: uuid_comparison_exp
  reason: String_comparison_exp
  reporter_id: uuid_comparison_exp
  status: String_comparison_exp
  user: users_bool_exp
}

"""
unique or primary key constraints on table "post_reports"
"""
enum post_reports_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  post_reports_pkey
  """
  unique or primary key constraint on columns "post_id", "reporter_id"
  """
  post_reports_unique_per_user
}

"""
input type for inserting data into table "post_reports"
"""
input post_reports_insert_input {
  created_at: timestamptz
  details: String
  id: uuid
  post: posts_obj_rel_insert_input
  post_id: uuid
  reason: String
  reporter_id: uuid
  status: String
  user: users_obj_rel_insert_input
}

"""aggregate max on columns"""
type post_reports_max_fields {
  created_at: timestamptz
  details: String
  id: uuid
  post_id: uuid
  reason: String
  reporter_id: uuid
  status: String
}

"""
order by max() on columns of table "post_reports"
"""
input post_reports_max_order_by {
  created_at: order_by
  details: order_by
  id: order_by
  post_id: order_by
  reason: order_by
  reporter_id: order_by
  status: order_by
}

"""aggregate min on columns"""
type post_reports_min_fields {
  created_at: timestamptz
  details: String
  id: uuid
  post_id: uuid
  reason: String
  reporter_id: uuid
  status: String
}

"""
order by min() on columns of table "post_reports"
"""
input post_reports_min_order_by {
  created_at: order_by
  details: order_by
  id: order_by
  post_id: order_by
  reason: order_by
  reporter_id: order_by
  status: order_by
}

"""
response of any mutation on the table "post_reports"
"""
type post_reports_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [post_reports!]!
}

"""
on_conflict condition type for table "post_reports"
"""
input post_reports_on_conflict {
  constraint: post_reports_constraint!
  update_columns: [post_reports_update_column!]! = []
  where: post_reports_bool_exp
}

"""Ordering options when selecting data from "post_reports"."""
input post_reports_order_by {
  created_at: order_by
  details: order_by
  id: order_by
  post: posts_order_by
  post_id: order_by
  reason: order_by
  reporter_id: order_by
  status: order_by
  user: users_order_by
}

"""primary key columns input for table: post_reports"""
input post_reports_pk_columns_input {
  id: uuid!
}

"""
select columns of table "post_reports"
"""
enum post_reports_select_column {
  """column name"""
  created_at
  """column name"""
  details
  """column name"""
  id
  """column name"""
  post_id
  """column name"""
  reason
  """column name"""
  reporter_id
  """column name"""
  status
}

"""
input type for updating data in table "post_reports"
"""
input post_reports_set_input {
  created_at: timestamptz
  details: String
  id: uuid
  post_id: uuid
  reason: String
  reporter_id: uuid
  status: String
}

"""
Streaming cursor of the table "post_reports"
"""
input post_reports_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: post_reports_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input post_reports_stream_cursor_value_input {
  created_at: timestamptz
  details: String
  id: uuid
  post_id: uuid
  reason: String
  reporter_id: uuid
  status: String
}

"""
update columns of table "post_reports"
"""
enum post_reports_update_column {
  """column name"""
  created_at
  """column name"""
  details
  """column name"""
  id
  """column name"""
  post_id
  """column name"""
  reason
  """column name"""
  reporter_id
  """column name"""
  status
}

input post_reports_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: post_reports_set_input
  """filter the rows which have to be updated"""
  where: post_reports_bool_exp!
}

"""
columns and relationships of "posts"
"""
type posts {
  content: String!
  created_at: timestamptz!
  id: uuid!
  """An array relationship"""
  post_bookmarks(
    """distinct select on columns"""
    distinct_on: [post_bookmarks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_bookmarks_order_by!]
    """filter the rows returned"""
    where: post_bookmarks_bool_exp
  ): [post_bookmarks!]!
  """An aggregate relationship"""
  post_bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [post_bookmarks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_bookmarks_order_by!]
    """filter the rows returned"""
    where: post_bookmarks_bool_exp
  ): post_bookmarks_aggregate!
  """An array relationship"""
  post_comments(
    """distinct select on columns"""
    distinct_on: [post_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_comments_order_by!]
    """filter the rows returned"""
    where: post_comments_bool_exp
  ): [post_comments!]!
  """An aggregate relationship"""
  post_comments_aggregate(
    """distinct select on columns"""
    distinct_on: [post_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_comments_order_by!]
    """filter the rows returned"""
    where: post_comments_bool_exp
  ): post_comments_aggregate!
  """An array relationship"""
  post_likes(
    """distinct select on columns"""
    distinct_on: [post_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_likes_order_by!]
    """filter the rows returned"""
    where: post_likes_bool_exp
  ): [post_likes!]!
  """An aggregate relationship"""
  post_likes_aggregate(
    """distinct select on columns"""
    distinct_on: [post_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_likes_order_by!]
    """filter the rows returned"""
    where: post_likes_bool_exp
  ): post_likes_aggregate!
  updated_at: timestamptz!
  user_id: uuid!
}

"""
aggregated selection of "posts"
"""
type posts_aggregate {
  aggregate: posts_aggregate_fields
  nodes: [posts!]!
}

input posts_aggregate_bool_exp {
  count: posts_aggregate_bool_exp_count
}

input posts_aggregate_bool_exp_count {
  arguments: [posts_select_column!]
  distinct: Boolean
  filter: posts_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "posts"
"""
type posts_aggregate_fields {
  count(columns: [posts_select_column!], distinct: Boolean): Int!
  max: posts_max_fields
  min: posts_min_fields
}

"""
order by aggregate values of table "posts"
"""
input posts_aggregate_order_by {
  count: order_by
  max: posts_max_order_by
  min: posts_min_order_by
}

"""
input type for inserting array relation for remote table "posts"
"""
input posts_arr_rel_insert_input {
  data: [posts_insert_input!]!
  """upsert condition"""
  on_conflict: posts_on_conflict
}

"""
Boolean expression to filter rows from the table "posts". All fields are combined with a logical 'AND'.
"""
input posts_bool_exp {
  _and: [posts_bool_exp!]
  _not: posts_bool_exp
  _or: [posts_bool_exp!]
  content: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  post_bookmarks: post_bookmarks_bool_exp
  post_bookmarks_aggregate: post_bookmarks_aggregate_bool_exp
  post_comments: post_comments_bool_exp
  post_comments_aggregate: post_comments_aggregate_bool_exp
  post_likes: post_likes_bool_exp
  post_likes_aggregate: post_likes_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "posts"
"""
enum posts_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  posts_pkey
}

"""
input type for inserting data into table "posts"
"""
input posts_insert_input {
  content: String
  created_at: timestamptz
  id: uuid
  post_bookmarks: post_bookmarks_arr_rel_insert_input
  post_comments: post_comments_arr_rel_insert_input
  post_likes: post_likes_arr_rel_insert_input
  updated_at: timestamptz
  user_id: uuid
}

"""aggregate max on columns"""
type posts_max_fields {
  content: String
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "posts"
"""
input posts_max_order_by {
  content: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type posts_min_fields {
  content: String
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "posts"
"""
input posts_min_order_by {
  content: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "posts"
"""
type posts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [posts!]!
}

"""
input type for inserting object relation for remote table "posts"
"""
input posts_obj_rel_insert_input {
  data: posts_insert_input!
  """upsert condition"""
  on_conflict: posts_on_conflict
}

"""
on_conflict condition type for table "posts"
"""
input posts_on_conflict {
  constraint: posts_constraint!
  update_columns: [posts_update_column!]! = []
  where: posts_bool_exp
}

"""Ordering options when selecting data from "posts"."""
input posts_order_by {
  content: order_by
  created_at: order_by
  id: order_by
  post_bookmarks_aggregate: post_bookmarks_aggregate_order_by
  post_comments_aggregate: post_comments_aggregate_order_by
  post_likes_aggregate: post_likes_aggregate_order_by
  updated_at: order_by
  user_id: order_by
}

"""primary key columns input for table: posts"""
input posts_pk_columns_input {
  id: uuid!
}

"""
select columns of table "posts"
"""
enum posts_select_column {
  """column name"""
  content
  """column name"""
  created_at
  """column name"""
  id
  """column name"""
  updated_at
  """column name"""
  user_id
}

"""
input type for updating data in table "posts"
"""
input posts_set_input {
  content: String
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
Streaming cursor of the table "posts"
"""
input posts_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: posts_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input posts_stream_cursor_value_input {
  content: String
  created_at: timestamptz
  id: uuid
  updated_at: timestamptz
  user_id: uuid
}

"""
update columns of table "posts"
"""
enum posts_update_column {
  """column name"""
  content
  """column name"""
  created_at
  """column name"""
  id
  """column name"""
  updated_at
  """column name"""
  user_id
}

input posts_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: posts_set_input
  """filter the rows which have to be updated"""
  where: posts_bool_exp!
}

type query_root {
  """fetch data from the table: "auth.providers" using primary key columns"""
  authProvider(id: String!): authProviders
  """
  fetch data from the table: "auth.provider_requests" using primary key columns
  """
  authProviderRequest(id: uuid!): authProviderRequests
  """
  fetch data from the table: "auth.provider_requests"
  """
  authProviderRequests(
    """distinct select on columns"""
    distinct_on: [authProviderRequests_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authProviderRequests_order_by!]
    """filter the rows returned"""
    where: authProviderRequests_bool_exp
  ): [authProviderRequests!]!
  """
  fetch aggregated fields from the table: "auth.provider_requests"
  """
  authProviderRequestsAggregate(
    """distinct select on columns"""
    distinct_on: [authProviderRequests_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authProviderRequests_order_by!]
    """filter the rows returned"""
    where: authProviderRequests_bool_exp
  ): authProviderRequests_aggregate!
  """
  fetch data from the table: "auth.providers"
  """
  authProviders(
    """distinct select on columns"""
    distinct_on: [authProviders_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authProviders_order_by!]
    """filter the rows returned"""
    where: authProviders_bool_exp
  ): [authProviders!]!
  """
  fetch aggregated fields from the table: "auth.providers"
  """
  authProvidersAggregate(
    """distinct select on columns"""
    distinct_on: [authProviders_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authProviders_order_by!]
    """filter the rows returned"""
    where: authProviders_bool_exp
  ): authProviders_aggregate!
  """
  fetch data from the table: "auth.refresh_tokens" using primary key columns
  """
  authRefreshToken(id: uuid!): authRefreshTokens
  """
  fetch data from the table: "auth.refresh_token_types" using primary key columns
  """
  authRefreshTokenType(value: String!): authRefreshTokenTypes
  """
  fetch data from the table: "auth.refresh_token_types"
  """
  authRefreshTokenTypes(
    """distinct select on columns"""
    distinct_on: [authRefreshTokenTypes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authRefreshTokenTypes_order_by!]
    """filter the rows returned"""
    where: authRefreshTokenTypes_bool_exp
  ): [authRefreshTokenTypes!]!
  """
  fetch aggregated fields from the table: "auth.refresh_token_types"
  """
  authRefreshTokenTypesAggregate(
    """distinct select on columns"""
    distinct_on: [authRefreshTokenTypes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authRefreshTokenTypes_order_by!]
    """filter the rows returned"""
    where: authRefreshTokenTypes_bool_exp
  ): authRefreshTokenTypes_aggregate!
  """
  fetch data from the table: "auth.refresh_tokens"
  """
  authRefreshTokens(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]
    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): [authRefreshTokens!]!
  """
  fetch aggregated fields from the table: "auth.refresh_tokens"
  """
  authRefreshTokensAggregate(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]
    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): authRefreshTokens_aggregate!
  """fetch data from the table: "auth.roles" using primary key columns"""
  authRole(role: String!): authRoles
  """
  fetch data from the table: "auth.roles"
  """
  authRoles(
    """distinct select on columns"""
    distinct_on: [authRoles_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authRoles_order_by!]
    """filter the rows returned"""
    where: authRoles_bool_exp
  ): [authRoles!]!
  """
  fetch aggregated fields from the table: "auth.roles"
  """
  authRolesAggregate(
    """distinct select on columns"""
    distinct_on: [authRoles_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authRoles_order_by!]
    """filter the rows returned"""
    where: authRoles_bool_exp
  ): authRoles_aggregate!
  """
  fetch data from the table: "auth.user_providers" using primary key columns
  """
  authUserProvider(id: uuid!): authUserProviders
  """
  fetch data from the table: "auth.user_providers"
  """
  authUserProviders(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]
    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): [authUserProviders!]!
  """
  fetch aggregated fields from the table: "auth.user_providers"
  """
  authUserProvidersAggregate(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]
    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): authUserProviders_aggregate!
  """fetch data from the table: "auth.user_roles" using primary key columns"""
  authUserRole(id: uuid!): authUserRoles
  """
  fetch data from the table: "auth.user_roles"
  """
  authUserRoles(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]
    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): [authUserRoles!]!
  """
  fetch aggregated fields from the table: "auth.user_roles"
  """
  authUserRolesAggregate(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]
    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): authUserRoles_aggregate!
  """
  fetch data from the table: "auth.user_security_keys" using primary key columns
  """
  authUserSecurityKey(id: uuid!): authUserSecurityKeys
  """
  fetch data from the table: "auth.user_security_keys"
  """
  authUserSecurityKeys(
    """distinct select on columns"""
    distinct_on: [authUserSecurityKeys_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserSecurityKeys_order_by!]
    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): [authUserSecurityKeys!]!
  """
  fetch aggregated fields from the table: "auth.user_security_keys"
  """
  authUserSecurityKeysAggregate(
    """distinct select on columns"""
    distinct_on: [authUserSecurityKeys_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserSecurityKeys_order_by!]
    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): authUserSecurityKeys_aggregate!
  """
  fetch data from the table: "blog_comment_helpful"
  """
  blog_comment_helpful(
    """distinct select on columns"""
    distinct_on: [blog_comment_helpful_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comment_helpful_order_by!]
    """filter the rows returned"""
    where: blog_comment_helpful_bool_exp
  ): [blog_comment_helpful!]!
  """
  fetch aggregated fields from the table: "blog_comment_helpful"
  """
  blog_comment_helpful_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_comment_helpful_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comment_helpful_order_by!]
    """filter the rows returned"""
    where: blog_comment_helpful_bool_exp
  ): blog_comment_helpful_aggregate!
  """
  fetch data from the table: "blog_comment_helpful" using primary key columns
  """
  blog_comment_helpful_by_pk(comment_id: uuid!, user_id: uuid!): blog_comment_helpful
  """An array relationship"""
  blog_comment_reports(
    """distinct select on columns"""
    distinct_on: [blog_comment_reports_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comment_reports_order_by!]
    """filter the rows returned"""
    where: blog_comment_reports_bool_exp
  ): [blog_comment_reports!]!
  """An aggregate relationship"""
  blog_comment_reports_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_comment_reports_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comment_reports_order_by!]
    """filter the rows returned"""
    where: blog_comment_reports_bool_exp
  ): blog_comment_reports_aggregate!
  """
  fetch data from the table: "blog_comment_reports" using primary key columns
  """
  blog_comment_reports_by_pk(id: uuid!): blog_comment_reports
  """An array relationship"""
  blog_comments(
    """distinct select on columns"""
    distinct_on: [blog_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comments_order_by!]
    """filter the rows returned"""
    where: blog_comments_bool_exp
  ): [blog_comments!]!
  """An aggregate relationship"""
  blog_comments_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comments_order_by!]
    """filter the rows returned"""
    where: blog_comments_bool_exp
  ): blog_comments_aggregate!
  """fetch data from the table: "blog_comments" using primary key columns"""
  blog_comments_by_pk(id: uuid!): blog_comments
  """fetch data from the table: "storage.buckets" using primary key columns"""
  bucket(id: String!): buckets
  """
  fetch data from the table: "storage.buckets"
  """
  buckets(
    """distinct select on columns"""
    distinct_on: [buckets_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [buckets_order_by!]
    """filter the rows returned"""
    where: buckets_bool_exp
  ): [buckets!]!
  """
  fetch aggregated fields from the table: "storage.buckets"
  """
  bucketsAggregate(
    """distinct select on columns"""
    distinct_on: [buckets_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [buckets_order_by!]
    """filter the rows returned"""
    where: buckets_bool_exp
  ): buckets_aggregate!
  """An array relationship"""
  comment_likes(
    """distinct select on columns"""
    distinct_on: [comment_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [comment_likes_order_by!]
    """filter the rows returned"""
    where: comment_likes_bool_exp
  ): [comment_likes!]!
  """An aggregate relationship"""
  comment_likes_aggregate(
    """distinct select on columns"""
    distinct_on: [comment_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [comment_likes_order_by!]
    """filter the rows returned"""
    where: comment_likes_bool_exp
  ): comment_likes_aggregate!
  """fetch data from the table: "comment_likes" using primary key columns"""
  comment_likes_by_pk(comment_id: uuid!, user_id: uuid!): comment_likes
  """An array relationship"""
  contribution_bookmarks(
    """distinct select on columns"""
    distinct_on: [contribution_bookmarks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_bookmarks_order_by!]
    """filter the rows returned"""
    where: contribution_bookmarks_bool_exp
  ): [contribution_bookmarks!]!
  """An aggregate relationship"""
  contribution_bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_bookmarks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_bookmarks_order_by!]
    """filter the rows returned"""
    where: contribution_bookmarks_bool_exp
  ): contribution_bookmarks_aggregate!
  """
  fetch data from the table: "contribution_bookmarks" using primary key columns
  """
  contribution_bookmarks_by_pk(contribution_id: uuid!, user_id: uuid!): contribution_bookmarks
  """An array relationship"""
  contribution_comments(
    """distinct select on columns"""
    distinct_on: [contribution_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_comments_order_by!]
    """filter the rows returned"""
    where: contribution_comments_bool_exp
  ): [contribution_comments!]!
  """An aggregate relationship"""
  contribution_comments_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_comments_order_by!]
    """filter the rows returned"""
    where: contribution_comments_bool_exp
  ): contribution_comments_aggregate!
  """
  fetch data from the table: "contribution_comments" using primary key columns
  """
  contribution_comments_by_pk(id: uuid!): contribution_comments
  """An array relationship"""
  contribution_likes(
    """distinct select on columns"""
    distinct_on: [contribution_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_likes_order_by!]
    """filter the rows returned"""
    where: contribution_likes_bool_exp
  ): [contribution_likes!]!
  """An aggregate relationship"""
  contribution_likes_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_likes_order_by!]
    """filter the rows returned"""
    where: contribution_likes_bool_exp
  ): contribution_likes_aggregate!
  """
  fetch data from the table: "contribution_likes" using primary key columns
  """
  contribution_likes_by_pk(contribution_id: uuid!, user_id: uuid!): contribution_likes
  """An array relationship"""
  contribution_reactions(
    """distinct select on columns"""
    distinct_on: [contribution_reactions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_reactions_order_by!]
    """filter the rows returned"""
    where: contribution_reactions_bool_exp
  ): [contribution_reactions!]!
  """An aggregate relationship"""
  contribution_reactions_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_reactions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_reactions_order_by!]
    """filter the rows returned"""
    where: contribution_reactions_bool_exp
  ): contribution_reactions_aggregate!
  """
  fetch data from the table: "contribution_reactions" using primary key columns
  """
  contribution_reactions_by_pk(contribution_id: uuid!, type: reaction_types_enum!, user_id: uuid!): contribution_reactions
  """An array relationship"""
  contribution_reports(
    """distinct select on columns"""
    distinct_on: [contribution_reports_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_reports_order_by!]
    """filter the rows returned"""
    where: contribution_reports_bool_exp
  ): [contribution_reports!]!
  """An aggregate relationship"""
  contribution_reports_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_reports_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_reports_order_by!]
    """filter the rows returned"""
    where: contribution_reports_bool_exp
  ): contribution_reports_aggregate!
  """
  fetch data from the table: "contribution_reports" using primary key columns
  """
  contribution_reports_by_pk(id: uuid!): contribution_reports
  """
  fetch data from the table: "contribution_types"
  """
  contribution_types(
    """distinct select on columns"""
    distinct_on: [contribution_types_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_types_order_by!]
    """filter the rows returned"""
    where: contribution_types_bool_exp
  ): [contribution_types!]!
  """
  fetch aggregated fields from the table: "contribution_types"
  """
  contribution_types_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_types_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_types_order_by!]
    """filter the rows returned"""
    where: contribution_types_bool_exp
  ): contribution_types_aggregate!
  """
  fetch data from the table: "contribution_types" using primary key columns
  """
  contribution_types_by_pk(type: String!): contribution_types
  """An array relationship"""
  contributions(
    """distinct select on columns"""
    distinct_on: [contributions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contributions_order_by!]
    """filter the rows returned"""
    where: contributions_bool_exp
  ): [contributions!]!
  """An aggregate relationship"""
  contributions_aggregate(
    """distinct select on columns"""
    distinct_on: [contributions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contributions_order_by!]
    """filter the rows returned"""
    where: contributions_bool_exp
  ): contributions_aggregate!
  """fetch data from the table: "contributions" using primary key columns"""
  contributions_by_pk(id: uuid!): contributions
  """fetch data from the table: "storage.files" using primary key columns"""
  file(id: uuid!): files
  """An array relationship"""
  files(
    """distinct select on columns"""
    distinct_on: [files_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [files_order_by!]
    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!
  """
  fetch aggregated fields from the table: "storage.files"
  """
  filesAggregate(
    """distinct select on columns"""
    distinct_on: [files_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [files_order_by!]
    """filter the rows returned"""
    where: files_bool_exp
  ): files_aggregate!
  """
  fetch data from the table: "message_typing"
  """
  message_typing(
    """distinct select on columns"""
    distinct_on: [message_typing_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [message_typing_order_by!]
    """filter the rows returned"""
    where: message_typing_bool_exp
  ): [message_typing!]!
  """
  fetch aggregated fields from the table: "message_typing"
  """
  message_typing_aggregate(
    """distinct select on columns"""
    distinct_on: [message_typing_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [message_typing_order_by!]
    """filter the rows returned"""
    where: message_typing_bool_exp
  ): message_typing_aggregate!
  """fetch data from the table: "message_typing" using primary key columns"""
  message_typing_by_pk(id: uuid!): message_typing
  """
  fetch data from the table: "messages"
  """
  messages(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]
    """filter the rows returned"""
    where: messages_bool_exp
  ): [messages!]!
  """
  fetch aggregated fields from the table: "messages"
  """
  messages_aggregate(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]
    """filter the rows returned"""
    where: messages_bool_exp
  ): messages_aggregate!
  """fetch data from the table: "messages" using primary key columns"""
  messages_by_pk(id: Int!): messages
  """An array relationship"""
  post_bookmarks(
    """distinct select on columns"""
    distinct_on: [post_bookmarks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_bookmarks_order_by!]
    """filter the rows returned"""
    where: post_bookmarks_bool_exp
  ): [post_bookmarks!]!
  """An aggregate relationship"""
  post_bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [post_bookmarks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_bookmarks_order_by!]
    """filter the rows returned"""
    where: post_bookmarks_bool_exp
  ): post_bookmarks_aggregate!
  """fetch data from the table: "post_bookmarks" using primary key columns"""
  post_bookmarks_by_pk(post_id: uuid!, user_id: uuid!): post_bookmarks
  """An array relationship"""
  post_comments(
    """distinct select on columns"""
    distinct_on: [post_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_comments_order_by!]
    """filter the rows returned"""
    where: post_comments_bool_exp
  ): [post_comments!]!
  """An aggregate relationship"""
  post_comments_aggregate(
    """distinct select on columns"""
    distinct_on: [post_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_comments_order_by!]
    """filter the rows returned"""
    where: post_comments_bool_exp
  ): post_comments_aggregate!
  """fetch data from the table: "post_comments" using primary key columns"""
  post_comments_by_pk(id: uuid!): post_comments
  """An array relationship"""
  post_likes(
    """distinct select on columns"""
    distinct_on: [post_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_likes_order_by!]
    """filter the rows returned"""
    where: post_likes_bool_exp
  ): [post_likes!]!
  """An aggregate relationship"""
  post_likes_aggregate(
    """distinct select on columns"""
    distinct_on: [post_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_likes_order_by!]
    """filter the rows returned"""
    where: post_likes_bool_exp
  ): post_likes_aggregate!
  """fetch data from the table: "post_likes" using primary key columns"""
  post_likes_by_pk(post_id: uuid!, user_id: uuid!): post_likes
  """An array relationship"""
  post_reports(
    """distinct select on columns"""
    distinct_on: [post_reports_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_reports_order_by!]
    """filter the rows returned"""
    where: post_reports_bool_exp
  ): [post_reports!]!
  """An aggregate relationship"""
  post_reports_aggregate(
    """distinct select on columns"""
    distinct_on: [post_reports_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_reports_order_by!]
    """filter the rows returned"""
    where: post_reports_bool_exp
  ): post_reports_aggregate!
  """fetch data from the table: "post_reports" using primary key columns"""
  post_reports_by_pk(id: uuid!): post_reports
  """An array relationship"""
  posts(
    """distinct select on columns"""
    distinct_on: [posts_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]
    """filter the rows returned"""
    where: posts_bool_exp
  ): [posts!]!
  """An aggregate relationship"""
  posts_aggregate(
    """distinct select on columns"""
    distinct_on: [posts_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]
    """filter the rows returned"""
    where: posts_bool_exp
  ): posts_aggregate!
  """fetch data from the table: "posts" using primary key columns"""
  posts_by_pk(id: uuid!): posts
  """
  fetch data from the table: "reaction_types"
  """
  reaction_types(
    """distinct select on columns"""
    distinct_on: [reaction_types_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [reaction_types_order_by!]
    """filter the rows returned"""
    where: reaction_types_bool_exp
  ): [reaction_types!]!
  """
  fetch aggregated fields from the table: "reaction_types"
  """
  reaction_types_aggregate(
    """distinct select on columns"""
    distinct_on: [reaction_types_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [reaction_types_order_by!]
    """filter the rows returned"""
    where: reaction_types_bool_exp
  ): reaction_types_aggregate!
  """fetch data from the table: "reaction_types" using primary key columns"""
  reaction_types_by_pk(type: String!): reaction_types
  """fetch data from the table: "auth.users" using primary key columns"""
  user(id: uuid!): users
  """An array relationship"""
  user_blocks(
    """distinct select on columns"""
    distinct_on: [user_blocks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_blocks_order_by!]
    """filter the rows returned"""
    where: user_blocks_bool_exp
  ): [user_blocks!]!
  """An aggregate relationship"""
  user_blocks_aggregate(
    """distinct select on columns"""
    distinct_on: [user_blocks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_blocks_order_by!]
    """filter the rows returned"""
    where: user_blocks_bool_exp
  ): user_blocks_aggregate!
  """fetch data from the table: "user_blocks" using primary key columns"""
  user_blocks_by_pk(blocked_id: uuid!, blocker_id: uuid!): user_blocks
  """An array relationship"""
  user_preferences(
    """distinct select on columns"""
    distinct_on: [user_preferences_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_preferences_order_by!]
    """filter the rows returned"""
    where: user_preferences_bool_exp
  ): [user_preferences!]!
  """An aggregate relationship"""
  user_preferences_aggregate(
    """distinct select on columns"""
    distinct_on: [user_preferences_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_preferences_order_by!]
    """filter the rows returned"""
    where: user_preferences_bool_exp
  ): user_preferences_aggregate!
  """
  fetch data from the table: "user_preferences" using primary key columns
  """
  user_preferences_by_pk(user_id: uuid!): user_preferences
  """An array relationship"""
  user_profiles(
    """distinct select on columns"""
    distinct_on: [user_profiles_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_profiles_order_by!]
    """filter the rows returned"""
    where: user_profiles_bool_exp
  ): [user_profiles!]!
  """An aggregate relationship"""
  user_profiles_aggregate(
    """distinct select on columns"""
    distinct_on: [user_profiles_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_profiles_order_by!]
    """filter the rows returned"""
    where: user_profiles_bool_exp
  ): user_profiles_aggregate!
  """fetch data from the table: "user_profiles" using primary key columns"""
  user_profiles_by_pk(user_id: uuid!): user_profiles
  """
  fetch data from the table: "auth.users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [users_order_by!]
    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
  """
  fetch aggregated fields from the table: "auth.users"
  """
  usersAggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [users_order_by!]
    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!
  """fetch data from the table: "storage.virus" using primary key columns"""
  virus(id: uuid!): virus
  """
  fetch data from the table: "storage.virus"
  """
  viruses(
    """distinct select on columns"""
    distinct_on: [virus_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [virus_order_by!]
    """filter the rows returned"""
    where: virus_bool_exp
  ): [virus!]!
  """
  fetch aggregated fields from the table: "storage.virus"
  """
  virusesAggregate(
    """distinct select on columns"""
    distinct_on: [virus_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [virus_order_by!]
    """filter the rows returned"""
    where: virus_bool_exp
  ): virus_aggregate!
}

"""
columns and relationships of "reaction_types"
"""
type reaction_types {
  type: String!
}

"""
aggregated selection of "reaction_types"
"""
type reaction_types_aggregate {
  aggregate: reaction_types_aggregate_fields
  nodes: [reaction_types!]!
}

"""
aggregate fields of "reaction_types"
"""
type reaction_types_aggregate_fields {
  count(columns: [reaction_types_select_column!], distinct: Boolean): Int!
  max: reaction_types_max_fields
  min: reaction_types_min_fields
}

"""
Boolean expression to filter rows from the table "reaction_types". All fields are combined with a logical 'AND'.
"""
input reaction_types_bool_exp {
  _and: [reaction_types_bool_exp!]
  _not: reaction_types_bool_exp
  _or: [reaction_types_bool_exp!]
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "reaction_types"
"""
enum reaction_types_constraint {
  """
  unique or primary key constraint on columns "type"
  """
  reaction_types_pkey
}

enum reaction_types_enum {
  heart
  hope
  hug
  metoo
  thanks
}

"""
Boolean expression to compare columns of type "reaction_types_enum". All fields are combined with logical 'AND'.
"""
input reaction_types_enum_comparison_exp {
  _eq: reaction_types_enum
  _in: [reaction_types_enum!]
  _is_null: Boolean
  _neq: reaction_types_enum
  _nin: [reaction_types_enum!]
}

"""
input type for inserting data into table "reaction_types"
"""
input reaction_types_insert_input {
  type: String
}

"""aggregate max on columns"""
type reaction_types_max_fields {
  type: String
}

"""aggregate min on columns"""
type reaction_types_min_fields {
  type: String
}

"""
response of any mutation on the table "reaction_types"
"""
type reaction_types_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [reaction_types!]!
}

"""
on_conflict condition type for table "reaction_types"
"""
input reaction_types_on_conflict {
  constraint: reaction_types_constraint!
  update_columns: [reaction_types_update_column!]! = []
  where: reaction_types_bool_exp
}

"""Ordering options when selecting data from "reaction_types"."""
input reaction_types_order_by {
  type: order_by
}

"""primary key columns input for table: reaction_types"""
input reaction_types_pk_columns_input {
  type: String!
}

"""
select columns of table "reaction_types"
"""
enum reaction_types_select_column {
  """column name"""
  type
}

"""
input type for updating data in table "reaction_types"
"""
input reaction_types_set_input {
  type: String
}

"""
Streaming cursor of the table "reaction_types"
"""
input reaction_types_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: reaction_types_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input reaction_types_stream_cursor_value_input {
  type: String
}

"""
update columns of table "reaction_types"
"""
enum reaction_types_update_column {
  """column name"""
  type
}

input reaction_types_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: reaction_types_set_input
  """filter the rows which have to be updated"""
  where: reaction_types_bool_exp!
}

type subscription_root {
  """fetch data from the table: "auth.providers" using primary key columns"""
  authProvider(id: String!): authProviders
  """
  fetch data from the table: "auth.provider_requests" using primary key columns
  """
  authProviderRequest(id: uuid!): authProviderRequests
  """
  fetch data from the table: "auth.provider_requests"
  """
  authProviderRequests(
    """distinct select on columns"""
    distinct_on: [authProviderRequests_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authProviderRequests_order_by!]
    """filter the rows returned"""
    where: authProviderRequests_bool_exp
  ): [authProviderRequests!]!
  """
  fetch aggregated fields from the table: "auth.provider_requests"
  """
  authProviderRequestsAggregate(
    """distinct select on columns"""
    distinct_on: [authProviderRequests_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authProviderRequests_order_by!]
    """filter the rows returned"""
    where: authProviderRequests_bool_exp
  ): authProviderRequests_aggregate!
  """
  fetch data from the table in a streaming manner: "auth.provider_requests"
  """
  authProviderRequests_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [authProviderRequests_stream_cursor_input]!
    """filter the rows returned"""
    where: authProviderRequests_bool_exp
  ): [authProviderRequests!]!
  """
  fetch data from the table: "auth.providers"
  """
  authProviders(
    """distinct select on columns"""
    distinct_on: [authProviders_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authProviders_order_by!]
    """filter the rows returned"""
    where: authProviders_bool_exp
  ): [authProviders!]!
  """
  fetch aggregated fields from the table: "auth.providers"
  """
  authProvidersAggregate(
    """distinct select on columns"""
    distinct_on: [authProviders_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authProviders_order_by!]
    """filter the rows returned"""
    where: authProviders_bool_exp
  ): authProviders_aggregate!
  """
  fetch data from the table in a streaming manner: "auth.providers"
  """
  authProviders_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [authProviders_stream_cursor_input]!
    """filter the rows returned"""
    where: authProviders_bool_exp
  ): [authProviders!]!
  """
  fetch data from the table: "auth.refresh_tokens" using primary key columns
  """
  authRefreshToken(id: uuid!): authRefreshTokens
  """
  fetch data from the table: "auth.refresh_token_types" using primary key columns
  """
  authRefreshTokenType(value: String!): authRefreshTokenTypes
  """
  fetch data from the table: "auth.refresh_token_types"
  """
  authRefreshTokenTypes(
    """distinct select on columns"""
    distinct_on: [authRefreshTokenTypes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authRefreshTokenTypes_order_by!]
    """filter the rows returned"""
    where: authRefreshTokenTypes_bool_exp
  ): [authRefreshTokenTypes!]!
  """
  fetch aggregated fields from the table: "auth.refresh_token_types"
  """
  authRefreshTokenTypesAggregate(
    """distinct select on columns"""
    distinct_on: [authRefreshTokenTypes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authRefreshTokenTypes_order_by!]
    """filter the rows returned"""
    where: authRefreshTokenTypes_bool_exp
  ): authRefreshTokenTypes_aggregate!
  """
  fetch data from the table in a streaming manner: "auth.refresh_token_types"
  """
  authRefreshTokenTypes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [authRefreshTokenTypes_stream_cursor_input]!
    """filter the rows returned"""
    where: authRefreshTokenTypes_bool_exp
  ): [authRefreshTokenTypes!]!
  """
  fetch data from the table: "auth.refresh_tokens"
  """
  authRefreshTokens(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]
    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): [authRefreshTokens!]!
  """
  fetch aggregated fields from the table: "auth.refresh_tokens"
  """
  authRefreshTokensAggregate(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]
    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): authRefreshTokens_aggregate!
  """
  fetch data from the table in a streaming manner: "auth.refresh_tokens"
  """
  authRefreshTokens_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [authRefreshTokens_stream_cursor_input]!
    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): [authRefreshTokens!]!
  """fetch data from the table: "auth.roles" using primary key columns"""
  authRole(role: String!): authRoles
  """
  fetch data from the table: "auth.roles"
  """
  authRoles(
    """distinct select on columns"""
    distinct_on: [authRoles_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authRoles_order_by!]
    """filter the rows returned"""
    where: authRoles_bool_exp
  ): [authRoles!]!
  """
  fetch aggregated fields from the table: "auth.roles"
  """
  authRolesAggregate(
    """distinct select on columns"""
    distinct_on: [authRoles_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authRoles_order_by!]
    """filter the rows returned"""
    where: authRoles_bool_exp
  ): authRoles_aggregate!
  """
  fetch data from the table in a streaming manner: "auth.roles"
  """
  authRoles_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [authRoles_stream_cursor_input]!
    """filter the rows returned"""
    where: authRoles_bool_exp
  ): [authRoles!]!
  """
  fetch data from the table: "auth.user_providers" using primary key columns
  """
  authUserProvider(id: uuid!): authUserProviders
  """
  fetch data from the table: "auth.user_providers"
  """
  authUserProviders(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]
    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): [authUserProviders!]!
  """
  fetch aggregated fields from the table: "auth.user_providers"
  """
  authUserProvidersAggregate(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]
    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): authUserProviders_aggregate!
  """
  fetch data from the table in a streaming manner: "auth.user_providers"
  """
  authUserProviders_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [authUserProviders_stream_cursor_input]!
    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): [authUserProviders!]!
  """fetch data from the table: "auth.user_roles" using primary key columns"""
  authUserRole(id: uuid!): authUserRoles
  """
  fetch data from the table: "auth.user_roles"
  """
  authUserRoles(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]
    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): [authUserRoles!]!
  """
  fetch aggregated fields from the table: "auth.user_roles"
  """
  authUserRolesAggregate(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]
    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): authUserRoles_aggregate!
  """
  fetch data from the table in a streaming manner: "auth.user_roles"
  """
  authUserRoles_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [authUserRoles_stream_cursor_input]!
    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): [authUserRoles!]!
  """
  fetch data from the table: "auth.user_security_keys" using primary key columns
  """
  authUserSecurityKey(id: uuid!): authUserSecurityKeys
  """
  fetch data from the table: "auth.user_security_keys"
  """
  authUserSecurityKeys(
    """distinct select on columns"""
    distinct_on: [authUserSecurityKeys_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserSecurityKeys_order_by!]
    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): [authUserSecurityKeys!]!
  """
  fetch aggregated fields from the table: "auth.user_security_keys"
  """
  authUserSecurityKeysAggregate(
    """distinct select on columns"""
    distinct_on: [authUserSecurityKeys_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserSecurityKeys_order_by!]
    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): authUserSecurityKeys_aggregate!
  """
  fetch data from the table in a streaming manner: "auth.user_security_keys"
  """
  authUserSecurityKeys_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [authUserSecurityKeys_stream_cursor_input]!
    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): [authUserSecurityKeys!]!
  """
  fetch data from the table: "blog_comment_helpful"
  """
  blog_comment_helpful(
    """distinct select on columns"""
    distinct_on: [blog_comment_helpful_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comment_helpful_order_by!]
    """filter the rows returned"""
    where: blog_comment_helpful_bool_exp
  ): [blog_comment_helpful!]!
  """
  fetch aggregated fields from the table: "blog_comment_helpful"
  """
  blog_comment_helpful_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_comment_helpful_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comment_helpful_order_by!]
    """filter the rows returned"""
    where: blog_comment_helpful_bool_exp
  ): blog_comment_helpful_aggregate!
  """
  fetch data from the table: "blog_comment_helpful" using primary key columns
  """
  blog_comment_helpful_by_pk(comment_id: uuid!, user_id: uuid!): blog_comment_helpful
  """
  fetch data from the table in a streaming manner: "blog_comment_helpful"
  """
  blog_comment_helpful_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [blog_comment_helpful_stream_cursor_input]!
    """filter the rows returned"""
    where: blog_comment_helpful_bool_exp
  ): [blog_comment_helpful!]!
  """An array relationship"""
  blog_comment_reports(
    """distinct select on columns"""
    distinct_on: [blog_comment_reports_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comment_reports_order_by!]
    """filter the rows returned"""
    where: blog_comment_reports_bool_exp
  ): [blog_comment_reports!]!
  """An aggregate relationship"""
  blog_comment_reports_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_comment_reports_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comment_reports_order_by!]
    """filter the rows returned"""
    where: blog_comment_reports_bool_exp
  ): blog_comment_reports_aggregate!
  """
  fetch data from the table: "blog_comment_reports" using primary key columns
  """
  blog_comment_reports_by_pk(id: uuid!): blog_comment_reports
  """
  fetch data from the table in a streaming manner: "blog_comment_reports"
  """
  blog_comment_reports_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [blog_comment_reports_stream_cursor_input]!
    """filter the rows returned"""
    where: blog_comment_reports_bool_exp
  ): [blog_comment_reports!]!
  """An array relationship"""
  blog_comments(
    """distinct select on columns"""
    distinct_on: [blog_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comments_order_by!]
    """filter the rows returned"""
    where: blog_comments_bool_exp
  ): [blog_comments!]!
  """An aggregate relationship"""
  blog_comments_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comments_order_by!]
    """filter the rows returned"""
    where: blog_comments_bool_exp
  ): blog_comments_aggregate!
  """fetch data from the table: "blog_comments" using primary key columns"""
  blog_comments_by_pk(id: uuid!): blog_comments
  """
  fetch data from the table in a streaming manner: "blog_comments"
  """
  blog_comments_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [blog_comments_stream_cursor_input]!
    """filter the rows returned"""
    where: blog_comments_bool_exp
  ): [blog_comments!]!
  """fetch data from the table: "storage.buckets" using primary key columns"""
  bucket(id: String!): buckets
  """
  fetch data from the table: "storage.buckets"
  """
  buckets(
    """distinct select on columns"""
    distinct_on: [buckets_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [buckets_order_by!]
    """filter the rows returned"""
    where: buckets_bool_exp
  ): [buckets!]!
  """
  fetch aggregated fields from the table: "storage.buckets"
  """
  bucketsAggregate(
    """distinct select on columns"""
    distinct_on: [buckets_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [buckets_order_by!]
    """filter the rows returned"""
    where: buckets_bool_exp
  ): buckets_aggregate!
  """
  fetch data from the table in a streaming manner: "storage.buckets"
  """
  buckets_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [buckets_stream_cursor_input]!
    """filter the rows returned"""
    where: buckets_bool_exp
  ): [buckets!]!
  """An array relationship"""
  comment_likes(
    """distinct select on columns"""
    distinct_on: [comment_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [comment_likes_order_by!]
    """filter the rows returned"""
    where: comment_likes_bool_exp
  ): [comment_likes!]!
  """An aggregate relationship"""
  comment_likes_aggregate(
    """distinct select on columns"""
    distinct_on: [comment_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [comment_likes_order_by!]
    """filter the rows returned"""
    where: comment_likes_bool_exp
  ): comment_likes_aggregate!
  """fetch data from the table: "comment_likes" using primary key columns"""
  comment_likes_by_pk(comment_id: uuid!, user_id: uuid!): comment_likes
  """
  fetch data from the table in a streaming manner: "comment_likes"
  """
  comment_likes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [comment_likes_stream_cursor_input]!
    """filter the rows returned"""
    where: comment_likes_bool_exp
  ): [comment_likes!]!
  """An array relationship"""
  contribution_bookmarks(
    """distinct select on columns"""
    distinct_on: [contribution_bookmarks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_bookmarks_order_by!]
    """filter the rows returned"""
    where: contribution_bookmarks_bool_exp
  ): [contribution_bookmarks!]!
  """An aggregate relationship"""
  contribution_bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_bookmarks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_bookmarks_order_by!]
    """filter the rows returned"""
    where: contribution_bookmarks_bool_exp
  ): contribution_bookmarks_aggregate!
  """
  fetch data from the table: "contribution_bookmarks" using primary key columns
  """
  contribution_bookmarks_by_pk(contribution_id: uuid!, user_id: uuid!): contribution_bookmarks
  """
  fetch data from the table in a streaming manner: "contribution_bookmarks"
  """
  contribution_bookmarks_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [contribution_bookmarks_stream_cursor_input]!
    """filter the rows returned"""
    where: contribution_bookmarks_bool_exp
  ): [contribution_bookmarks!]!
  """An array relationship"""
  contribution_comments(
    """distinct select on columns"""
    distinct_on: [contribution_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_comments_order_by!]
    """filter the rows returned"""
    where: contribution_comments_bool_exp
  ): [contribution_comments!]!
  """An aggregate relationship"""
  contribution_comments_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_comments_order_by!]
    """filter the rows returned"""
    where: contribution_comments_bool_exp
  ): contribution_comments_aggregate!
  """
  fetch data from the table: "contribution_comments" using primary key columns
  """
  contribution_comments_by_pk(id: uuid!): contribution_comments
  """
  fetch data from the table in a streaming manner: "contribution_comments"
  """
  contribution_comments_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [contribution_comments_stream_cursor_input]!
    """filter the rows returned"""
    where: contribution_comments_bool_exp
  ): [contribution_comments!]!
  """An array relationship"""
  contribution_likes(
    """distinct select on columns"""
    distinct_on: [contribution_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_likes_order_by!]
    """filter the rows returned"""
    where: contribution_likes_bool_exp
  ): [contribution_likes!]!
  """An aggregate relationship"""
  contribution_likes_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_likes_order_by!]
    """filter the rows returned"""
    where: contribution_likes_bool_exp
  ): contribution_likes_aggregate!
  """
  fetch data from the table: "contribution_likes" using primary key columns
  """
  contribution_likes_by_pk(contribution_id: uuid!, user_id: uuid!): contribution_likes
  """
  fetch data from the table in a streaming manner: "contribution_likes"
  """
  contribution_likes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [contribution_likes_stream_cursor_input]!
    """filter the rows returned"""
    where: contribution_likes_bool_exp
  ): [contribution_likes!]!
  """An array relationship"""
  contribution_reactions(
    """distinct select on columns"""
    distinct_on: [contribution_reactions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_reactions_order_by!]
    """filter the rows returned"""
    where: contribution_reactions_bool_exp
  ): [contribution_reactions!]!
  """An aggregate relationship"""
  contribution_reactions_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_reactions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_reactions_order_by!]
    """filter the rows returned"""
    where: contribution_reactions_bool_exp
  ): contribution_reactions_aggregate!
  """
  fetch data from the table: "contribution_reactions" using primary key columns
  """
  contribution_reactions_by_pk(contribution_id: uuid!, type: reaction_types_enum!, user_id: uuid!): contribution_reactions
  """
  fetch data from the table in a streaming manner: "contribution_reactions"
  """
  contribution_reactions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [contribution_reactions_stream_cursor_input]!
    """filter the rows returned"""
    where: contribution_reactions_bool_exp
  ): [contribution_reactions!]!
  """An array relationship"""
  contribution_reports(
    """distinct select on columns"""
    distinct_on: [contribution_reports_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_reports_order_by!]
    """filter the rows returned"""
    where: contribution_reports_bool_exp
  ): [contribution_reports!]!
  """An aggregate relationship"""
  contribution_reports_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_reports_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_reports_order_by!]
    """filter the rows returned"""
    where: contribution_reports_bool_exp
  ): contribution_reports_aggregate!
  """
  fetch data from the table: "contribution_reports" using primary key columns
  """
  contribution_reports_by_pk(id: uuid!): contribution_reports
  """
  fetch data from the table in a streaming manner: "contribution_reports"
  """
  contribution_reports_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [contribution_reports_stream_cursor_input]!
    """filter the rows returned"""
    where: contribution_reports_bool_exp
  ): [contribution_reports!]!
  """
  fetch data from the table: "contribution_types"
  """
  contribution_types(
    """distinct select on columns"""
    distinct_on: [contribution_types_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_types_order_by!]
    """filter the rows returned"""
    where: contribution_types_bool_exp
  ): [contribution_types!]!
  """
  fetch aggregated fields from the table: "contribution_types"
  """
  contribution_types_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_types_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_types_order_by!]
    """filter the rows returned"""
    where: contribution_types_bool_exp
  ): contribution_types_aggregate!
  """
  fetch data from the table: "contribution_types" using primary key columns
  """
  contribution_types_by_pk(type: String!): contribution_types
  """
  fetch data from the table in a streaming manner: "contribution_types"
  """
  contribution_types_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [contribution_types_stream_cursor_input]!
    """filter the rows returned"""
    where: contribution_types_bool_exp
  ): [contribution_types!]!
  """An array relationship"""
  contributions(
    """distinct select on columns"""
    distinct_on: [contributions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contributions_order_by!]
    """filter the rows returned"""
    where: contributions_bool_exp
  ): [contributions!]!
  """An aggregate relationship"""
  contributions_aggregate(
    """distinct select on columns"""
    distinct_on: [contributions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contributions_order_by!]
    """filter the rows returned"""
    where: contributions_bool_exp
  ): contributions_aggregate!
  """fetch data from the table: "contributions" using primary key columns"""
  contributions_by_pk(id: uuid!): contributions
  """
  fetch data from the table in a streaming manner: "contributions"
  """
  contributions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [contributions_stream_cursor_input]!
    """filter the rows returned"""
    where: contributions_bool_exp
  ): [contributions!]!
  """fetch data from the table: "storage.files" using primary key columns"""
  file(id: uuid!): files
  """An array relationship"""
  files(
    """distinct select on columns"""
    distinct_on: [files_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [files_order_by!]
    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!
  """
  fetch aggregated fields from the table: "storage.files"
  """
  filesAggregate(
    """distinct select on columns"""
    distinct_on: [files_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [files_order_by!]
    """filter the rows returned"""
    where: files_bool_exp
  ): files_aggregate!
  """
  fetch data from the table in a streaming manner: "storage.files"
  """
  files_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [files_stream_cursor_input]!
    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!
  """
  fetch data from the table: "message_typing"
  """
  message_typing(
    """distinct select on columns"""
    distinct_on: [message_typing_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [message_typing_order_by!]
    """filter the rows returned"""
    where: message_typing_bool_exp
  ): [message_typing!]!
  """
  fetch aggregated fields from the table: "message_typing"
  """
  message_typing_aggregate(
    """distinct select on columns"""
    distinct_on: [message_typing_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [message_typing_order_by!]
    """filter the rows returned"""
    where: message_typing_bool_exp
  ): message_typing_aggregate!
  """fetch data from the table: "message_typing" using primary key columns"""
  message_typing_by_pk(id: uuid!): message_typing
  """
  fetch data from the table in a streaming manner: "message_typing"
  """
  message_typing_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [message_typing_stream_cursor_input]!
    """filter the rows returned"""
    where: message_typing_bool_exp
  ): [message_typing!]!
  """
  fetch data from the table: "messages"
  """
  messages(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]
    """filter the rows returned"""
    where: messages_bool_exp
  ): [messages!]!
  """
  fetch aggregated fields from the table: "messages"
  """
  messages_aggregate(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]
    """filter the rows returned"""
    where: messages_bool_exp
  ): messages_aggregate!
  """fetch data from the table: "messages" using primary key columns"""
  messages_by_pk(id: Int!): messages
  """
  fetch data from the table in a streaming manner: "messages"
  """
  messages_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [messages_stream_cursor_input]!
    """filter the rows returned"""
    where: messages_bool_exp
  ): [messages!]!
  """An array relationship"""
  post_bookmarks(
    """distinct select on columns"""
    distinct_on: [post_bookmarks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_bookmarks_order_by!]
    """filter the rows returned"""
    where: post_bookmarks_bool_exp
  ): [post_bookmarks!]!
  """An aggregate relationship"""
  post_bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [post_bookmarks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_bookmarks_order_by!]
    """filter the rows returned"""
    where: post_bookmarks_bool_exp
  ): post_bookmarks_aggregate!
  """fetch data from the table: "post_bookmarks" using primary key columns"""
  post_bookmarks_by_pk(post_id: uuid!, user_id: uuid!): post_bookmarks
  """
  fetch data from the table in a streaming manner: "post_bookmarks"
  """
  post_bookmarks_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [post_bookmarks_stream_cursor_input]!
    """filter the rows returned"""
    where: post_bookmarks_bool_exp
  ): [post_bookmarks!]!
  """An array relationship"""
  post_comments(
    """distinct select on columns"""
    distinct_on: [post_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_comments_order_by!]
    """filter the rows returned"""
    where: post_comments_bool_exp
  ): [post_comments!]!
  """An aggregate relationship"""
  post_comments_aggregate(
    """distinct select on columns"""
    distinct_on: [post_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_comments_order_by!]
    """filter the rows returned"""
    where: post_comments_bool_exp
  ): post_comments_aggregate!
  """fetch data from the table: "post_comments" using primary key columns"""
  post_comments_by_pk(id: uuid!): post_comments
  """
  fetch data from the table in a streaming manner: "post_comments"
  """
  post_comments_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [post_comments_stream_cursor_input]!
    """filter the rows returned"""
    where: post_comments_bool_exp
  ): [post_comments!]!
  """An array relationship"""
  post_likes(
    """distinct select on columns"""
    distinct_on: [post_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_likes_order_by!]
    """filter the rows returned"""
    where: post_likes_bool_exp
  ): [post_likes!]!
  """An aggregate relationship"""
  post_likes_aggregate(
    """distinct select on columns"""
    distinct_on: [post_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_likes_order_by!]
    """filter the rows returned"""
    where: post_likes_bool_exp
  ): post_likes_aggregate!
  """fetch data from the table: "post_likes" using primary key columns"""
  post_likes_by_pk(post_id: uuid!, user_id: uuid!): post_likes
  """
  fetch data from the table in a streaming manner: "post_likes"
  """
  post_likes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [post_likes_stream_cursor_input]!
    """filter the rows returned"""
    where: post_likes_bool_exp
  ): [post_likes!]!
  """An array relationship"""
  post_reports(
    """distinct select on columns"""
    distinct_on: [post_reports_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_reports_order_by!]
    """filter the rows returned"""
    where: post_reports_bool_exp
  ): [post_reports!]!
  """An aggregate relationship"""
  post_reports_aggregate(
    """distinct select on columns"""
    distinct_on: [post_reports_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_reports_order_by!]
    """filter the rows returned"""
    where: post_reports_bool_exp
  ): post_reports_aggregate!
  """fetch data from the table: "post_reports" using primary key columns"""
  post_reports_by_pk(id: uuid!): post_reports
  """
  fetch data from the table in a streaming manner: "post_reports"
  """
  post_reports_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [post_reports_stream_cursor_input]!
    """filter the rows returned"""
    where: post_reports_bool_exp
  ): [post_reports!]!
  """An array relationship"""
  posts(
    """distinct select on columns"""
    distinct_on: [posts_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]
    """filter the rows returned"""
    where: posts_bool_exp
  ): [posts!]!
  """An aggregate relationship"""
  posts_aggregate(
    """distinct select on columns"""
    distinct_on: [posts_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]
    """filter the rows returned"""
    where: posts_bool_exp
  ): posts_aggregate!
  """fetch data from the table: "posts" using primary key columns"""
  posts_by_pk(id: uuid!): posts
  """
  fetch data from the table in a streaming manner: "posts"
  """
  posts_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [posts_stream_cursor_input]!
    """filter the rows returned"""
    where: posts_bool_exp
  ): [posts!]!
  """
  fetch data from the table: "reaction_types"
  """
  reaction_types(
    """distinct select on columns"""
    distinct_on: [reaction_types_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [reaction_types_order_by!]
    """filter the rows returned"""
    where: reaction_types_bool_exp
  ): [reaction_types!]!
  """
  fetch aggregated fields from the table: "reaction_types"
  """
  reaction_types_aggregate(
    """distinct select on columns"""
    distinct_on: [reaction_types_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [reaction_types_order_by!]
    """filter the rows returned"""
    where: reaction_types_bool_exp
  ): reaction_types_aggregate!
  """fetch data from the table: "reaction_types" using primary key columns"""
  reaction_types_by_pk(type: String!): reaction_types
  """
  fetch data from the table in a streaming manner: "reaction_types"
  """
  reaction_types_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [reaction_types_stream_cursor_input]!
    """filter the rows returned"""
    where: reaction_types_bool_exp
  ): [reaction_types!]!
  """fetch data from the table: "auth.users" using primary key columns"""
  user(id: uuid!): users
  """An array relationship"""
  user_blocks(
    """distinct select on columns"""
    distinct_on: [user_blocks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_blocks_order_by!]
    """filter the rows returned"""
    where: user_blocks_bool_exp
  ): [user_blocks!]!
  """An aggregate relationship"""
  user_blocks_aggregate(
    """distinct select on columns"""
    distinct_on: [user_blocks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_blocks_order_by!]
    """filter the rows returned"""
    where: user_blocks_bool_exp
  ): user_blocks_aggregate!
  """fetch data from the table: "user_blocks" using primary key columns"""
  user_blocks_by_pk(blocked_id: uuid!, blocker_id: uuid!): user_blocks
  """
  fetch data from the table in a streaming manner: "user_blocks"
  """
  user_blocks_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [user_blocks_stream_cursor_input]!
    """filter the rows returned"""
    where: user_blocks_bool_exp
  ): [user_blocks!]!
  """An array relationship"""
  user_preferences(
    """distinct select on columns"""
    distinct_on: [user_preferences_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_preferences_order_by!]
    """filter the rows returned"""
    where: user_preferences_bool_exp
  ): [user_preferences!]!
  """An aggregate relationship"""
  user_preferences_aggregate(
    """distinct select on columns"""
    distinct_on: [user_preferences_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_preferences_order_by!]
    """filter the rows returned"""
    where: user_preferences_bool_exp
  ): user_preferences_aggregate!
  """
  fetch data from the table: "user_preferences" using primary key columns
  """
  user_preferences_by_pk(user_id: uuid!): user_preferences
  """
  fetch data from the table in a streaming manner: "user_preferences"
  """
  user_preferences_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [user_preferences_stream_cursor_input]!
    """filter the rows returned"""
    where: user_preferences_bool_exp
  ): [user_preferences!]!
  """An array relationship"""
  user_profiles(
    """distinct select on columns"""
    distinct_on: [user_profiles_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_profiles_order_by!]
    """filter the rows returned"""
    where: user_profiles_bool_exp
  ): [user_profiles!]!
  """An aggregate relationship"""
  user_profiles_aggregate(
    """distinct select on columns"""
    distinct_on: [user_profiles_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_profiles_order_by!]
    """filter the rows returned"""
    where: user_profiles_bool_exp
  ): user_profiles_aggregate!
  """fetch data from the table: "user_profiles" using primary key columns"""
  user_profiles_by_pk(user_id: uuid!): user_profiles
  """
  fetch data from the table in a streaming manner: "user_profiles"
  """
  user_profiles_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [user_profiles_stream_cursor_input]!
    """filter the rows returned"""
    where: user_profiles_bool_exp
  ): [user_profiles!]!
  """
  fetch data from the table: "auth.users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [users_order_by!]
    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
  """
  fetch aggregated fields from the table: "auth.users"
  """
  usersAggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [users_order_by!]
    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!
  """
  fetch data from the table in a streaming manner: "auth.users"
  """
  users_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [users_stream_cursor_input]!
    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
  """fetch data from the table: "storage.virus" using primary key columns"""
  virus(id: uuid!): virus
  """
  fetch data from the table in a streaming manner: "storage.virus"
  """
  virus_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [virus_stream_cursor_input]!
    """filter the rows returned"""
    where: virus_bool_exp
  ): [virus!]!
  """
  fetch data from the table: "storage.virus"
  """
  viruses(
    """distinct select on columns"""
    distinct_on: [virus_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [virus_order_by!]
    """filter the rows returned"""
    where: virus_bool_exp
  ): [virus!]!
  """
  fetch aggregated fields from the table: "storage.virus"
  """
  virusesAggregate(
    """distinct select on columns"""
    distinct_on: [virus_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [virus_order_by!]
    """filter the rows returned"""
    where: virus_bool_exp
  ): virus_aggregate!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "user_blocks"
"""
type user_blocks {
  """An object relationship"""
  blocked: users!
  blocked_id: uuid!
  """An object relationship"""
  blocker: users!
  blocker_id: uuid!
  created_at: timestamptz!
}

"""
aggregated selection of "user_blocks"
"""
type user_blocks_aggregate {
  aggregate: user_blocks_aggregate_fields
  nodes: [user_blocks!]!
}

input user_blocks_aggregate_bool_exp {
  count: user_blocks_aggregate_bool_exp_count
}

input user_blocks_aggregate_bool_exp_count {
  arguments: [user_blocks_select_column!]
  distinct: Boolean
  filter: user_blocks_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "user_blocks"
"""
type user_blocks_aggregate_fields {
  count(columns: [user_blocks_select_column!], distinct: Boolean): Int!
  max: user_blocks_max_fields
  min: user_blocks_min_fields
}

"""
order by aggregate values of table "user_blocks"
"""
input user_blocks_aggregate_order_by {
  count: order_by
  max: user_blocks_max_order_by
  min: user_blocks_min_order_by
}

"""
input type for inserting array relation for remote table "user_blocks"
"""
input user_blocks_arr_rel_insert_input {
  data: [user_blocks_insert_input!]!
  """upsert condition"""
  on_conflict: user_blocks_on_conflict
}

"""
Boolean expression to filter rows from the table "user_blocks". All fields are combined with a logical 'AND'.
"""
input user_blocks_bool_exp {
  _and: [user_blocks_bool_exp!]
  _not: user_blocks_bool_exp
  _or: [user_blocks_bool_exp!]
  blocked: users_bool_exp
  blocked_id: uuid_comparison_exp
  blocker: users_bool_exp
  blocker_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "user_blocks"
"""
enum user_blocks_constraint {
  """
  unique or primary key constraint on columns "blocker_id", "blocked_id"
  """
  user_blocks_pkey
}

"""
input type for inserting data into table "user_blocks"
"""
input user_blocks_insert_input {
  blocked: users_obj_rel_insert_input
  blocked_id: uuid
  blocker: users_obj_rel_insert_input
  blocker_id: uuid
  created_at: timestamptz
}

"""aggregate max on columns"""
type user_blocks_max_fields {
  blocked_id: uuid
  blocker_id: uuid
  created_at: timestamptz
}

"""
order by max() on columns of table "user_blocks"
"""
input user_blocks_max_order_by {
  blocked_id: order_by
  blocker_id: order_by
  created_at: order_by
}

"""aggregate min on columns"""
type user_blocks_min_fields {
  blocked_id: uuid
  blocker_id: uuid
  created_at: timestamptz
}

"""
order by min() on columns of table "user_blocks"
"""
input user_blocks_min_order_by {
  blocked_id: order_by
  blocker_id: order_by
  created_at: order_by
}

"""
response of any mutation on the table "user_blocks"
"""
type user_blocks_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [user_blocks!]!
}

"""
on_conflict condition type for table "user_blocks"
"""
input user_blocks_on_conflict {
  constraint: user_blocks_constraint!
  update_columns: [user_blocks_update_column!]! = []
  where: user_blocks_bool_exp
}

"""Ordering options when selecting data from "user_blocks"."""
input user_blocks_order_by {
  blocked: users_order_by
  blocked_id: order_by
  blocker: users_order_by
  blocker_id: order_by
  created_at: order_by
}

"""primary key columns input for table: user_blocks"""
input user_blocks_pk_columns_input {
  blocked_id: uuid!
  blocker_id: uuid!
}

"""
select columns of table "user_blocks"
"""
enum user_blocks_select_column {
  """column name"""
  blocked_id
  """column name"""
  blocker_id
  """column name"""
  created_at
}

"""
input type for updating data in table "user_blocks"
"""
input user_blocks_set_input {
  blocked_id: uuid
  blocker_id: uuid
  created_at: timestamptz
}

"""
Streaming cursor of the table "user_blocks"
"""
input user_blocks_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_blocks_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_blocks_stream_cursor_value_input {
  blocked_id: uuid
  blocker_id: uuid
  created_at: timestamptz
}

"""
update columns of table "user_blocks"
"""
enum user_blocks_update_column {
  """column name"""
  blocked_id
  """column name"""
  blocker_id
  """column name"""
  created_at
}

input user_blocks_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: user_blocks_set_input
  """filter the rows which have to be updated"""
  where: user_blocks_bool_exp!
}

"""
columns and relationships of "user_preferences"
"""
type user_preferences {
  contribution_notifications: Boolean!
  created_at: timestamptz!
  dms_off: Boolean!
  email_notifications: Boolean!
  theme: String!
  updated_at: timestamptz!
  """An object relationship"""
  user: users!
  user_id: uuid!
}

"""
aggregated selection of "user_preferences"
"""
type user_preferences_aggregate {
  aggregate: user_preferences_aggregate_fields
  nodes: [user_preferences!]!
}

input user_preferences_aggregate_bool_exp {
  bool_and: user_preferences_aggregate_bool_exp_bool_and
  bool_or: user_preferences_aggregate_bool_exp_bool_or
  count: user_preferences_aggregate_bool_exp_count
}

input user_preferences_aggregate_bool_exp_bool_and {
  arguments: user_preferences_select_column_user_preferences_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: user_preferences_bool_exp
  predicate: Boolean_comparison_exp!
}

input user_preferences_aggregate_bool_exp_bool_or {
  arguments: user_preferences_select_column_user_preferences_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: user_preferences_bool_exp
  predicate: Boolean_comparison_exp!
}

input user_preferences_aggregate_bool_exp_count {
  arguments: [user_preferences_select_column!]
  distinct: Boolean
  filter: user_preferences_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "user_preferences"
"""
type user_preferences_aggregate_fields {
  count(columns: [user_preferences_select_column!], distinct: Boolean): Int!
  max: user_preferences_max_fields
  min: user_preferences_min_fields
}

"""
order by aggregate values of table "user_preferences"
"""
input user_preferences_aggregate_order_by {
  count: order_by
  max: user_preferences_max_order_by
  min: user_preferences_min_order_by
}

"""
input type for inserting array relation for remote table "user_preferences"
"""
input user_preferences_arr_rel_insert_input {
  data: [user_preferences_insert_input!]!
  """upsert condition"""
  on_conflict: user_preferences_on_conflict
}

"""
Boolean expression to filter rows from the table "user_preferences". All fields are combined with a logical 'AND'.
"""
input user_preferences_bool_exp {
  _and: [user_preferences_bool_exp!]
  _not: user_preferences_bool_exp
  _or: [user_preferences_bool_exp!]
  contribution_notifications: Boolean_comparison_exp
  created_at: timestamptz_comparison_exp
  dms_off: Boolean_comparison_exp
  email_notifications: Boolean_comparison_exp
  theme: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "user_preferences"
"""
enum user_preferences_constraint {
  """
  unique or primary key constraint on columns "user_id"
  """
  user_preferences_pkey
}

"""
input type for inserting data into table "user_preferences"
"""
input user_preferences_insert_input {
  contribution_notifications: Boolean
  created_at: timestamptz
  dms_off: Boolean
  email_notifications: Boolean
  theme: String
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
}

"""aggregate max on columns"""
type user_preferences_max_fields {
  created_at: timestamptz
  theme: String
  updated_at: timestamptz
  user_id: uuid
}

"""
order by max() on columns of table "user_preferences"
"""
input user_preferences_max_order_by {
  created_at: order_by
  theme: order_by
  updated_at: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type user_preferences_min_fields {
  created_at: timestamptz
  theme: String
  updated_at: timestamptz
  user_id: uuid
}

"""
order by min() on columns of table "user_preferences"
"""
input user_preferences_min_order_by {
  created_at: order_by
  theme: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "user_preferences"
"""
type user_preferences_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [user_preferences!]!
}

"""
on_conflict condition type for table "user_preferences"
"""
input user_preferences_on_conflict {
  constraint: user_preferences_constraint!
  update_columns: [user_preferences_update_column!]! = []
  where: user_preferences_bool_exp
}

"""Ordering options when selecting data from "user_preferences"."""
input user_preferences_order_by {
  contribution_notifications: order_by
  created_at: order_by
  dms_off: order_by
  email_notifications: order_by
  theme: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: user_preferences"""
input user_preferences_pk_columns_input {
  user_id: uuid!
}

"""
select columns of table "user_preferences"
"""
enum user_preferences_select_column {
  """column name"""
  contribution_notifications
  """column name"""
  created_at
  """column name"""
  dms_off
  """column name"""
  email_notifications
  """column name"""
  theme
  """column name"""
  updated_at
  """column name"""
  user_id
}

"""
select "user_preferences_aggregate_bool_exp_bool_and_arguments_columns" columns of table "user_preferences"
"""
enum user_preferences_select_column_user_preferences_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  contribution_notifications
  """column name"""
  dms_off
  """column name"""
  email_notifications
}

"""
select "user_preferences_aggregate_bool_exp_bool_or_arguments_columns" columns of table "user_preferences"
"""
enum user_preferences_select_column_user_preferences_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  contribution_notifications
  """column name"""
  dms_off
  """column name"""
  email_notifications
}

"""
input type for updating data in table "user_preferences"
"""
input user_preferences_set_input {
  contribution_notifications: Boolean
  created_at: timestamptz
  dms_off: Boolean
  email_notifications: Boolean
  theme: String
  updated_at: timestamptz
  user_id: uuid
}

"""
Streaming cursor of the table "user_preferences"
"""
input user_preferences_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_preferences_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_preferences_stream_cursor_value_input {
  contribution_notifications: Boolean
  created_at: timestamptz
  dms_off: Boolean
  email_notifications: Boolean
  theme: String
  updated_at: timestamptz
  user_id: uuid
}

"""
update columns of table "user_preferences"
"""
enum user_preferences_update_column {
  """column name"""
  contribution_notifications
  """column name"""
  created_at
  """column name"""
  dms_off
  """column name"""
  email_notifications
  """column name"""
  theme
  """column name"""
  updated_at
  """column name"""
  user_id
}

input user_preferences_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: user_preferences_set_input
  """filter the rows which have to be updated"""
  where: user_preferences_bool_exp!
}

"""
columns and relationships of "user_profiles"
"""
type user_profiles {
  bio: String
  created_at: timestamptz!
  location: String
  updated_at: timestamptz!
  """An object relationship"""
  user: users!
  user_id: uuid!
  website: String
}

"""
aggregated selection of "user_profiles"
"""
type user_profiles_aggregate {
  aggregate: user_profiles_aggregate_fields
  nodes: [user_profiles!]!
}

input user_profiles_aggregate_bool_exp {
  count: user_profiles_aggregate_bool_exp_count
}

input user_profiles_aggregate_bool_exp_count {
  arguments: [user_profiles_select_column!]
  distinct: Boolean
  filter: user_profiles_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "user_profiles"
"""
type user_profiles_aggregate_fields {
  count(columns: [user_profiles_select_column!], distinct: Boolean): Int!
  max: user_profiles_max_fields
  min: user_profiles_min_fields
}

"""
order by aggregate values of table "user_profiles"
"""
input user_profiles_aggregate_order_by {
  count: order_by
  max: user_profiles_max_order_by
  min: user_profiles_min_order_by
}

"""
input type for inserting array relation for remote table "user_profiles"
"""
input user_profiles_arr_rel_insert_input {
  data: [user_profiles_insert_input!]!
  """upsert condition"""
  on_conflict: user_profiles_on_conflict
}

"""
Boolean expression to filter rows from the table "user_profiles". All fields are combined with a logical 'AND'.
"""
input user_profiles_bool_exp {
  _and: [user_profiles_bool_exp!]
  _not: user_profiles_bool_exp
  _or: [user_profiles_bool_exp!]
  bio: String_comparison_exp
  created_at: timestamptz_comparison_exp
  location: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: uuid_comparison_exp
  website: String_comparison_exp
}

"""
unique or primary key constraints on table "user_profiles"
"""
enum user_profiles_constraint {
  """
  unique or primary key constraint on columns "user_id"
  """
  user_profiles_pkey
}

"""
input type for inserting data into table "user_profiles"
"""
input user_profiles_insert_input {
  bio: String
  created_at: timestamptz
  location: String
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: uuid
  website: String
}

"""aggregate max on columns"""
type user_profiles_max_fields {
  bio: String
  created_at: timestamptz
  location: String
  updated_at: timestamptz
  user_id: uuid
  website: String
}

"""
order by max() on columns of table "user_profiles"
"""
input user_profiles_max_order_by {
  bio: order_by
  created_at: order_by
  location: order_by
  updated_at: order_by
  user_id: order_by
  website: order_by
}

"""aggregate min on columns"""
type user_profiles_min_fields {
  bio: String
  created_at: timestamptz
  location: String
  updated_at: timestamptz
  user_id: uuid
  website: String
}

"""
order by min() on columns of table "user_profiles"
"""
input user_profiles_min_order_by {
  bio: order_by
  created_at: order_by
  location: order_by
  updated_at: order_by
  user_id: order_by
  website: order_by
}

"""
response of any mutation on the table "user_profiles"
"""
type user_profiles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [user_profiles!]!
}

"""
on_conflict condition type for table "user_profiles"
"""
input user_profiles_on_conflict {
  constraint: user_profiles_constraint!
  update_columns: [user_profiles_update_column!]! = []
  where: user_profiles_bool_exp
}

"""Ordering options when selecting data from "user_profiles"."""
input user_profiles_order_by {
  bio: order_by
  created_at: order_by
  location: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
  website: order_by
}

"""primary key columns input for table: user_profiles"""
input user_profiles_pk_columns_input {
  user_id: uuid!
}

"""
select columns of table "user_profiles"
"""
enum user_profiles_select_column {
  """column name"""
  bio
  """column name"""
  created_at
  """column name"""
  location
  """column name"""
  updated_at
  """column name"""
  user_id
  """column name"""
  website
}

"""
input type for updating data in table "user_profiles"
"""
input user_profiles_set_input {
  bio: String
  created_at: timestamptz
  location: String
  updated_at: timestamptz
  user_id: uuid
  website: String
}

"""
Streaming cursor of the table "user_profiles"
"""
input user_profiles_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_profiles_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_profiles_stream_cursor_value_input {
  bio: String
  created_at: timestamptz
  location: String
  updated_at: timestamptz
  user_id: uuid
  website: String
}

"""
update columns of table "user_profiles"
"""
enum user_profiles_update_column {
  """column name"""
  bio
  """column name"""
  created_at
  """column name"""
  location
  """column name"""
  updated_at
  """column name"""
  user_id
  """column name"""
  website
}

input user_profiles_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: user_profiles_set_input
  """filter the rows which have to be updated"""
  where: user_profiles_bool_exp!
}

"""
User account information. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type users {
  activeMfaType: String
  avatarUrl: String!
  """An array relationship"""
  blocks_outgoing(
    """distinct select on columns"""
    distinct_on: [user_blocks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_blocks_order_by!]
    """filter the rows returned"""
    where: user_blocks_bool_exp
  ): [user_blocks!]!
  """An aggregate relationship"""
  blocks_outgoing_aggregate(
    """distinct select on columns"""
    distinct_on: [user_blocks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_blocks_order_by!]
    """filter the rows returned"""
    where: user_blocks_bool_exp
  ): user_blocks_aggregate!
  """An array relationship"""
  blog_comment_helpfuls(
    """distinct select on columns"""
    distinct_on: [blog_comment_helpful_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comment_helpful_order_by!]
    """filter the rows returned"""
    where: blog_comment_helpful_bool_exp
  ): [blog_comment_helpful!]!
  """An aggregate relationship"""
  blog_comment_helpfuls_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_comment_helpful_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comment_helpful_order_by!]
    """filter the rows returned"""
    where: blog_comment_helpful_bool_exp
  ): blog_comment_helpful_aggregate!
  """An array relationship"""
  blog_comment_reports(
    """distinct select on columns"""
    distinct_on: [blog_comment_reports_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comment_reports_order_by!]
    """filter the rows returned"""
    where: blog_comment_reports_bool_exp
  ): [blog_comment_reports!]!
  """An aggregate relationship"""
  blog_comment_reports_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_comment_reports_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comment_reports_order_by!]
    """filter the rows returned"""
    where: blog_comment_reports_bool_exp
  ): blog_comment_reports_aggregate!
  """An array relationship"""
  blog_comments(
    """distinct select on columns"""
    distinct_on: [blog_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comments_order_by!]
    """filter the rows returned"""
    where: blog_comments_bool_exp
  ): [blog_comments!]!
  """An aggregate relationship"""
  blog_comments_aggregate(
    """distinct select on columns"""
    distinct_on: [blog_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [blog_comments_order_by!]
    """filter the rows returned"""
    where: blog_comments_bool_exp
  ): blog_comments_aggregate!
  """An array relationship"""
  comment_likes(
    """distinct select on columns"""
    distinct_on: [comment_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [comment_likes_order_by!]
    """filter the rows returned"""
    where: comment_likes_bool_exp
  ): [comment_likes!]!
  """An aggregate relationship"""
  comment_likes_aggregate(
    """distinct select on columns"""
    distinct_on: [comment_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [comment_likes_order_by!]
    """filter the rows returned"""
    where: comment_likes_bool_exp
  ): comment_likes_aggregate!
  """An array relationship"""
  contribution_bookmarks(
    """distinct select on columns"""
    distinct_on: [contribution_bookmarks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_bookmarks_order_by!]
    """filter the rows returned"""
    where: contribution_bookmarks_bool_exp
  ): [contribution_bookmarks!]!
  """An aggregate relationship"""
  contribution_bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_bookmarks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_bookmarks_order_by!]
    """filter the rows returned"""
    where: contribution_bookmarks_bool_exp
  ): contribution_bookmarks_aggregate!
  """An array relationship"""
  contribution_comments(
    """distinct select on columns"""
    distinct_on: [contribution_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_comments_order_by!]
    """filter the rows returned"""
    where: contribution_comments_bool_exp
  ): [contribution_comments!]!
  """An aggregate relationship"""
  contribution_comments_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_comments_order_by!]
    """filter the rows returned"""
    where: contribution_comments_bool_exp
  ): contribution_comments_aggregate!
  """An array relationship"""
  contribution_likes(
    """distinct select on columns"""
    distinct_on: [contribution_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_likes_order_by!]
    """filter the rows returned"""
    where: contribution_likes_bool_exp
  ): [contribution_likes!]!
  """An aggregate relationship"""
  contribution_likes_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_likes_order_by!]
    """filter the rows returned"""
    where: contribution_likes_bool_exp
  ): contribution_likes_aggregate!
  """An array relationship"""
  contribution_reports(
    """distinct select on columns"""
    distinct_on: [contribution_reports_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_reports_order_by!]
    """filter the rows returned"""
    where: contribution_reports_bool_exp
  ): [contribution_reports!]!
  """An aggregate relationship"""
  contribution_reports_aggregate(
    """distinct select on columns"""
    distinct_on: [contribution_reports_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contribution_reports_order_by!]
    """filter the rows returned"""
    where: contribution_reports_bool_exp
  ): contribution_reports_aggregate!
  """An array relationship"""
  contributions(
    """distinct select on columns"""
    distinct_on: [contributions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contributions_order_by!]
    """filter the rows returned"""
    where: contributions_bool_exp
  ): [contributions!]!
  """An aggregate relationship"""
  contributions_aggregate(
    """distinct select on columns"""
    distinct_on: [contributions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [contributions_order_by!]
    """filter the rows returned"""
    where: contributions_bool_exp
  ): contributions_aggregate!
  createdAt: timestamptz!
  currentChallenge: String
  defaultRole: String!
  """An object relationship"""
  defaultRoleByRole: authRoles!
  disabled: Boolean!
  displayName: String!
  email: citext
  emailVerified: Boolean!
  id: uuid!
  isAnonymous: Boolean!
  lastSeen: timestamptz
  locale: String!
  """An array relationship"""
  messages_received(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]
    """filter the rows returned"""
    where: messages_bool_exp
  ): [messages!]!
  """An aggregate relationship"""
  messages_received_aggregate(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]
    """filter the rows returned"""
    where: messages_bool_exp
  ): messages_aggregate!
  """An array relationship"""
  messages_sent(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]
    """filter the rows returned"""
    where: messages_bool_exp
  ): [messages!]!
  """An aggregate relationship"""
  messages_sent_aggregate(
    """distinct select on columns"""
    distinct_on: [messages_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [messages_order_by!]
    """filter the rows returned"""
    where: messages_bool_exp
  ): messages_aggregate!
  metadata(
    """JSON select path"""
    path: String
  ): jsonb
  newEmail: citext
  otpHash: String
  otpHashExpiresAt: timestamptz!
  otpMethodLastUsed: String
  passwordHash: String
  phoneNumber: String
  phoneNumberVerified: Boolean!
  """An array relationship"""
  post_bookmarks(
    """distinct select on columns"""
    distinct_on: [post_bookmarks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_bookmarks_order_by!]
    """filter the rows returned"""
    where: post_bookmarks_bool_exp
  ): [post_bookmarks!]!
  """An aggregate relationship"""
  post_bookmarks_aggregate(
    """distinct select on columns"""
    distinct_on: [post_bookmarks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_bookmarks_order_by!]
    """filter the rows returned"""
    where: post_bookmarks_bool_exp
  ): post_bookmarks_aggregate!
  """An array relationship"""
  post_comments(
    """distinct select on columns"""
    distinct_on: [post_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_comments_order_by!]
    """filter the rows returned"""
    where: post_comments_bool_exp
  ): [post_comments!]!
  """An aggregate relationship"""
  post_comments_aggregate(
    """distinct select on columns"""
    distinct_on: [post_comments_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_comments_order_by!]
    """filter the rows returned"""
    where: post_comments_bool_exp
  ): post_comments_aggregate!
  """An array relationship"""
  post_likes(
    """distinct select on columns"""
    distinct_on: [post_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_likes_order_by!]
    """filter the rows returned"""
    where: post_likes_bool_exp
  ): [post_likes!]!
  """An aggregate relationship"""
  post_likes_aggregate(
    """distinct select on columns"""
    distinct_on: [post_likes_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_likes_order_by!]
    """filter the rows returned"""
    where: post_likes_bool_exp
  ): post_likes_aggregate!
  """An array relationship"""
  post_reports(
    """distinct select on columns"""
    distinct_on: [post_reports_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_reports_order_by!]
    """filter the rows returned"""
    where: post_reports_bool_exp
  ): [post_reports!]!
  """An aggregate relationship"""
  post_reports_aggregate(
    """distinct select on columns"""
    distinct_on: [post_reports_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [post_reports_order_by!]
    """filter the rows returned"""
    where: post_reports_bool_exp
  ): post_reports_aggregate!
  """An array relationship"""
  posts(
    """distinct select on columns"""
    distinct_on: [posts_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]
    """filter the rows returned"""
    where: posts_bool_exp
  ): [posts!]!
  """An aggregate relationship"""
  posts_aggregate(
    """distinct select on columns"""
    distinct_on: [posts_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]
    """filter the rows returned"""
    where: posts_bool_exp
  ): posts_aggregate!
  """An array relationship"""
  refreshTokens(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]
    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): [authRefreshTokens!]!
  """An aggregate relationship"""
  refreshTokens_aggregate(
    """distinct select on columns"""
    distinct_on: [authRefreshTokens_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authRefreshTokens_order_by!]
    """filter the rows returned"""
    where: authRefreshTokens_bool_exp
  ): authRefreshTokens_aggregate!
  """An array relationship"""
  roles(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]
    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): [authUserRoles!]!
  """An aggregate relationship"""
  roles_aggregate(
    """distinct select on columns"""
    distinct_on: [authUserRoles_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserRoles_order_by!]
    """filter the rows returned"""
    where: authUserRoles_bool_exp
  ): authUserRoles_aggregate!
  """An array relationship"""
  securityKeys(
    """distinct select on columns"""
    distinct_on: [authUserSecurityKeys_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserSecurityKeys_order_by!]
    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): [authUserSecurityKeys!]!
  """An aggregate relationship"""
  securityKeys_aggregate(
    """distinct select on columns"""
    distinct_on: [authUserSecurityKeys_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserSecurityKeys_order_by!]
    """filter the rows returned"""
    where: authUserSecurityKeys_bool_exp
  ): authUserSecurityKeys_aggregate!
  ticket: String
  ticketExpiresAt: timestamptz!
  totpSecret: String
  updatedAt: timestamptz!
  """An array relationship"""
  userProviders(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]
    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): [authUserProviders!]!
  """An aggregate relationship"""
  userProviders_aggregate(
    """distinct select on columns"""
    distinct_on: [authUserProviders_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [authUserProviders_order_by!]
    """filter the rows returned"""
    where: authUserProviders_bool_exp
  ): authUserProviders_aggregate!
  """An array relationship"""
  user_blocks(
    """distinct select on columns"""
    distinct_on: [user_blocks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_blocks_order_by!]
    """filter the rows returned"""
    where: user_blocks_bool_exp
  ): [user_blocks!]!
  """An aggregate relationship"""
  user_blocks_aggregate(
    """distinct select on columns"""
    distinct_on: [user_blocks_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_blocks_order_by!]
    """filter the rows returned"""
    where: user_blocks_bool_exp
  ): user_blocks_aggregate!
  """An array relationship"""
  user_preferences(
    """distinct select on columns"""
    distinct_on: [user_preferences_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_preferences_order_by!]
    """filter the rows returned"""
    where: user_preferences_bool_exp
  ): [user_preferences!]!
  """An aggregate relationship"""
  user_preferences_aggregate(
    """distinct select on columns"""
    distinct_on: [user_preferences_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_preferences_order_by!]
    """filter the rows returned"""
    where: user_preferences_bool_exp
  ): user_preferences_aggregate!
  """An array relationship"""
  user_profiles(
    """distinct select on columns"""
    distinct_on: [user_profiles_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_profiles_order_by!]
    """filter the rows returned"""
    where: user_profiles_bool_exp
  ): [user_profiles!]!
  """An aggregate relationship"""
  user_profiles_aggregate(
    """distinct select on columns"""
    distinct_on: [user_profiles_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [user_profiles_order_by!]
    """filter the rows returned"""
    where: user_profiles_bool_exp
  ): user_profiles_aggregate!
}

"""
aggregated selection of "auth.users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

input users_aggregate_bool_exp {
  bool_and: users_aggregate_bool_exp_bool_and
  bool_or: users_aggregate_bool_exp_bool_or
  count: users_aggregate_bool_exp_count
}

input users_aggregate_bool_exp_bool_and {
  arguments: users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: users_bool_exp
  predicate: Boolean_comparison_exp!
}

input users_aggregate_bool_exp_bool_or {
  arguments: users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: users_bool_exp
  predicate: Boolean_comparison_exp!
}

input users_aggregate_bool_exp_count {
  arguments: [users_select_column!]
  distinct: Boolean
  filter: users_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "auth.users"
"""
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
}

"""
order by aggregate values of table "auth.users"
"""
input users_aggregate_order_by {
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input users_append_input {
  metadata: jsonb
}

"""
input type for inserting array relation for remote table "auth.users"
"""
input users_arr_rel_insert_input {
  data: [users_insert_input!]!
  """upsert condition"""
  on_conflict: users_on_conflict
}

"""
Boolean expression to filter rows from the table "auth.users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  activeMfaType: String_comparison_exp
  avatarUrl: String_comparison_exp
  blocks_outgoing: user_blocks_bool_exp
  blocks_outgoing_aggregate: user_blocks_aggregate_bool_exp
  blog_comment_helpfuls: blog_comment_helpful_bool_exp
  blog_comment_helpfuls_aggregate: blog_comment_helpful_aggregate_bool_exp
  blog_comment_reports: blog_comment_reports_bool_exp
  blog_comment_reports_aggregate: blog_comment_reports_aggregate_bool_exp
  blog_comments: blog_comments_bool_exp
  blog_comments_aggregate: blog_comments_aggregate_bool_exp
  comment_likes: comment_likes_bool_exp
  comment_likes_aggregate: comment_likes_aggregate_bool_exp
  contribution_bookmarks: contribution_bookmarks_bool_exp
  contribution_bookmarks_aggregate: contribution_bookmarks_aggregate_bool_exp
  contribution_comments: contribution_comments_bool_exp
  contribution_comments_aggregate: contribution_comments_aggregate_bool_exp
  contribution_likes: contribution_likes_bool_exp
  contribution_likes_aggregate: contribution_likes_aggregate_bool_exp
  contribution_reports: contribution_reports_bool_exp
  contribution_reports_aggregate: contribution_reports_aggregate_bool_exp
  contributions: contributions_bool_exp
  contributions_aggregate: contributions_aggregate_bool_exp
  createdAt: timestamptz_comparison_exp
  currentChallenge: String_comparison_exp
  defaultRole: String_comparison_exp
  defaultRoleByRole: authRoles_bool_exp
  disabled: Boolean_comparison_exp
  displayName: String_comparison_exp
  email: citext_comparison_exp
  emailVerified: Boolean_comparison_exp
  id: uuid_comparison_exp
  isAnonymous: Boolean_comparison_exp
  lastSeen: timestamptz_comparison_exp
  locale: String_comparison_exp
  messages_received: messages_bool_exp
  messages_received_aggregate: messages_aggregate_bool_exp
  messages_sent: messages_bool_exp
  messages_sent_aggregate: messages_aggregate_bool_exp
  metadata: jsonb_comparison_exp
  newEmail: citext_comparison_exp
  otpHash: String_comparison_exp
  otpHashExpiresAt: timestamptz_comparison_exp
  otpMethodLastUsed: String_comparison_exp
  passwordHash: String_comparison_exp
  phoneNumber: String_comparison_exp
  phoneNumberVerified: Boolean_comparison_exp
  post_bookmarks: post_bookmarks_bool_exp
  post_bookmarks_aggregate: post_bookmarks_aggregate_bool_exp
  post_comments: post_comments_bool_exp
  post_comments_aggregate: post_comments_aggregate_bool_exp
  post_likes: post_likes_bool_exp
  post_likes_aggregate: post_likes_aggregate_bool_exp
  post_reports: post_reports_bool_exp
  post_reports_aggregate: post_reports_aggregate_bool_exp
  posts: posts_bool_exp
  posts_aggregate: posts_aggregate_bool_exp
  refreshTokens: authRefreshTokens_bool_exp
  refreshTokens_aggregate: authRefreshTokens_aggregate_bool_exp
  roles: authUserRoles_bool_exp
  roles_aggregate: authUserRoles_aggregate_bool_exp
  securityKeys: authUserSecurityKeys_bool_exp
  securityKeys_aggregate: authUserSecurityKeys_aggregate_bool_exp
  ticket: String_comparison_exp
  ticketExpiresAt: timestamptz_comparison_exp
  totpSecret: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
  userProviders: authUserProviders_bool_exp
  userProviders_aggregate: authUserProviders_aggregate_bool_exp
  user_blocks: user_blocks_bool_exp
  user_blocks_aggregate: user_blocks_aggregate_bool_exp
  user_preferences: user_preferences_bool_exp
  user_preferences_aggregate: user_preferences_aggregate_bool_exp
  user_profiles: user_profiles_bool_exp
  user_profiles_aggregate: user_profiles_aggregate_bool_exp
}

"""
unique or primary key constraints on table "auth.users"
"""
enum users_constraint {
  """
  unique or primary key constraint on columns "email"
  """
  users_email_key
  """
  unique or primary key constraint on columns "phone_number"
  """
  users_phone_number_key
  """
  unique or primary key constraint on columns "id"
  """
  users_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input users_delete_at_path_input {
  metadata: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input users_delete_elem_input {
  metadata: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input users_delete_key_input {
  metadata: String
}

"""
input type for inserting data into table "auth.users"
"""
input users_insert_input {
  activeMfaType: String
  avatarUrl: String
  blocks_outgoing: user_blocks_arr_rel_insert_input
  blog_comment_helpfuls: blog_comment_helpful_arr_rel_insert_input
  blog_comment_reports: blog_comment_reports_arr_rel_insert_input
  blog_comments: blog_comments_arr_rel_insert_input
  comment_likes: comment_likes_arr_rel_insert_input
  contribution_bookmarks: contribution_bookmarks_arr_rel_insert_input
  contribution_comments: contribution_comments_arr_rel_insert_input
  contribution_likes: contribution_likes_arr_rel_insert_input
  contribution_reports: contribution_reports_arr_rel_insert_input
  contributions: contributions_arr_rel_insert_input
  createdAt: timestamptz
  currentChallenge: String
  defaultRole: String
  defaultRoleByRole: authRoles_obj_rel_insert_input
  disabled: Boolean
  displayName: String
  email: citext
  emailVerified: Boolean
  id: uuid
  isAnonymous: Boolean
  lastSeen: timestamptz
  locale: String
  messages_received: messages_arr_rel_insert_input
  messages_sent: messages_arr_rel_insert_input
  metadata: jsonb
  newEmail: citext
  otpHash: String
  otpHashExpiresAt: timestamptz
  otpMethodLastUsed: String
  passwordHash: String
  phoneNumber: String
  phoneNumberVerified: Boolean
  post_bookmarks: post_bookmarks_arr_rel_insert_input
  post_comments: post_comments_arr_rel_insert_input
  post_likes: post_likes_arr_rel_insert_input
  post_reports: post_reports_arr_rel_insert_input
  posts: posts_arr_rel_insert_input
  refreshTokens: authRefreshTokens_arr_rel_insert_input
  roles: authUserRoles_arr_rel_insert_input
  securityKeys: authUserSecurityKeys_arr_rel_insert_input
  ticket: String
  ticketExpiresAt: timestamptz
  totpSecret: String
  updatedAt: timestamptz
  userProviders: authUserProviders_arr_rel_insert_input
  user_blocks: user_blocks_arr_rel_insert_input
  user_preferences: user_preferences_arr_rel_insert_input
  user_profiles: user_profiles_arr_rel_insert_input
}

"""aggregate max on columns"""
type users_max_fields {
  activeMfaType: String
  avatarUrl: String
  createdAt: timestamptz
  currentChallenge: String
  defaultRole: String
  displayName: String
  email: citext
  id: uuid
  lastSeen: timestamptz
  locale: String
  newEmail: citext
  otpHash: String
  otpHashExpiresAt: timestamptz
  otpMethodLastUsed: String
  passwordHash: String
  phoneNumber: String
  ticket: String
  ticketExpiresAt: timestamptz
  totpSecret: String
  updatedAt: timestamptz
}

"""
order by max() on columns of table "auth.users"
"""
input users_max_order_by {
  activeMfaType: order_by
  avatarUrl: order_by
  createdAt: order_by
  currentChallenge: order_by
  defaultRole: order_by
  displayName: order_by
  email: order_by
  id: order_by
  lastSeen: order_by
  locale: order_by
  newEmail: order_by
  otpHash: order_by
  otpHashExpiresAt: order_by
  otpMethodLastUsed: order_by
  passwordHash: order_by
  phoneNumber: order_by
  ticket: order_by
  ticketExpiresAt: order_by
  totpSecret: order_by
  updatedAt: order_by
}

"""aggregate min on columns"""
type users_min_fields {
  activeMfaType: String
  avatarUrl: String
  createdAt: timestamptz
  currentChallenge: String
  defaultRole: String
  displayName: String
  email: citext
  id: uuid
  lastSeen: timestamptz
  locale: String
  newEmail: citext
  otpHash: String
  otpHashExpiresAt: timestamptz
  otpMethodLastUsed: String
  passwordHash: String
  phoneNumber: String
  ticket: String
  ticketExpiresAt: timestamptz
  totpSecret: String
  updatedAt: timestamptz
}

"""
order by min() on columns of table "auth.users"
"""
input users_min_order_by {
  activeMfaType: order_by
  avatarUrl: order_by
  createdAt: order_by
  currentChallenge: order_by
  defaultRole: order_by
  displayName: order_by
  email: order_by
  id: order_by
  lastSeen: order_by
  locale: order_by
  newEmail: order_by
  otpHash: order_by
  otpHashExpiresAt: order_by
  otpMethodLastUsed: order_by
  passwordHash: order_by
  phoneNumber: order_by
  ticket: order_by
  ticketExpiresAt: order_by
  totpSecret: order_by
  updatedAt: order_by
}

"""
response of any mutation on the table "auth.users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "auth.users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!
  """upsert condition"""
  on_conflict: users_on_conflict
}

"""
on_conflict condition type for table "auth.users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "auth.users"."""
input users_order_by {
  activeMfaType: order_by
  avatarUrl: order_by
  blocks_outgoing_aggregate: user_blocks_aggregate_order_by
  blog_comment_helpfuls_aggregate: blog_comment_helpful_aggregate_order_by
  blog_comment_reports_aggregate: blog_comment_reports_aggregate_order_by
  blog_comments_aggregate: blog_comments_aggregate_order_by
  comment_likes_aggregate: comment_likes_aggregate_order_by
  contribution_bookmarks_aggregate: contribution_bookmarks_aggregate_order_by
  contribution_comments_aggregate: contribution_comments_aggregate_order_by
  contribution_likes_aggregate: contribution_likes_aggregate_order_by
  contribution_reports_aggregate: contribution_reports_aggregate_order_by
  contributions_aggregate: contributions_aggregate_order_by
  createdAt: order_by
  currentChallenge: order_by
  defaultRole: order_by
  defaultRoleByRole: authRoles_order_by
  disabled: order_by
  displayName: order_by
  email: order_by
  emailVerified: order_by
  id: order_by
  isAnonymous: order_by
  lastSeen: order_by
  locale: order_by
  messages_received_aggregate: messages_aggregate_order_by
  messages_sent_aggregate: messages_aggregate_order_by
  metadata: order_by
  newEmail: order_by
  otpHash: order_by
  otpHashExpiresAt: order_by
  otpMethodLastUsed: order_by
  passwordHash: order_by
  phoneNumber: order_by
  phoneNumberVerified: order_by
  post_bookmarks_aggregate: post_bookmarks_aggregate_order_by
  post_comments_aggregate: post_comments_aggregate_order_by
  post_likes_aggregate: post_likes_aggregate_order_by
  post_reports_aggregate: post_reports_aggregate_order_by
  posts_aggregate: posts_aggregate_order_by
  refreshTokens_aggregate: authRefreshTokens_aggregate_order_by
  roles_aggregate: authUserRoles_aggregate_order_by
  securityKeys_aggregate: authUserSecurityKeys_aggregate_order_by
  ticket: order_by
  ticketExpiresAt: order_by
  totpSecret: order_by
  updatedAt: order_by
  userProviders_aggregate: authUserProviders_aggregate_order_by
  user_blocks_aggregate: user_blocks_aggregate_order_by
  user_preferences_aggregate: user_preferences_aggregate_order_by
  user_profiles_aggregate: user_profiles_aggregate_order_by
}

"""primary key columns input for table: auth.users"""
input users_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input users_prepend_input {
  metadata: jsonb
}

"""
select columns of table "auth.users"
"""
enum users_select_column {
  """column name"""
  activeMfaType
  """column name"""
  avatarUrl
  """column name"""
  createdAt
  """column name"""
  currentChallenge
  """column name"""
  defaultRole
  """column name"""
  disabled
  """column name"""
  displayName
  """column name"""
  email
  """column name"""
  emailVerified
  """column name"""
  id
  """column name"""
  isAnonymous
  """column name"""
  lastSeen
  """column name"""
  locale
  """column name"""
  metadata
  """column name"""
  newEmail
  """column name"""
  otpHash
  """column name"""
  otpHashExpiresAt
  """column name"""
  otpMethodLastUsed
  """column name"""
  passwordHash
  """column name"""
  phoneNumber
  """column name"""
  phoneNumberVerified
  """column name"""
  ticket
  """column name"""
  ticketExpiresAt
  """column name"""
  totpSecret
  """column name"""
  updatedAt
}

"""
select "users_aggregate_bool_exp_bool_and_arguments_columns" columns of table "auth.users"
"""
enum users_select_column_users_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  disabled
  """column name"""
  emailVerified
  """column name"""
  isAnonymous
  """column name"""
  phoneNumberVerified
}

"""
select "users_aggregate_bool_exp_bool_or_arguments_columns" columns of table "auth.users"
"""
enum users_select_column_users_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  disabled
  """column name"""
  emailVerified
  """column name"""
  isAnonymous
  """column name"""
  phoneNumberVerified
}

"""
input type for updating data in table "auth.users"
"""
input users_set_input {
  activeMfaType: String
  avatarUrl: String
  createdAt: timestamptz
  currentChallenge: String
  defaultRole: String
  disabled: Boolean
  displayName: String
  email: citext
  emailVerified: Boolean
  id: uuid
  isAnonymous: Boolean
  lastSeen: timestamptz
  locale: String
  metadata: jsonb
  newEmail: citext
  otpHash: String
  otpHashExpiresAt: timestamptz
  otpMethodLastUsed: String
  passwordHash: String
  phoneNumber: String
  phoneNumberVerified: Boolean
  ticket: String
  ticketExpiresAt: timestamptz
  totpSecret: String
  updatedAt: timestamptz
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: users_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input users_stream_cursor_value_input {
  activeMfaType: String
  avatarUrl: String
  createdAt: timestamptz
  currentChallenge: String
  defaultRole: String
  disabled: Boolean
  displayName: String
  email: citext
  emailVerified: Boolean
  id: uuid
  isAnonymous: Boolean
  lastSeen: timestamptz
  locale: String
  metadata: jsonb
  newEmail: citext
  otpHash: String
  otpHashExpiresAt: timestamptz
  otpMethodLastUsed: String
  passwordHash: String
  phoneNumber: String
  phoneNumberVerified: Boolean
  ticket: String
  ticketExpiresAt: timestamptz
  totpSecret: String
  updatedAt: timestamptz
}

"""
update columns of table "auth.users"
"""
enum users_update_column {
  """column name"""
  activeMfaType
  """column name"""
  avatarUrl
  """column name"""
  createdAt
  """column name"""
  currentChallenge
  """column name"""
  defaultRole
  """column name"""
  disabled
  """column name"""
  displayName
  """column name"""
  email
  """column name"""
  emailVerified
  """column name"""
  id
  """column name"""
  isAnonymous
  """column name"""
  lastSeen
  """column name"""
  locale
  """column name"""
  metadata
  """column name"""
  newEmail
  """column name"""
  otpHash
  """column name"""
  otpHashExpiresAt
  """column name"""
  otpMethodLastUsed
  """column name"""
  passwordHash
  """column name"""
  phoneNumber
  """column name"""
  phoneNumberVerified
  """column name"""
  ticket
  """column name"""
  ticketExpiresAt
  """column name"""
  totpSecret
  """column name"""
  updatedAt
}

input users_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: users_append_input
  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: users_delete_at_path_input
  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: users_delete_elem_input
  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: users_delete_key_input
  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: users_prepend_input
  """sets the columns of the filtered rows to the given values"""
  _set: users_set_input
  """filter the rows which have to be updated"""
  where: users_bool_exp!
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

"""
columns and relationships of "storage.virus"
"""
type virus {
  createdAt: timestamptz!
  """An object relationship"""
  file: files!
  fileId: uuid!
  filename: String!
  id: uuid!
  updatedAt: timestamptz!
  userSession(
    """JSON select path"""
    path: String
  ): jsonb!
  virus: String!
}

"""
aggregated selection of "storage.virus"
"""
type virus_aggregate {
  aggregate: virus_aggregate_fields
  nodes: [virus!]!
}

"""
aggregate fields of "storage.virus"
"""
type virus_aggregate_fields {
  count(columns: [virus_select_column!], distinct: Boolean): Int!
  max: virus_max_fields
  min: virus_min_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input virus_append_input {
  userSession: jsonb
}

"""
Boolean expression to filter rows from the table "storage.virus". All fields are combined with a logical 'AND'.
"""
input virus_bool_exp {
  _and: [virus_bool_exp!]
  _not: virus_bool_exp
  _or: [virus_bool_exp!]
  createdAt: timestamptz_comparison_exp
  file: files_bool_exp
  fileId: uuid_comparison_exp
  filename: String_comparison_exp
  id: uuid_comparison_exp
  updatedAt: timestamptz_comparison_exp
  userSession: jsonb_comparison_exp
  virus: String_comparison_exp
}

"""
unique or primary key constraints on table "storage.virus"
"""
enum virus_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  virus_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input virus_delete_at_path_input {
  userSession: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input virus_delete_elem_input {
  userSession: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input virus_delete_key_input {
  userSession: String
}

"""
input type for inserting data into table "storage.virus"
"""
input virus_insert_input {
  createdAt: timestamptz
  file: files_obj_rel_insert_input
  fileId: uuid
  filename: String
  id: uuid
  updatedAt: timestamptz
  userSession: jsonb
  virus: String
}

"""aggregate max on columns"""
type virus_max_fields {
  createdAt: timestamptz
  fileId: uuid
  filename: String
  id: uuid
  updatedAt: timestamptz
  virus: String
}

"""aggregate min on columns"""
type virus_min_fields {
  createdAt: timestamptz
  fileId: uuid
  filename: String
  id: uuid
  updatedAt: timestamptz
  virus: String
}

"""
response of any mutation on the table "storage.virus"
"""
type virus_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!
  """data from the rows affected by the mutation"""
  returning: [virus!]!
}

"""
on_conflict condition type for table "storage.virus"
"""
input virus_on_conflict {
  constraint: virus_constraint!
  update_columns: [virus_update_column!]! = []
  where: virus_bool_exp
}

"""Ordering options when selecting data from "storage.virus"."""
input virus_order_by {
  createdAt: order_by
  file: files_order_by
  fileId: order_by
  filename: order_by
  id: order_by
  updatedAt: order_by
  userSession: order_by
  virus: order_by
}

"""primary key columns input for table: storage.virus"""
input virus_pk_columns_input {
  id: uuid!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input virus_prepend_input {
  userSession: jsonb
}

"""
select columns of table "storage.virus"
"""
enum virus_select_column {
  """column name"""
  createdAt
  """column name"""
  fileId
  """column name"""
  filename
  """column name"""
  id
  """column name"""
  updatedAt
  """column name"""
  userSession
  """column name"""
  virus
}

"""
input type for updating data in table "storage.virus"
"""
input virus_set_input {
  createdAt: timestamptz
  fileId: uuid
  filename: String
  id: uuid
  updatedAt: timestamptz
  userSession: jsonb
  virus: String
}

"""
Streaming cursor of the table "virus"
"""
input virus_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: virus_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input virus_stream_cursor_value_input {
  createdAt: timestamptz
  fileId: uuid
  filename: String
  id: uuid
  updatedAt: timestamptz
  userSession: jsonb
  virus: String
}

"""
update columns of table "storage.virus"
"""
enum virus_update_column {
  """column name"""
  createdAt
  """column name"""
  fileId
  """column name"""
  filename
  """column name"""
  id
  """column name"""
  updatedAt
  """column name"""
  userSession
  """column name"""
  virus
}

input virus_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: virus_append_input
  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: virus_delete_at_path_input
  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: virus_delete_elem_input
  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: virus_delete_key_input
  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: virus_prepend_input
  """sets the columns of the filtered rows to the given values"""
  _set: virus_set_input
  """filter the rows which have to be updated"""
  where: virus_bool_exp!
}